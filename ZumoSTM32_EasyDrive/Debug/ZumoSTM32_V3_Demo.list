
ZumoSTM32_V3_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a24  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001278  08009b38  08009b38  00019b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb0  0800adb0  00020484  2**0
                  CONTENTS
  4 .ARM          00000000  0800adb0  0800adb0  00020484  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800adb0  0800adb0  00020484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adb0  0800adb0  0001adb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adb4  0800adb4  0001adb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000484  20000000  0800adb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000094c  20000484  0800b23c  00020484  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dd0  0800b23c  00020dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY
 12 .debug_info   000650ab  00000000  00000000  000204ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000078d8  00000000  00000000  00085558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002e78  00000000  00000000  0008ce30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004df0  00000000  00000000  0008fca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a8aa  00000000  00000000  00094a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038e70  00000000  00000000  000af342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d417  00000000  00000000  000e81b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001755c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad44  00000000  00000000  0017561c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00042554  00000000  00000000  00180360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000484 	.word	0x20000484
 800012c:	00000000 	.word	0x00000000
 8000130:	08009b1c 	.word	0x08009b1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000488 	.word	0x20000488
 800014c:	08009b1c 	.word	0x08009b1c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2iz>:
 8000b74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b7c:	d215      	bcs.n	8000baa <__aeabi_d2iz+0x36>
 8000b7e:	d511      	bpl.n	8000ba4 <__aeabi_d2iz+0x30>
 8000b80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b88:	d912      	bls.n	8000bb0 <__aeabi_d2iz+0x3c>
 8000b8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	4240      	negne	r0, r0
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d105      	bne.n	8000bbc <__aeabi_d2iz+0x48>
 8000bb0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	bf08      	it	eq
 8000bb6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__gesf2>:
 8000bc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000bc8:	e006      	b.n	8000bd8 <__cmpsf2+0x4>
 8000bca:	bf00      	nop

08000bcc <__lesf2>:
 8000bcc:	f04f 0c01 	mov.w	ip, #1
 8000bd0:	e002      	b.n	8000bd8 <__cmpsf2+0x4>
 8000bd2:	bf00      	nop

08000bd4 <__cmpsf2>:
 8000bd4:	f04f 0c01 	mov.w	ip, #1
 8000bd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d011      	beq.n	8000c14 <__cmpsf2+0x40>
 8000bf0:	b001      	add	sp, #4
 8000bf2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bf6:	bf18      	it	ne
 8000bf8:	ea90 0f01 	teqne	r0, r1
 8000bfc:	bf58      	it	pl
 8000bfe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c02:	bf88      	it	hi
 8000c04:	17c8      	asrhi	r0, r1, #31
 8000c06:	bf38      	it	cc
 8000c08:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c0c:	bf18      	it	ne
 8000c0e:	f040 0001 	orrne.w	r0, r0, #1
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	d102      	bne.n	8000c20 <__cmpsf2+0x4c>
 8000c1a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c1e:	d105      	bne.n	8000c2c <__cmpsf2+0x58>
 8000c20:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c24:	d1e4      	bne.n	8000bf0 <__cmpsf2+0x1c>
 8000c26:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c2a:	d0e1      	beq.n	8000bf0 <__cmpsf2+0x1c>
 8000c2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__aeabi_cfrcmple>:
 8000c34:	4684      	mov	ip, r0
 8000c36:	4608      	mov	r0, r1
 8000c38:	4661      	mov	r1, ip
 8000c3a:	e7ff      	b.n	8000c3c <__aeabi_cfcmpeq>

08000c3c <__aeabi_cfcmpeq>:
 8000c3c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c3e:	f7ff ffc9 	bl	8000bd4 <__cmpsf2>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	bf48      	it	mi
 8000c46:	f110 0f00 	cmnmi.w	r0, #0
 8000c4a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c4c <__aeabi_fcmpeq>:
 8000c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c50:	f7ff fff4 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c54:	bf0c      	ite	eq
 8000c56:	2001      	moveq	r0, #1
 8000c58:	2000      	movne	r0, #0
 8000c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fcmplt>:
 8000c60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c64:	f7ff ffea 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c68:	bf34      	ite	cc
 8000c6a:	2001      	movcc	r0, #1
 8000c6c:	2000      	movcs	r0, #0
 8000c6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c72:	bf00      	nop

08000c74 <__aeabi_fcmple>:
 8000c74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c78:	f7ff ffe0 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c7c:	bf94      	ite	ls
 8000c7e:	2001      	movls	r0, #1
 8000c80:	2000      	movhi	r0, #0
 8000c82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c86:	bf00      	nop

08000c88 <__aeabi_fcmpge>:
 8000c88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c8c:	f7ff ffd2 	bl	8000c34 <__aeabi_cfrcmple>
 8000c90:	bf94      	ite	ls
 8000c92:	2001      	movls	r0, #1
 8000c94:	2000      	movhi	r0, #0
 8000c96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fcmpgt>:
 8000c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca0:	f7ff ffc8 	bl	8000c34 <__aeabi_cfrcmple>
 8000ca4:	bf34      	ite	cc
 8000ca6:	2001      	movcc	r0, #1
 8000ca8:	2000      	movcs	r0, #0
 8000caa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cae:	bf00      	nop

08000cb0 <__aeabi_f2uiz>:
 8000cb0:	0042      	lsls	r2, r0, #1
 8000cb2:	d20e      	bcs.n	8000cd2 <__aeabi_f2uiz+0x22>
 8000cb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cb8:	d30b      	bcc.n	8000cd2 <__aeabi_f2uiz+0x22>
 8000cba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000cbe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cc2:	d409      	bmi.n	8000cd8 <__aeabi_f2uiz+0x28>
 8000cc4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ccc:	fa23 f002 	lsr.w	r0, r3, r2
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	4770      	bx	lr
 8000cd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_f2uiz+0x32>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d102      	bne.n	8000ce8 <__aeabi_f2uiz+0x38>
 8000ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce6:	4770      	bx	lr
 8000ce8:	f04f 0000 	mov.w	r0, #0
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <driving>:

#include "zumo/simple.h"


void driving()
{
 8000cf0:	b508      	push	{r3, lr}
	// Test der Routinen aus simple.c

	while(1)
	{
		forward(300);
 8000cf2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cf6:	f005 fd23 	bl	8006740 <forward>
		//turn90left();
		// ... usw... ggf. auch Parameter MOVE_FAIL MOVE OK testen
		HAL_Delay(10000);
 8000cfa:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cfe:	f001 fb25 	bl	800234c <HAL_Delay>
	while(1)
 8000d02:	e7f6      	b.n	8000cf2 <driving+0x2>

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d06:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d08:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0a:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d10:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 8000d14:	b091      	sub	sp, #68	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d16:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d18:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d1c:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d1e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d20:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d22:	9307      	str	r3, [sp, #28]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d24:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000d2c:	e9cd 4404 	strd	r4, r4, [sp, #16]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d30:	9408      	str	r4, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d32:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d34:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d36:	f002 fc57 	bl	80035e8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3a:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d40:	4629      	mov	r1, r5
 8000d42:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d46:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d48:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4a:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d4c:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d4e:	f002 fe77 	bl	8003a40 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000d52:	b011      	add	sp, #68	; 0x44
 8000d54:	bd30      	pop	{r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <main>:
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	2400      	movs	r4, #0
{
 8000d5a:	b580      	push	{r7, lr}
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d5c:	2704      	movs	r7, #4
{
 8000d5e:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8000d60:	f001 fad0 	bl	8002304 <HAL_Init>
  SystemClock_Config();
 8000d64:	f7ff ffce 	bl	8000d04 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000d6c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d70:	4dba      	ldr	r5, [pc, #744]	; (800105c <main+0x304>)
  HAL_GPIO_WritePin(BNO_NRST_GPIO_Port, BNO_NRST_Pin, GPIO_PIN_SET);
 8000d72:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(BNO_NRST_GPIO_Port, BNO_NRST_Pin, GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	61ab      	str	r3, [r5, #24]
 8000d7e:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(BNO_NRST_GPIO_Port, BNO_NRST_Pin, GPIO_PIN_SET);
 8000d80:	48b7      	ldr	r0, [pc, #732]	; (8001060 <main+0x308>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8c:	4616      	mov	r6, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8e:	f043 0320 	orr.w	r3, r3, #32
 8000d92:	61ab      	str	r3, [r5, #24]
 8000d94:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = BNO_NRST_Pin;
 8000d96:	468a      	mov	sl, r1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d98:	f003 0320 	and.w	r3, r3, #32
 8000d9c:	9302      	str	r3, [sp, #8]
 8000d9e:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BUZ_PWM_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : TOF_RR_INT_Pin */
  GPIO_InitStruct.Pin = TOF_RR_INT_Pin;
 8000da2:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	433b      	orrs	r3, r7
 8000da8:	61ab      	str	r3, [r5, #24]
 8000daa:	69ab      	ldr	r3, [r5, #24]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dac:	f04f 080c 	mov.w	r8, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	403b      	ands	r3, r7
 8000db2:	9303      	str	r3, [sp, #12]
 8000db4:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	69ab      	ldr	r3, [r5, #24]
 8000db8:	f043 0308 	orr.w	r3, r3, #8
 8000dbc:	61ab      	str	r3, [r5, #24]
 8000dbe:	69ab      	ldr	r3, [r5, #24]
 8000dc0:	f003 0308 	and.w	r3, r3, #8
 8000dc4:	9304      	str	r3, [sp, #16]
 8000dc6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(BNO_NRST_GPIO_Port, BNO_NRST_Pin, GPIO_PIN_SET);
 8000dc8:	f001 fd22 	bl	8002810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PINHDR0_Pin|DISP_RST_Pin|DISP_DC_Pin|BT_PWR_Pin
 8000dcc:	4622      	mov	r2, r4
 8000dce:	f640 7134 	movw	r1, #3892	; 0xf34
 8000dd2:	48a3      	ldr	r0, [pc, #652]	; (8001060 <main+0x308>)
 8000dd4:	f001 fd1c 	bl	8002810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_USR0_Pin|LED_USR1_Pin|LED_FRONT_Pin|MOT_L_DIR_Pin
 8000dd8:	4622      	mov	r2, r4
 8000dda:	f64f 0103 	movw	r1, #63491	; 0xf803
 8000dde:	48a1      	ldr	r0, [pc, #644]	; (8001064 <main+0x30c>)
 8000de0:	f001 fd16 	bl	8002810 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUZ_PWM_GPIO_Port, BUZ_PWM_Pin, GPIO_PIN_RESET);
 8000de4:	4622      	mov	r2, r4
 8000de6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dea:	489f      	ldr	r0, [pc, #636]	; (8001068 <main+0x310>)
 8000dec:	f001 fd10 	bl	8002810 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_OK_Pin|BTN_USR_Pin|TOF_LL_INT_Pin
 8000df0:	f24f 0308 	movw	r3, #61448	; 0xf008
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df4:	489a      	ldr	r0, [pc, #616]	; (8001060 <main+0x308>)
 8000df6:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = BTN_DN_Pin|BTN_OK_Pin|BTN_USR_Pin|TOF_LL_INT_Pin
 8000df8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfa:	e9cd 460c 	strd	r4, r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f001 fbf3 	bl	80025e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 8000e02:	4897      	ldr	r0, [pc, #604]	; (8001060 <main+0x308>)
 8000e04:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e06:	e9cd 640b 	strd	r6, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(BNO_INT_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f001 fbec 	bl	80025e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e10:	2311      	movs	r3, #17
  HAL_GPIO_Init(BNO_NRST_GPIO_Port, &GPIO_InitStruct);
 8000e12:	4893      	ldr	r0, [pc, #588]	; (8001060 <main+0x308>)
 8000e14:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e16:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	e9cd 4a0d 	strd	r4, sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = BNO_NRST_Pin;
 8000e1c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BNO_NRST_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f001 fbe2 	bl	80025e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PINHDR0_Pin|DISP_RST_Pin|DISP_DC_Pin|BT_PWR_Pin
 8000e24:	f640 7334 	movw	r3, #3892	; 0xf34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e28:	488d      	ldr	r0, [pc, #564]	; (8001060 <main+0x308>)
 8000e2a:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PINHDR0_Pin|DISP_RST_Pin|DISP_DC_Pin|BT_PWR_Pin
 8000e2c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f001 fbd7 	bl	80025e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_USR0_Pin|LED_USR1_Pin|LED_FRONT_Pin|MOT_L_DIR_Pin
 8000e3a:	f64f 0303 	movw	r3, #63491	; 0xf803
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	4889      	ldr	r0, [pc, #548]	; (8001064 <main+0x30c>)
 8000e40:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = LED_USR0_Pin|LED_USR1_Pin|LED_FRONT_Pin|MOT_L_DIR_Pin
 8000e42:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f001 fbcc 	bl	80025e8 <HAL_GPIO_Init>
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e50:	4884      	ldr	r0, [pc, #528]	; (8001064 <main+0x30c>)
 8000e52:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e54:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f001 fbc5 	bl	80025e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PINHDR_PWM1_Pin;
 8000e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(PINHDR_PWM1_GPIO_Port, &GPIO_InitStruct);
 8000e62:	4881      	ldr	r0, [pc, #516]	; (8001068 <main+0x310>)
 8000e64:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = PINHDR_PWM1_Pin;
 8000e66:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  HAL_GPIO_Init(PINHDR_PWM1_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f001 fbba 	bl	80025e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUZ_PWM_Pin;
 8000e74:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(BUZ_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e78:	487b      	ldr	r0, [pc, #492]	; (8001068 <main+0x310>)
 8000e7a:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = BUZ_PWM_Pin;
 8000e7c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	e9cd 640c 	strd	r6, r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
  HAL_GPIO_Init(BUZ_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f001 fbaf 	bl	80025e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(TOF_RR_INT_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	4877      	ldr	r0, [pc, #476]	; (8001068 <main+0x310>)
 8000e8c:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8e:	e9cd 940b 	strd	r9, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e92:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(TOF_RR_INT_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f001 fba8 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_FR_INT_Pin */
  GPIO_InitStruct.Pin = TOF_FR_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(TOF_FR_INT_GPIO_Port, &GPIO_InitStruct);
 8000e98:	4874      	ldr	r0, [pc, #464]	; (800106c <main+0x314>)
 8000e9a:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9c:	e9cd 740b 	strd	r7, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea0:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(TOF_FR_INT_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f001 fba1 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_FF_INT_Pin TOF_FL_INT_Pin */
  GPIO_InitStruct.Pin = TOF_FF_INT_Pin|TOF_FL_INT_Pin;
 8000ea6:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	486e      	ldr	r0, [pc, #440]	; (8001064 <main+0x30c>)
 8000eaa:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = TOF_FF_INT_Pin|TOF_FL_INT_Pin;
 8000eac:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eae:	e9cd 460c 	strd	r4, r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb2:	f001 fb99 	bl	80025e8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb6:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000eb8:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eba:	4333      	orrs	r3, r6
 8000ebc:	616b      	str	r3, [r5, #20]
 8000ebe:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ec0:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ec4:	200d      	movs	r0, #13
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000eca:	f001 fa63 	bl	8002394 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ece:	200d      	movs	r0, #13
 8000ed0:	f001 fa9e 	bl	8002410 <HAL_NVIC_EnableIRQ>
  hspi1.Init.CRCPolynomial = 10;
 8000ed4:	230a      	movs	r3, #10
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ed6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000eda:	2218      	movs	r2, #24
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000edc:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi1.Instance = SPI1;
 8000ee0:	4863      	ldr	r0, [pc, #396]	; (8001070 <main+0x318>)
  hspi1.Init.CRCPolynomial = 10;
 8000ee2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Instance = SPI1;
 8000ee4:	4b63      	ldr	r3, [pc, #396]	; (8001074 <main+0x31c>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ee6:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eea:	6045      	str	r5, [r0, #4]
  hspi1.Instance = SPI1;
 8000eec:	6003      	str	r3, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eee:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ef2:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef6:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efa:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000efc:	f002 fea2 	bl	8003c44 <HAL_SPI_Init>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 8000f04:	485c      	ldr	r0, [pc, #368]	; (8001078 <main+0x320>)
  hi2c1.Init.ClockSpeed = 100000;
 8000f06:	4a5d      	ldr	r2, [pc, #372]	; (800107c <main+0x324>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f08:	6103      	str	r3, [r0, #16]
  hi2c1.Init.ClockSpeed = 100000;
 8000f0a:	4b5d      	ldr	r3, [pc, #372]	; (8001080 <main+0x328>)
  hi2c1.Init.OwnAddress1 = 0;
 8000f0c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8000f10:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress2 = 0;
 8000f14:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f18:	e9c0 4407 	strd	r4, r4, [r0, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f1c:	f001 fe70 	bl	8002c00 <HAL_I2C_Init>
  huart1.Init.BaudRate = 115200;
 8000f20:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Instance = USART1;
 8000f24:	4857      	ldr	r0, [pc, #348]	; (8001084 <main+0x32c>)
  htim2.Instance = TIM2;
 8000f26:	4d58      	ldr	r5, [pc, #352]	; (8001088 <main+0x330>)
  huart1.Init.BaudRate = 115200;
 8000f28:	6043      	str	r3, [r0, #4]
  huart1.Instance = USART1;
 8000f2a:	4b58      	ldr	r3, [pc, #352]	; (800108c <main+0x334>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Instance = USART1;
 8000f30:	6003      	str	r3, [r0, #0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f32:	e9c0 4804 	strd	r4, r8, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f36:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f3a:	f003 fc27 	bl	800478c <HAL_UART_Init>
  htim2.Init.Prescaler = 72;
 8000f3e:	2248      	movs	r2, #72	; 0x48
  htim2.Init.Period = 100;
 8000f40:	2364      	movs	r3, #100	; 0x64
  htim2.Instance = TIM2;
 8000f42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f46:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 72;
 8000f48:	e9c5 1200 	strd	r1, r2, [r5]
  htim2.Init.Period = 100;
 8000f4c:	60eb      	str	r3, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f50:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	61ac      	str	r4, [r5, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f54:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000f58:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8000f5c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f60:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000f64:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f66:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f68:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6a:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	9406      	str	r4, [sp, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6e:	f002 ffe9 	bl	8003f44 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f72:	a907      	add	r1, sp, #28
 8000f74:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f76:	f8cd 901c 	str.w	r9, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f7a:	f003 f913 	bl	80041a4 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f7e:	4628      	mov	r0, r5
 8000f80:	f003 f852 	bl	8004028 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f84:	4628      	mov	r0, r5
 8000f86:	a905      	add	r1, sp, #20
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f8c:	f003 fb98 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f90:	2360      	movs	r3, #96	; 0x60
  htim3.Init.Period = 65535;
 8000f92:	f64f 79ff 	movw	r9, #65535	; 0xffff
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f96:	4622      	mov	r2, r4
 8000f98:	4628      	mov	r0, r5
 8000f9a:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9c:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa2:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa4:	f003 fb20 	bl	80045e8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fa8:	463a      	mov	r2, r7
 8000faa:	4628      	mov	r0, r5
 8000fac:	a90b      	add	r1, sp, #44	; 0x2c
 8000fae:	f003 fb1b 	bl	80045e8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	a90b      	add	r1, sp, #44	; 0x2c
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	f003 fb16 	bl	80045e8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	f000 f9e5 	bl	800138c <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 8000fc2:	4d33      	ldr	r5, [pc, #204]	; (8001090 <main+0x338>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	4621      	mov	r1, r4
 8000fc8:	a80c      	add	r0, sp, #48	; 0x30
 8000fca:	f006 fb81 	bl	80076d0 <memset>
  htim3.Instance = TIM3;
 8000fce:	4b31      	ldr	r3, [pc, #196]	; (8001094 <main+0x33c>)
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	a90b      	add	r1, sp, #44	; 0x2c
  htim3.Instance = TIM3;
 8000fd4:	602b      	str	r3, [r5, #0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd6:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fdc:	61ac      	str	r4, [r5, #24]
  htim3.Init.Period = 65535;
 8000fde:	f8c5 900c 	str.w	r9, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe2:	e9cd 4407 	strd	r4, r4, [sp, #28]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fe6:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe8:	960d      	str	r6, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fea:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000fec:	f003 fa7e 	bl	80044ec <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff0:	4628      	mov	r0, r5
 8000ff2:	a907      	add	r1, sp, #28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff4:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ff8:	f003 fb62 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	4621      	mov	r1, r4
 8001000:	a80c      	add	r0, sp, #48	; 0x30
 8001002:	f006 fb65 	bl	80076d0 <memset>
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001006:	2380      	movs	r3, #128	; 0x80
  htim4.Instance = TIM4;
 8001008:	4d23      	ldr	r5, [pc, #140]	; (8001098 <main+0x340>)
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800100a:	a90b      	add	r1, sp, #44	; 0x2c
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800100c:	61ab      	str	r3, [r5, #24]
  htim4.Instance = TIM4;
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <main+0x344>)
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001010:	4628      	mov	r0, r5
  htim4.Instance = TIM4;
 8001012:	602b      	str	r3, [r5, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001014:	e9cd 4407 	strd	r4, r4, [sp, #28]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	e9c5 4401 	strd	r4, r4, [r5, #4]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800101c:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800101e:	960d      	str	r6, [sp, #52]	; 0x34
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001020:	9611      	str	r6, [sp, #68]	; 0x44
  htim4.Init.Period = 65535;
 8001022:	f8c5 900c 	str.w	r9, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001028:	f003 fa60 	bl	80044ec <HAL_TIM_Encoder_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800102c:	a907      	add	r1, sp, #28
 800102e:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001030:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001034:	f003 fb44 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
  huart2.Init.BaudRate = 38400;
 8001038:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  huart2.Instance = USART2;
 800103c:	4818      	ldr	r0, [pc, #96]	; (80010a0 <main+0x348>)
 800103e:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <main+0x34c>)
  huart2.Init.BaudRate = 38400;
 8001040:	6043      	str	r3, [r0, #4]
  huart2.Instance = USART2;
 8001042:	6002      	str	r2, [r0, #0]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001044:	e9c0 4403 	strd	r4, r4, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001048:	e9c0 8405 	strd	r8, r4, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104c:	6084      	str	r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001050:	f003 fb9c 	bl	800478c <HAL_UART_Init>
  main_user();
 8001054:	f000 f82a 	bl	80010ac <main_user>
  while (1)
 8001058:	e7fe      	b.n	8001058 <main+0x300>
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	40011000 	.word	0x40011000
 8001064:	40010c00 	.word	0x40010c00
 8001068:	40010800 	.word	0x40010800
 800106c:	40011400 	.word	0x40011400
 8001070:	20000538 	.word	0x20000538
 8001074:	40013000 	.word	0x40013000
 8001078:	200004e4 	.word	0x200004e4
 800107c:	40005400 	.word	0x40005400
 8001080:	000186a0 	.word	0x000186a0
 8001084:	20000650 	.word	0x20000650
 8001088:	20000590 	.word	0x20000590
 800108c:	40013800 	.word	0x40013800
 8001090:	200005d0 	.word	0x200005d0
 8001094:	40000400 	.word	0x40000400
 8001098:	20000610 	.word	0x20000610
 800109c:	40000800 	.word	0x40000800
 80010a0:	20000690 	.word	0x20000690
 80010a4:	40004400 	.word	0x40004400

080010a8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <main_user>:
#define WITH_TESTING		// Uncomment to remove test menu option (saves approx. 10k flash memory)

void driving();				// Prototype for simple driving

void main_user()
{
 80010ac:	b508      	push	{r3, lr}
	uint8_t status;

	display_init();		// initialize display driver
 80010ae:	f005 f819 	bl	80060e4 <display_init>
#ifdef WITH_TESTING
	display_gotoxy(20,7);
 80010b2:	2107      	movs	r1, #7
 80010b4:	2014      	movs	r0, #20
 80010b6:	f005 f8b5 	bl	8006224 <display_gotoxy>
	display_println("Hold <USR> to enter Test");
 80010ba:	481b      	ldr	r0, [pc, #108]	; (8001128 <main_user+0x7c>)
 80010bc:	f005 f866 	bl	800618c <display_println>
#endif

	motors_init();		// initialize motor driver
 80010c0:	f005 fa16 	bl	80064f0 <motors_init>

	uart_init();		// switch printf to usb/serial
 80010c4:	f005 fbc4 	bl	8006850 <uart_init>
	HAL_Delay(100);
 80010c8:	2064      	movs	r0, #100	; 0x64
 80010ca:	f001 f93f 	bl	800234c <HAL_Delay>
	printf("\r\n****   HERE we GO  ****\r\n\r\n");
 80010ce:	4817      	ldr	r0, [pc, #92]	; (800112c <main_user+0x80>)
 80010d0:	f006 fb8c 	bl	80077ec <puts>

	// initialize bluetooth
	status = bt_init();
 80010d4:	f004 fd4e 	bl	8005b74 <bt_init>
	if (status)
 80010d8:	b9a0      	cbnz	r0, 8001104 <main_user+0x58>
		printf("***ERROR*** bt_init() returned %i\r\n",status);
		Error_Handler();	// Do SOS blinking
	}

	// initialize distance measurement
	status=distance_init();
 80010da:	f005 f8c5 	bl	8006268 <distance_init>
	if (status)
 80010de:	b9d8      	cbnz	r0, 8001118 <main_user+0x6c>
		printf("***ERROR*** distance_init() returned %i\r\n",status);
		Error_Handler();	// Do SOS blinking
	}

	// BNO055 IMU initialization
    bno055_setup();
 80010e0:	f004 fe0e 	bl	8005d00 <bno055_setup>
    bno055_setOperationModeNDOF();
 80010e4:	f004 fe02 	bl	8005cec <bno055_setOperationModeNDOF>
    HAL_Delay(100);
 80010e8:	2064      	movs	r0, #100	; 0x64
 80010ea:	f001 f92f 	bl	800234c <HAL_Delay>


#ifdef WITH_TESTING
	// Check if Button <USR> is pressed -> Enter test menu
	// --> see Src/testing.c for details how to control most of the peripherals
    if (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port,BTN_USR_Pin)==0)
 80010ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <main_user+0x84>)
 80010f4:	f001 fb86 	bl	8002804 <HAL_GPIO_ReadPin>
 80010f8:	b158      	cbz	r0, 8001112 <main_user+0x66>
#endif

    //**********************************************************************
    // GO TO THE "SIMPLE" USER CODE PART
    //**********************************************************************
    driving();
 80010fa:	f7ff fdf9 	bl	8000cf0 <driving>


	while(1)
	{
		Error_Handler();	// Never should get here..
 80010fe:	f7ff ffd3 	bl	80010a8 <Error_Handler>
	while(1)
 8001102:	e7fc      	b.n	80010fe <main_user+0x52>
		printf("***ERROR*** bt_init() returned %i\r\n",status);
 8001104:	4601      	mov	r1, r0
 8001106:	480b      	ldr	r0, [pc, #44]	; (8001134 <main_user+0x88>)
 8001108:	f006 faea 	bl	80076e0 <iprintf>
		Error_Handler();	// Do SOS blinking
 800110c:	f7ff ffcc 	bl	80010a8 <Error_Handler>
 8001110:	e7e3      	b.n	80010da <main_user+0x2e>
    	test_menu(0);
 8001112:	f000 fc41 	bl	8001998 <test_menu>
 8001116:	e7f0      	b.n	80010fa <main_user+0x4e>
		printf("***ERROR*** distance_init() returned %i\r\n",status);
 8001118:	4601      	mov	r1, r0
 800111a:	4807      	ldr	r0, [pc, #28]	; (8001138 <main_user+0x8c>)
 800111c:	f006 fae0 	bl	80076e0 <iprintf>
		Error_Handler();	// Do SOS blinking
 8001120:	f7ff ffc2 	bl	80010a8 <Error_Handler>
 8001124:	e7dc      	b.n	80010e0 <main_user+0x34>
 8001126:	bf00      	nop
 8001128:	08009b5c 	.word	0x08009b5c
 800112c:	08009b78 	.word	0x08009b78
 8001130:	40011000 	.word	0x40011000
 8001134:	08009b98 	.word	0x08009b98
 8001138:	08009bbc 	.word	0x08009bbc

0800113c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_MspInit+0x3c>)
{
 800113e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001140:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001144:	f042 0201 	orr.w	r2, r2, #1
 8001148:	619a      	str	r2, [r3, #24]
 800114a:	699a      	ldr	r2, [r3, #24]
 800114c:	f002 0201 	and.w	r2, r2, #1
 8001150:	9200      	str	r2, [sp, #0]
 8001152:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001154:	69da      	ldr	r2, [r3, #28]
 8001156:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800115a:	61da      	str	r2, [r3, #28]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001166:	684b      	ldr	r3, [r1, #4]
 8001168:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800116c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001170:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001172:	b002      	add	sp, #8
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000

08001180 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	2300      	movs	r3, #0
{
 8001182:	b530      	push	{r4, r5, lr}
  if(hi2c->Instance==I2C1)
 8001184:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <HAL_I2C_MspInit+0x68>)
 8001186:	6801      	ldr	r1, [r0, #0]
{
 8001188:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C1)
 800118a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001190:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8001194:	d001      	beq.n	800119a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001196:	b007      	add	sp, #28
 8001198:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800119a:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119e:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a0:	2512      	movs	r5, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4c12      	ldr	r4, [pc, #72]	; (80011ec <HAL_I2C_MspInit+0x6c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	69a3      	ldr	r3, [r4, #24]
 80011a8:	f043 0308 	orr.w	r3, r3, #8
 80011ac:	61a3      	str	r3, [r4, #24]
 80011ae:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011b0:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011bc:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011be:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f001 fa12 	bl	80025e8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_I2C_MspInit+0x74>)
 80011c6:	6853      	ldr	r3, [r2, #4]
 80011c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d2:	69e3      	ldr	r3, [r4, #28]
 80011d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011d8:	61e3      	str	r3, [r4, #28]
 80011da:	69e3      	ldr	r3, [r4, #28]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	9b01      	ldr	r3, [sp, #4]
}
 80011e4:	b007      	add	sp, #28
 80011e6:	bd30      	pop	{r4, r5, pc}
 80011e8:	40005400 	.word	0x40005400
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40010c00 	.word	0x40010c00
 80011f4:	40010000 	.word	0x40010000

080011f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 80011fc:	4b24      	ldr	r3, [pc, #144]	; (8001290 <HAL_SPI_MspInit+0x98>)
 80011fe:	6802      	ldr	r2, [r0, #0]
{
 8001200:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 8001202:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001208:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hspi->Instance==SPI1)
 800120c:	d001      	beq.n	8001212 <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800120e:	b006      	add	sp, #24
 8001210:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001212:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	4605      	mov	r5, r0
 800121a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800121e:	619a      	str	r2, [r3, #24]
 8001220:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	481c      	ldr	r0, [pc, #112]	; (8001294 <HAL_SPI_MspInit+0x9c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001224:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001228:	9200      	str	r2, [sp, #0]
 800122a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	699a      	ldr	r2, [r3, #24]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800122e:	4e1a      	ldr	r6, [pc, #104]	; (8001298 <HAL_SPI_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	f042 0204 	orr.w	r2, r2, #4
 8001234:	619a      	str	r2, [r3, #24]
 8001236:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = DISP_CS_Pin|GPIO_PIN_5|GPIO_PIN_7;
 8001238:	22b0      	movs	r2, #176	; 0xb0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001242:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001246:	9105      	str	r1, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f001 f9cb 	bl	80025e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001252:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001254:	480f      	ldr	r0, [pc, #60]	; (8001294 <HAL_SPI_MspInit+0x9c>)
 8001256:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001258:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	e9cd 4403 	strd	r4, r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f001 f9c3 	bl	80025e8 <HAL_GPIO_Init>
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001262:	2210      	movs	r2, #16
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001264:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <HAL_SPI_MspInit+0xa4>)
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001268:	4630      	mov	r0, r6
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800126a:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800126e:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001272:	6031      	str	r1, [r6, #0]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001274:	60b4      	str	r4, [r6, #8]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001276:	6072      	str	r2, [r6, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001278:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800127a:	f001 f8ef 	bl	800245c <HAL_DMA_Init>
 800127e:	b918      	cbnz	r0, 8001288 <HAL_SPI_MspInit+0x90>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001280:	64ae      	str	r6, [r5, #72]	; 0x48
 8001282:	6275      	str	r5, [r6, #36]	; 0x24
}
 8001284:	b006      	add	sp, #24
 8001286:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001288:	f7ff ff0e 	bl	80010a8 <Error_Handler>
 800128c:	e7f8      	b.n	8001280 <HAL_SPI_MspInit+0x88>
 800128e:	bf00      	nop
 8001290:	40013000 	.word	0x40013000
 8001294:	40010800 	.word	0x40010800
 8001298:	200004a0 	.word	0x200004a0
 800129c:	40020030 	.word	0x40020030

080012a0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80012a0:	6803      	ldr	r3, [r0, #0]
 80012a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a6:	d000      	beq.n	80012aa <HAL_TIM_Base_MspInit+0xa>
 80012a8:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80012ae:	69da      	ldr	r2, [r3, #28]
{
 80012b0:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	61da      	str	r2, [r3, #28]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012c2:	b002      	add	sp, #8
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012c8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	2400      	movs	r4, #0
  if(htim_encoder->Instance==TIM3)
 80012cc:	4a29      	ldr	r2, [pc, #164]	; (8001374 <HAL_TIM_Encoder_MspInit+0xac>)
 80012ce:	6803      	ldr	r3, [r0, #0]
{
 80012d0:	b089      	sub	sp, #36	; 0x24
  if(htim_encoder->Instance==TIM3)
 80012d2:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80012d8:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(htim_encoder->Instance==TIM3)
 80012dc:	d004      	beq.n	80012e8 <HAL_TIM_Encoder_MspInit+0x20>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_encoder->Instance==TIM4)
 80012de:	4a26      	ldr	r2, [pc, #152]	; (8001378 <HAL_TIM_Encoder_MspInit+0xb0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d02b      	beq.n	800133c <HAL_TIM_Encoder_MspInit+0x74>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012e4:	b009      	add	sp, #36	; 0x24
 80012e6:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = MOT_L_ENCA_Pin|MOT_L_ENCB_Pin;
 80012e8:	25c0      	movs	r5, #192	; 0xc0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_TIM_Encoder_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ee:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	4823      	ldr	r0, [pc, #140]	; (8001380 <HAL_TIM_Encoder_MspInit+0xb8>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012f2:	f042 0202 	orr.w	r2, r2, #2
 80012f6:	61da      	str	r2, [r3, #28]
 80012f8:	69da      	ldr	r2, [r3, #28]
 80012fa:	f002 0202 	and.w	r2, r2, #2
 80012fe:	9200      	str	r2, [sp, #0]
 8001300:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	699a      	ldr	r2, [r3, #24]
 8001304:	f042 0210 	orr.w	r2, r2, #16
 8001308:	619a      	str	r2, [r3, #24]
 800130a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = MOT_L_ENCA_Pin|MOT_L_ENCB_Pin;
 800130c:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	f003 0310 	and.w	r3, r3, #16
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001312:	4d1c      	ldr	r5, [pc, #112]	; (8001384 <HAL_TIM_Encoder_MspInit+0xbc>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f001 f966 	bl	80025e8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800131c:	686b      	ldr	r3, [r5, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800131e:	4622      	mov	r2, r4
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001320:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001324:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001328:	4621      	mov	r1, r4
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800132a:	606b      	str	r3, [r5, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800132c:	201d      	movs	r0, #29
 800132e:	f001 f831 	bl	8002394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001332:	201d      	movs	r0, #29
 8001334:	f001 f86c 	bl	8002410 <HAL_NVIC_EnableIRQ>
}
 8001338:	b009      	add	sp, #36	; 0x24
 800133a:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = MOT_R_ENCA_Pin|MOT_R_ENCB_Pin;
 800133c:	24c0      	movs	r4, #192	; 0xc0
    __HAL_RCC_TIM4_CLK_ENABLE();
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_TIM_Encoder_MspInit+0xb4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	4811      	ldr	r0, [pc, #68]	; (8001388 <HAL_TIM_Encoder_MspInit+0xc0>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001342:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001344:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001346:	f042 0204 	orr.w	r2, r2, #4
 800134a:	61da      	str	r2, [r3, #28]
 800134c:	69da      	ldr	r2, [r3, #28]
 800134e:	f002 0204 	and.w	r2, r2, #4
 8001352:	9202      	str	r2, [sp, #8]
 8001354:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001356:	699a      	ldr	r2, [r3, #24]
 8001358:	f042 0208 	orr.w	r2, r2, #8
 800135c:	619a      	str	r2, [r3, #24]
 800135e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = MOT_R_ENCA_Pin|MOT_R_ENCB_Pin;
 8001360:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	9303      	str	r3, [sp, #12]
 8001368:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f001 f93d 	bl	80025e8 <HAL_GPIO_Init>
}
 800136e:	b009      	add	sp, #36	; 0x24
 8001370:	bd30      	pop	{r4, r5, pc}
 8001372:	bf00      	nop
 8001374:	40000400 	.word	0x40000400
 8001378:	40000800 	.word	0x40000800
 800137c:	40021000 	.word	0x40021000
 8001380:	40011000 	.word	0x40011000
 8001384:	40010000 	.word	0x40010000
 8001388:	40010c00 	.word	0x40010c00

0800138c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	2300      	movs	r3, #0
{
 800138e:	b530      	push	{r4, r5, lr}
  if(htim->Instance==TIM2)
 8001390:	6802      	ldr	r2, [r0, #0]
{
 8001392:	b087      	sub	sp, #28
  if(htim->Instance==TIM2)
 8001394:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800139c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM2)
 80013a0:	d001      	beq.n	80013a6 <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013a2:	b007      	add	sp, #28
 80013a4:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = PINHDR_PWM0_Pin|MOT_R_PWM_Pin;
 80013a8:	f44f 6581 	mov.w	r5, #1032	; 0x408
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013b0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80013b4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b8:	f042 0208 	orr.w	r2, r2, #8
 80013bc:	619a      	str	r2, [r3, #24]
 80013be:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	4812      	ldr	r0, [pc, #72]	; (800140c <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	f002 0208 	and.w	r2, r2, #8
 80013c6:	9200      	str	r2, [sp, #0]
 80013c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	f042 0204 	orr.w	r2, r2, #4
 80013d0:	619a      	str	r2, [r3, #24]
 80013d2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = PINHDR_PWM0_Pin|MOT_R_PWM_Pin;
 80013d4:	e9cd 5402 	strd	r5, r4, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f001 f901 	bl	80025e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOT_L_PWM_Pin;
 80013e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(MOT_L_PWM_GPIO_Port, &GPIO_InitStruct);
 80013ea:	4809      	ldr	r0, [pc, #36]	; (8001410 <HAL_TIM_MspPostInit+0x84>)
 80013ec:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MOT_L_PWM_Pin;
 80013ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(MOT_L_PWM_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f001 f8f8 	bl	80025e8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <HAL_TIM_MspPostInit+0x88>)
 80013fa:	6853      	ldr	r3, [r2, #4]
 80013fc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001400:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001404:	6053      	str	r3, [r2, #4]
}
 8001406:	b007      	add	sp, #28
 8001408:	bd30      	pop	{r4, r5, pc}
 800140a:	bf00      	nop
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40010800 	.word	0x40010800
 8001414:	40010000 	.word	0x40010000

08001418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001418:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 800141c:	4a35      	ldr	r2, [pc, #212]	; (80014f4 <HAL_UART_MspInit+0xdc>)
 800141e:	6803      	ldr	r3, [r0, #0]
{
 8001420:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8001422:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001428:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(huart->Instance==USART1)
 800142c:	d004      	beq.n	8001438 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800142e:	4a32      	ldr	r2, [pc, #200]	; (80014f8 <HAL_UART_MspInit+0xe0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d032      	beq.n	800149a <HAL_UART_MspInit+0x82>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001434:	b008      	add	sp, #32
 8001436:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001438:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = UART_TX_Pin;
 800143a:	f44f 7600 	mov.w	r6, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001442:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800144a:	619a      	str	r2, [r3, #24]
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001452:	9200      	str	r2, [sp, #0]
 8001454:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	699a      	ldr	r2, [r3, #24]
 8001458:	f042 0204 	orr.w	r2, r2, #4
 800145c:	619a      	str	r2, [r3, #24]
 800145e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001460:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001468:	4825      	ldr	r0, [pc, #148]	; (8001500 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8001470:	f001 f8ba 	bl	80025e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_RX_Pin;
 8001474:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8001478:	a904      	add	r1, sp, #16
 800147a:	4821      	ldr	r0, [pc, #132]	; (8001500 <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Pin = UART_RX_Pin;
 800147c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8001482:	f001 f8b1 	bl	80025e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001486:	4622      	mov	r2, r4
 8001488:	4621      	mov	r1, r4
 800148a:	2025      	movs	r0, #37	; 0x25
 800148c:	f000 ff82 	bl	8002394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001490:	2025      	movs	r0, #37	; 0x25
 8001492:	f000 ffbd 	bl	8002410 <HAL_NVIC_EnableIRQ>
}
 8001496:	b008      	add	sp, #32
 8001498:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800149a:	2604      	movs	r6, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149c:	2003      	movs	r0, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2502      	movs	r5, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a4:	69da      	ldr	r2, [r3, #28]
 80014a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014aa:	61da      	str	r2, [r3, #28]
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014b2:	9202      	str	r2, [sp, #8]
 80014b4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	699a      	ldr	r2, [r3, #24]
 80014b8:	4332      	orrs	r2, r6
 80014ba:	619a      	str	r2, [r3, #24]
 80014bc:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014be:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4033      	ands	r3, r6
 80014c2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	480e      	ldr	r0, [pc, #56]	; (8001500 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	e9cd 6504 	strd	r6, r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f001 f88c 	bl	80025e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014d0:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	a904      	add	r1, sp, #16
 80014d4:	480a      	ldr	r0, [pc, #40]	; (8001500 <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f001 f884 	bl	80025e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014e0:	4622      	mov	r2, r4
 80014e2:	4621      	mov	r1, r4
 80014e4:	2026      	movs	r0, #38	; 0x26
 80014e6:	f000 ff55 	bl	8002394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014ea:	2026      	movs	r0, #38	; 0x26
 80014ec:	f000 ff90 	bl	8002410 <HAL_NVIC_EnableIRQ>
}
 80014f0:	b008      	add	sp, #32
 80014f2:	bd70      	pop	{r4, r5, r6, pc}
 80014f4:	40013800 	.word	0x40013800
 80014f8:	40004400 	.word	0x40004400
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010800 	.word	0x40010800

08001504 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop

08001508 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <HardFault_Handler>
 800150a:	bf00      	nop

0800150c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <MemManage_Handler>
 800150e:	bf00      	nop

08001510 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <BusFault_Handler>
 8001512:	bf00      	nop

08001514 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <UsageFault_Handler>
 8001516:	bf00      	nop

08001518 <SVC_Handler>:
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <DebugMon_Handler>:
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop

08001520 <PendSV_Handler>:
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop

08001524 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001524:	4801      	ldr	r0, [pc, #4]	; (800152c <DMA1_Channel3_IRQHandler+0x8>)
 8001526:	f000 bfcb 	b.w	80024c0 <HAL_DMA_IRQHandler>
 800152a:	bf00      	nop
 800152c:	200004a0 	.word	0x200004a0

08001530 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001530:	4801      	ldr	r0, [pc, #4]	; (8001538 <TIM3_IRQHandler+0x8>)
 8001532:	f002 bee5 	b.w	8004300 <HAL_TIM_IRQHandler>
 8001536:	bf00      	nop
 8001538:	200005d0 	.word	0x200005d0

0800153c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800153c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	1e16      	subs	r6, r2, #0
 8001540:	dd07      	ble.n	8001552 <_read+0x16>
 8001542:	460c      	mov	r4, r1
 8001544:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001546:	f3af 8000 	nop.w
 800154a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	42a5      	cmp	r5, r4
 8001550:	d1f9      	bne.n	8001546 <_read+0xa>
	}

return len;
}
 8001552:	4630      	mov	r0, r6
 8001554:	bd70      	pop	{r4, r5, r6, pc}
 8001556:	bf00      	nop

08001558 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001558:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155a:	1e16      	subs	r6, r2, #0
 800155c:	dd07      	ble.n	800156e <_write+0x16>
 800155e:	460c      	mov	r4, r1
 8001560:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001562:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001566:	f005 f9d3 	bl	8006910 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	42a5      	cmp	r5, r4
 800156c:	d1f9      	bne.n	8001562 <_write+0xa>
	}
	return len;
}
 800156e:	4630      	mov	r0, r6
 8001570:	bd70      	pop	{r4, r5, r6, pc}
 8001572:	bf00      	nop

08001574 <_close>:

int _close(int file)
{
	return -1;
}
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop

0800157c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800157c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001580:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001582:	604b      	str	r3, [r1, #4]
}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop

08001588 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001588:	2001      	movs	r0, #1
 800158a:	4770      	bx	lr

0800158c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800158c:	2000      	movs	r0, #0
 800158e:	4770      	bx	lr

08001590 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001590:	490d      	ldr	r1, [pc, #52]	; (80015c8 <_sbrk+0x38>)
{
 8001592:	4603      	mov	r3, r0
 8001594:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001596:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <_sbrk+0x3c>)
 8001598:	4c0d      	ldr	r4, [pc, #52]	; (80015d0 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800159a:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800159c:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800159e:	b120      	cbz	r0, 80015aa <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a0:	4403      	add	r3, r0
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d807      	bhi.n	80015b6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80015a6:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80015a8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80015aa:	4c0a      	ldr	r4, [pc, #40]	; (80015d4 <_sbrk+0x44>)
 80015ac:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4403      	add	r3, r0
 80015b0:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 80015b2:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80015b4:	d9f7      	bls.n	80015a6 <_sbrk+0x16>
    errno = ENOMEM;
 80015b6:	f006 f847 	bl	8007648 <__errno>
 80015ba:	220c      	movs	r2, #12
 80015bc:	4603      	mov	r3, r0
    return (void *)-1;
 80015be:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80015c2:	601a      	str	r2, [r3, #0]
}
 80015c4:	bd10      	pop	{r4, pc}
 80015c6:	bf00      	nop
 80015c8:	200006d0 	.word	0x200006d0
 80015cc:	20005000 	.word	0x20005000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	20000dd0 	.word	0x20000dd0

080015d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d8:	b410      	push	{r4}
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015da:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  RCC->CIR = 0x009F0000U;
 80015de:	f44f 041f 	mov.w	r4, #10420224	; 0x9f0000
  RCC->CR |= 0x00000001U;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 80015e4:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 80015e6:	6819      	ldr	r1, [r3, #0]
 80015e8:	f041 0101 	orr.w	r1, r1, #1
 80015ec:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	400a      	ands	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 80015f4:	681a      	ldr	r2, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015f6:	490b      	ldr	r1, [pc, #44]	; (8001624 <SystemInit+0x4c>)
  RCC->CR &= 0xFEF6FFFFU;
 80015f8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80015fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001600:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001608:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001610:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8001612:	609c      	str	r4, [r3, #8]
#endif 
}
 8001614:	bc10      	pop	{r4}
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001616:	6088      	str	r0, [r1, #8]
}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	f8ff0000 	.word	0xf8ff0000
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <buttonpressed>:
 * @return
 *      0 -> Kein Taster
 *      BTN_UP, BTN_DN, BTN_OK, BTN_USR (Oder-Verkn�pfung)
 */
static uint8_t buttonpressed(uint8_t wait)
{
 8001628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8001728 <buttonpressed+0x100>
 8001632:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 800172c <buttonpressed+0x104>
 8001636:	4f3e      	ldr	r7, [pc, #248]	; (8001730 <buttonpressed+0x108>)
 8001638:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8001734 <buttonpressed+0x10c>
	uint8_t ret_code;

	do
	{
		// Buttons einlesen
		mem_up  = (mem_up<<1)  | (HAL_GPIO_ReadPin(BTN_UP_GPIO_Port,BTN_UP_Pin)==0);
 800163c:	4e3e      	ldr	r6, [pc, #248]	; (8001738 <buttonpressed+0x110>)
 800163e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001642:	4630      	mov	r0, r6
 8001644:	f899 4000 	ldrb.w	r4, [r9]
 8001648:	f001 f8dc 	bl	8002804 <HAL_GPIO_ReadPin>
 800164c:	4603      	mov	r3, r0
 800164e:	0064      	lsls	r4, r4, #1
 8001650:	b264      	sxtb	r4, r4
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf08      	it	eq
 8001656:	f044 0401 	orreq.w	r4, r4, #1
		mem_dn  = (mem_dn<<1)  | (HAL_GPIO_ReadPin(BTN_DN_GPIO_Port,BTN_DN_Pin)==0);
 800165a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165e:	4630      	mov	r0, r6
 8001660:	f898 5000 	ldrb.w	r5, [r8]
		mem_up  = (mem_up<<1)  | (HAL_GPIO_ReadPin(BTN_UP_GPIO_Port,BTN_UP_Pin)==0);
 8001664:	f889 4000 	strb.w	r4, [r9]
		mem_dn  = (mem_dn<<1)  | (HAL_GPIO_ReadPin(BTN_DN_GPIO_Port,BTN_DN_Pin)==0);
 8001668:	f001 f8cc 	bl	8002804 <HAL_GPIO_ReadPin>
 800166c:	4603      	mov	r3, r0
 800166e:	006d      	lsls	r5, r5, #1
 8001670:	b26d      	sxtb	r5, r5
 8001672:	2b00      	cmp	r3, #0
 8001674:	bf08      	it	eq
 8001676:	f045 0501 	orreq.w	r5, r5, #1
		mem_ok  = (mem_ok<<1)  | (HAL_GPIO_ReadPin(BTN_OK_GPIO_Port,BTN_OK_Pin)==0);
 800167a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800167e:	4630      	mov	r0, r6
 8001680:	783c      	ldrb	r4, [r7, #0]
		mem_dn  = (mem_dn<<1)  | (HAL_GPIO_ReadPin(BTN_DN_GPIO_Port,BTN_DN_Pin)==0);
 8001682:	f888 5000 	strb.w	r5, [r8]
		mem_ok  = (mem_ok<<1)  | (HAL_GPIO_ReadPin(BTN_OK_GPIO_Port,BTN_OK_Pin)==0);
 8001686:	f001 f8bd 	bl	8002804 <HAL_GPIO_ReadPin>
 800168a:	4603      	mov	r3, r0
 800168c:	0064      	lsls	r4, r4, #1
 800168e:	b264      	sxtb	r4, r4
 8001690:	2b00      	cmp	r3, #0
 8001692:	bf08      	it	eq
 8001694:	f044 0401 	orreq.w	r4, r4, #1
		mem_usr = (mem_usr<<1) | (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port,BTN_USR_Pin)==0);
 8001698:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800169c:	4630      	mov	r0, r6
		mem_ok  = (mem_ok<<1)  | (HAL_GPIO_ReadPin(BTN_OK_GPIO_Port,BTN_OK_Pin)==0);
 800169e:	703c      	strb	r4, [r7, #0]
		mem_usr = (mem_usr<<1) | (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port,BTN_USR_Pin)==0);
 80016a0:	f89a 5000 	ldrb.w	r5, [sl]
 80016a4:	f001 f8ae 	bl	8002804 <HAL_GPIO_ReadPin>

		// Nur 4 Bits ber�cksichtigen
		mem_up  &= 0x0F;
 80016a8:	f899 3000 	ldrb.w	r3, [r9]
		mem_usr = (mem_usr<<1) | (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port,BTN_USR_Pin)==0);
 80016ac:	006d      	lsls	r5, r5, #1
		mem_up  &= 0x0F;
 80016ae:	f003 030f 	and.w	r3, r3, #15
		mem_usr = (mem_usr<<1) | (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port,BTN_USR_Pin)==0);
 80016b2:	b26d      	sxtb	r5, r5
 80016b4:	2800      	cmp	r0, #0
 80016b6:	bf08      	it	eq
 80016b8:	f045 0501 	orreq.w	r5, r5, #1
		mem_usr &= 0x0F;

		// Auswerten
		ret_code=0;

		if (mem_up == 0x07) ret_code |= BTN_UP;
 80016bc:	2b07      	cmp	r3, #7
 80016be:	bf08      	it	eq
 80016c0:	2404      	moveq	r4, #4
		mem_dn  &= 0x0F;
 80016c2:	f898 2000 	ldrb.w	r2, [r8]
		mem_ok  &= 0x0F;
 80016c6:	7839      	ldrb	r1, [r7, #0]
		mem_dn  &= 0x0F;
 80016c8:	f002 020f 	and.w	r2, r2, #15
		mem_ok  &= 0x0F;
 80016cc:	f001 010f 	and.w	r1, r1, #15
		if (mem_up == 0x07) ret_code |= BTN_UP;
 80016d0:	bf18      	it	ne
 80016d2:	2400      	movne	r4, #0
		if (mem_dn == 0x07) ret_code |= BTN_DN;
 80016d4:	2a07      	cmp	r2, #7
 80016d6:	bf08      	it	eq
 80016d8:	f044 0402 	orreq.w	r4, r4, #2
		mem_up  &= 0x0F;
 80016dc:	f889 3000 	strb.w	r3, [r9]
		if (mem_ok == 0x07) ret_code |= BTN_OK;
 80016e0:	2907      	cmp	r1, #7
		mem_usr &= 0x0F;
 80016e2:	f005 030f 	and.w	r3, r5, #15
		if (mem_ok == 0x07) ret_code |= BTN_OK;
 80016e6:	bf08      	it	eq
 80016e8:	f044 0401 	orreq.w	r4, r4, #1
		if (mem_usr== 0x07) ret_code |= BTN_USR;
 80016ec:	2b07      	cmp	r3, #7
		mem_dn  &= 0x0F;
 80016ee:	f888 2000 	strb.w	r2, [r8]
		mem_ok  &= 0x0F;
 80016f2:	7039      	strb	r1, [r7, #0]
		mem_usr &= 0x0F;
 80016f4:	f88a 3000 	strb.w	r3, [sl]
		if (mem_usr== 0x07) ret_code |= BTN_USR;
 80016f8:	d00b      	beq.n	8001712 <buttonpressed+0xea>

		// Delay, wenn gewartet wird
		if (wait)  { HAL_Delay(10); }
 80016fa:	f1bb 0f00 	cmp.w	fp, #0
 80016fe:	d102      	bne.n	8001706 <buttonpressed+0xde>
	}
	while ((wait!=0) && (ret_code==0));

	return (ret_code);
}
 8001700:	4620      	mov	r0, r4
 8001702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (wait)  { HAL_Delay(10); }
 8001706:	200a      	movs	r0, #10
 8001708:	f000 fe20 	bl	800234c <HAL_Delay>
	while ((wait!=0) && (ret_code==0));
 800170c:	2c00      	cmp	r4, #0
 800170e:	d096      	beq.n	800163e <buttonpressed+0x16>
 8001710:	e7f6      	b.n	8001700 <buttonpressed+0xd8>
		if (mem_usr== 0x07) ret_code |= BTN_USR;
 8001712:	f044 0408 	orr.w	r4, r4, #8
		if (wait)  { HAL_Delay(10); }
 8001716:	f1bb 0f00 	cmp.w	fp, #0
 800171a:	d0f1      	beq.n	8001700 <buttonpressed+0xd8>
 800171c:	200a      	movs	r0, #10
 800171e:	f000 fe15 	bl	800234c <HAL_Delay>
}
 8001722:	4620      	mov	r0, r4
 8001724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001728:	200006d6 	.word	0x200006d6
 800172c:	200006d4 	.word	0x200006d4
 8001730:	200006d5 	.word	0x200006d5
 8001734:	200006d7 	.word	0x200006d7
 8001738:	40011000 	.word	0x40011000
 800173c:	00000000 	.word	0x00000000

08001740 <testing_draw_dist>:
 */
static void testing_draw_dist(int16_t x, int16_t y, int16_t intensity, int16_t rot)
{
	int16_t x1=0,x2=0,y1=0,y2=0;
	int16_t i;
	if (intensity >320) intensity=320;
 8001740:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 8001744:	bfa8      	it	ge
 8001746:	f44f 72a0 	movge.w	r2, #320	; 0x140
{
 800174a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

//	for (i=0;i<(intensity/20);i+=2)
	i=intensity/10;
 800174e:	4c8e      	ldr	r4, [pc, #568]	; (8001988 <testing_draw_dist+0x248>)
{
 8001750:	460e      	mov	r6, r1
	i=intensity/10;
 8001752:	fb84 1402 	smull	r1, r4, r4, r2
 8001756:	17d2      	asrs	r2, r2, #31
 8001758:	ebc2 07a4 	rsb	r7, r2, r4, asr #2
	{
		// Rotate
		switch(rot)
 800175c:	2b00      	cmp	r3, #0
{
 800175e:	4605      	mov	r5, r0
	i=intensity/10;
 8001760:	b23f      	sxth	r7, r7
		switch(rot)
 8001762:	d07a      	beq.n	800185a <testing_draw_dist+0x11a>
 8001764:	dd3c      	ble.n	80017e0 <testing_draw_dist+0xa0>
 8001766:	2b2d      	cmp	r3, #45	; 0x2d
 8001768:	f000 808e 	beq.w	8001888 <testing_draw_dist+0x148>
 800176c:	2b5a      	cmp	r3, #90	; 0x5a
 800176e:	f040 80e4 	bne.w	800193a <testing_draw_dist+0x1fa>
					x1=-4-i/4;
					x2=4+i/4;
					y2=y1;
					break;
		case 90:	x1=i;
					y1=-4-i/4;
 8001772:	ebc2 1224 	rsb	r2, r2, r4, asr #4
 8001776:	fa1f fc82 	uxth.w	ip, r2
					y2=4+i/4;
 800177a:	f10c 0304 	add.w	r3, ip, #4
					y1=-4-i/4;
 800177e:	f5cc 4c7f 	rsb	ip, ip, #65280	; 0xff00
 8001782:	f10c 0cfc 	add.w	ip, ip, #252	; 0xfc
		default:	printf("ERROR: testing_draw_dist\r\n");
					break;
		}
		if (y1>63) y1=63;
		if (y2>63) y2=63;
		display_line_f(x+x1,y+y1,x+x2,y+y2);
 8001786:	fa0f fc8c 	sxth.w	ip, ip
 800178a:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800178e:	bfa8      	it	ge
 8001790:	f04f 0c3f 	movge.w	ip, #63	; 0x3f
 8001794:	b2bc      	uxth	r4, r7
					break;
 8001796:	46a1      	mov	r9, r4
					y2=4+i/4;
 8001798:	b29b      	uxth	r3, r3
		display_line_f(x+x1,y+y1,x+x2,y+y2);
 800179a:	fa1f f88c 	uxth.w	r8, ip
 800179e:	b2aa      	uxth	r2, r5
 80017a0:	b2b7      	uxth	r7, r6
 80017a2:	eb07 0c08 	add.w	ip, r7, r8
 80017a6:	4414      	add	r4, r2
 80017a8:	441f      	add	r7, r3
 80017aa:	444a      	add	r2, r9
 80017ac:	fa0f f88c 	sxth.w	r8, ip
 80017b0:	fa0f f982 	sxth.w	r9, r2
 80017b4:	b224      	sxth	r4, r4
 80017b6:	b23f      	sxth	r7, r7
 80017b8:	463b      	mov	r3, r7
 80017ba:	464a      	mov	r2, r9
 80017bc:	4641      	mov	r1, r8
 80017be:	4620      	mov	r0, r4
 80017c0:	f004 fd38 	bl	8006234 <display_line_f>
		display_line_f(x+x1,y+y1,x,y);
 80017c4:	4633      	mov	r3, r6
 80017c6:	462a      	mov	r2, r5
 80017c8:	4641      	mov	r1, r8
 80017ca:	4620      	mov	r0, r4
 80017cc:	f004 fd32 	bl	8006234 <display_line_f>
		display_line_f(x+x2,y+y2,x,y);
 80017d0:	4633      	mov	r3, r6
 80017d2:	462a      	mov	r2, r5
 80017d4:	4639      	mov	r1, r7
 80017d6:	4648      	mov	r0, r9
	}
}
 80017d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		display_line_f(x+x2,y+y2,x,y);
 80017dc:	f004 bd2a 	b.w	8006234 <display_line_f>
		switch(rot)
 80017e0:	f113 0f5a 	cmn.w	r3, #90	; 0x5a
 80017e4:	f000 80b1 	beq.w	800194a <testing_draw_dist+0x20a>
 80017e8:	332d      	adds	r3, #45	; 0x2d
 80017ea:	f040 80a6 	bne.w	800193a <testing_draw_dist+0x1fa>
		case  -45:  x1=(-4-i/4-i)*0.71+0.5; 	//x+y
 80017ee:	f06f 0003 	mvn.w	r0, #3
 80017f2:	ebc2 1224 	rsb	r2, r2, r4, asr #4
 80017f6:	b214      	sxth	r4, r2
 80017f8:	1b00      	subs	r0, r0, r4
 80017fa:	1bc0      	subs	r0, r0, r7
 80017fc:	f7fe feb6 	bl	800056c <__aeabi_i2d>
 8001800:	a35f      	add	r3, pc, #380	; (adr r3, 8001980 <testing_draw_dist+0x240>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe ff1b 	bl	8000640 <__aeabi_dmul>
 800180a:	2200      	movs	r2, #0
 800180c:	4b5f      	ldr	r3, [pc, #380]	; (800198c <testing_draw_dist+0x24c>)
 800180e:	f7fe fd61 	bl	80002d4 <__adddf3>
 8001812:	f7ff f9af 	bl	8000b74 <__aeabi_d2iz>
 8001816:	4603      	mov	r3, r0
					y1=(4+i/4-i)*0.71+0.5;	//-x+y
 8001818:	1d20      	adds	r0, r4, #4
 800181a:	b200      	sxth	r0, r0
 800181c:	1bc0      	subs	r0, r0, r7
		case  -45:  x1=(-4-i/4-i)*0.71+0.5; 	//x+y
 800181e:	b21f      	sxth	r7, r3
					y1=(4+i/4-i)*0.71+0.5;	//-x+y
 8001820:	f7fe fea4 	bl	800056c <__aeabi_i2d>
 8001824:	a356      	add	r3, pc, #344	; (adr r3, 8001980 <testing_draw_dist+0x240>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe ff09 	bl	8000640 <__aeabi_dmul>
 800182e:	2200      	movs	r2, #0
 8001830:	4b56      	ldr	r3, [pc, #344]	; (800198c <testing_draw_dist+0x24c>)
 8001832:	f7fe fd4f 	bl	80002d4 <__adddf3>
 8001836:	f7ff f99d 	bl	8000b74 <__aeabi_d2iz>
		display_line_f(x+x1,y+y1,x+x2,y+y2);
 800183a:	2f3f      	cmp	r7, #63	; 0x3f
					y1=(4+i/4-i)*0.71+0.5;	//-x+y
 800183c:	b202      	sxth	r2, r0
		display_line_f(x+x1,y+y1,x+x2,y+y2);
 800183e:	b2bc      	uxth	r4, r7
 8001840:	bfa8      	it	ge
 8001842:	273f      	movge	r7, #63	; 0x3f
 8001844:	2a3f      	cmp	r2, #63	; 0x3f
 8001846:	4694      	mov	ip, r2
 8001848:	bfa8      	it	ge
 800184a:	f04f 0c3f 	movge.w	ip, #63	; 0x3f
 800184e:	b2bb      	uxth	r3, r7
 8001850:	fa1f f982 	uxth.w	r9, r2
 8001854:	fa1f f88c 	uxth.w	r8, ip
					break;
 8001858:	e7a1      	b.n	800179e <testing_draw_dist+0x5e>
		case 0: 	y1=-i;
 800185a:	f1c7 0c00 	rsb	ip, r7, #0
		display_line_f(x+x1,y+y1,x+x2,y+y2);
 800185e:	fa0f fc8c 	sxth.w	ip, ip
 8001862:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 8001866:	bfa8      	it	ge
 8001868:	f04f 0c3f 	movge.w	ip, #63	; 0x3f
					x1=-4-i/4;
 800186c:	ebc2 1224 	rsb	r2, r2, r4, asr #4
 8001870:	b292      	uxth	r2, r2
 8001872:	f5c2 447f 	rsb	r4, r2, #65280	; 0xff00
 8001876:	34fc      	adds	r4, #252	; 0xfc
					x2=4+i/4;
 8001878:	3204      	adds	r2, #4
		display_line_f(x+x1,y+y1,x+x2,y+y2);
 800187a:	fa1f f88c 	uxth.w	r8, ip
					break;
 800187e:	4643      	mov	r3, r8
					x1=-4-i/4;
 8001880:	b2a4      	uxth	r4, r4
					x2=4+i/4;
 8001882:	fa1f f982 	uxth.w	r9, r2
					break;
 8001886:	e78a      	b.n	800179e <testing_draw_dist+0x5e>
		case   45:  x1=(-4-i/4+i)*0.71+0.5;
 8001888:	f06f 0303 	mvn.w	r3, #3
 800188c:	ebc2 1224 	rsb	r2, r2, r4, asr #4
 8001890:	b214      	sxth	r4, r2
					x2=(4+i/4+i)*0.71+0.5;
 8001892:	f104 0a04 	add.w	sl, r4, #4
		case   45:  x1=(-4-i/4+i)*0.71+0.5;
 8001896:	1b1c      	subs	r4, r3, r4
 8001898:	19e0      	adds	r0, r4, r7
 800189a:	f7fe fe67 	bl	800056c <__aeabi_i2d>
 800189e:	a338      	add	r3, pc, #224	; (adr r3, 8001980 <testing_draw_dist+0x240>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	f7fe fecc 	bl	8000640 <__aeabi_dmul>
 80018a8:	2200      	movs	r2, #0
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <testing_draw_dist+0x24c>)
 80018ac:	f7fe fd12 	bl	80002d4 <__adddf3>
 80018b0:	f7ff f960 	bl	8000b74 <__aeabi_d2iz>
 80018b4:	4603      	mov	r3, r0
					y1=(-4-i/4-i)*0.71+0.5;
 80018b6:	1be0      	subs	r0, r4, r7
		display_line_f(x+x1,y+y1,x+x2,y+y2);
 80018b8:	b29c      	uxth	r4, r3
					y1=(-4-i/4-i)*0.71+0.5;
 80018ba:	f7fe fe57 	bl	800056c <__aeabi_i2d>
 80018be:	a330      	add	r3, pc, #192	; (adr r3, 8001980 <testing_draw_dist+0x240>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe febc 	bl	8000640 <__aeabi_dmul>
 80018c8:	2200      	movs	r2, #0
 80018ca:	4b30      	ldr	r3, [pc, #192]	; (800198c <testing_draw_dist+0x24c>)
 80018cc:	f7fe fd02 	bl	80002d4 <__adddf3>
 80018d0:	f7ff f950 	bl	8000b74 <__aeabi_d2iz>
 80018d4:	4684      	mov	ip, r0
		display_line_f(x+x1,y+y1,x+x2,y+y2);
 80018d6:	fa0f fc8c 	sxth.w	ip, ip
 80018da:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 80018de:	bfa8      	it	ge
 80018e0:	f04f 0c3f 	movge.w	ip, #63	; 0x3f
					x2=(4+i/4+i)*0.71+0.5;
 80018e4:	fa0f fa8a 	sxth.w	sl, sl
 80018e8:	eb07 000a 	add.w	r0, r7, sl
		display_line_f(x+x1,y+y1,x+x2,y+y2);
 80018ec:	fa1f f88c 	uxth.w	r8, ip
					x2=(4+i/4+i)*0.71+0.5;
 80018f0:	f7fe fe3c 	bl	800056c <__aeabi_i2d>
 80018f4:	a322      	add	r3, pc, #136	; (adr r3, 8001980 <testing_draw_dist+0x240>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7fe fea1 	bl	8000640 <__aeabi_dmul>
 80018fe:	2200      	movs	r2, #0
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <testing_draw_dist+0x24c>)
 8001902:	f7fe fce7 	bl	80002d4 <__adddf3>
 8001906:	f7ff f935 	bl	8000b74 <__aeabi_d2iz>
 800190a:	4681      	mov	r9, r0
					y2=(4+i/4-i)*0.71+0.5;
 800190c:	ebaa 0007 	sub.w	r0, sl, r7
 8001910:	f7fe fe2c 	bl	800056c <__aeabi_i2d>
 8001914:	a31a      	add	r3, pc, #104	; (adr r3, 8001980 <testing_draw_dist+0x240>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	f7fe fe91 	bl	8000640 <__aeabi_dmul>
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <testing_draw_dist+0x24c>)
 8001920:	2200      	movs	r2, #0
 8001922:	f7fe fcd7 	bl	80002d4 <__adddf3>
 8001926:	f7ff f925 	bl	8000b74 <__aeabi_d2iz>
		display_line_f(x+x1,y+y1,x+x2,y+y2);
 800192a:	b207      	sxth	r7, r0
 800192c:	2f3f      	cmp	r7, #63	; 0x3f
 800192e:	bfa8      	it	ge
 8001930:	273f      	movge	r7, #63	; 0x3f
 8001932:	fa1f f989 	uxth.w	r9, r9
 8001936:	b2bb      	uxth	r3, r7
					break;
 8001938:	e731      	b.n	800179e <testing_draw_dist+0x5e>
		default:	printf("ERROR: testing_draw_dist\r\n");
 800193a:	4815      	ldr	r0, [pc, #84]	; (8001990 <testing_draw_dist+0x250>)
 800193c:	f005 ff56 	bl	80077ec <puts>
					break;
 8001940:	2300      	movs	r3, #0
 8001942:	4699      	mov	r9, r3
 8001944:	4698      	mov	r8, r3
 8001946:	461c      	mov	r4, r3
 8001948:	e729      	b.n	800179e <testing_draw_dist+0x5e>
					y1=-4-i/4;
 800194a:	ebc2 1224 	rsb	r2, r2, r4, asr #4
 800194e:	fa1f fc82 	uxth.w	ip, r2
		case -90:	x1=-i;
 8001952:	427c      	negs	r4, r7
					y2=4+i/4;
 8001954:	f10c 0704 	add.w	r7, ip, #4
					y1=-4-i/4;
 8001958:	f5cc 4c7f 	rsb	ip, ip, #65280	; 0xff00
 800195c:	f10c 0cfc 	add.w	ip, ip, #252	; 0xfc
		display_line_f(x+x1,y+y1,x+x2,y+y2);
 8001960:	fa0f fc8c 	sxth.w	ip, ip
 8001964:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 8001968:	bfa8      	it	ge
 800196a:	f04f 0c3f 	movge.w	ip, #63	; 0x3f
		case -90:	x1=-i;
 800196e:	b2a4      	uxth	r4, r4
					break;
 8001970:	46a1      	mov	r9, r4
					y2=4+i/4;
 8001972:	b2bb      	uxth	r3, r7
		display_line_f(x+x1,y+y1,x+x2,y+y2);
 8001974:	fa1f f88c 	uxth.w	r8, ip
					break;
 8001978:	e711      	b.n	800179e <testing_draw_dist+0x5e>
 800197a:	bf00      	nop
 800197c:	f3af 8000 	nop.w
 8001980:	eb851eb8 	.word	0xeb851eb8
 8001984:	3fe6b851 	.word	0x3fe6b851
 8001988:	66666667 	.word	0x66666667
 800198c:	3fe00000 	.word	0x3fe00000
 8001990:	08009c00 	.word	0x08009c00
 8001994:	00000000 	.word	0x00000000

08001998 <test_menu>:
	int s=1;
 8001998:	2301      	movs	r3, #1
{
 800199a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800199e:	b09b      	sub	sp, #108	; 0x6c
 80019a0:	e9cd 0308 	strd	r0, r3, [sp, #32]
		if (!preselect)
 80019a4:	9b08      	ldr	r3, [sp, #32]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 81e3 	beq.w	8001d72 <test_menu+0x3da>
			display_clear();
 80019ac:	f004 fbd2 	bl	8006154 <display_clear>
			display_println("PRESELECT MODE");
 80019b0:	48c7      	ldr	r0, [pc, #796]	; (8001cd0 <test_menu+0x338>)
 80019b2:	f004 fbeb 	bl	800618c <display_println>
			HAL_Delay(1000);
 80019b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ba:	f000 fcc7 	bl	800234c <HAL_Delay>
		if ( (preselect > 0) && (preselect <6) )
 80019be:	9a08      	ldr	r2, [sp, #32]
 80019c0:	1e53      	subs	r3, r2, #1
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d802      	bhi.n	80019cc <test_menu+0x34>
			preselect = 0;
 80019c6:	2300      	movs	r3, #0
			s = preselect;
 80019c8:	9209      	str	r2, [sp, #36]	; 0x24
			preselect = 0;
 80019ca:	9308      	str	r3, [sp, #32]
		switch(s)
 80019cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019ce:	3b01      	subs	r3, #1
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d8e7      	bhi.n	80019a4 <test_menu+0xc>
 80019d4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80019d8:	02080252 	.word	0x02080252
 80019dc:	00130198 	.word	0x00130198
 80019e0:	02d7035b 	.word	0x02d7035b
		if (!preselect)
 80019e4:	9b08      	ldr	r3, [sp, #32]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 81c3 	beq.w	8001d72 <test_menu+0x3da>
			display_clear();
 80019ec:	f004 fbb2 	bl	8006154 <display_clear>
			display_println("PRESELECT MODE");
 80019f0:	48b7      	ldr	r0, [pc, #732]	; (8001cd0 <test_menu+0x338>)
 80019f2:	f004 fbcb 	bl	800618c <display_println>
			HAL_Delay(1000);
 80019f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019fa:	f000 fca7 	bl	800234c <HAL_Delay>
	bno055_vector_t v,v0;	// v=aktueller Wert v0=Startwert
	int x1,x2,y1,y2,x3,y3;  // F�r Linie
	int x0,y0;        // Ursprung
	double w0, wp, wm;  // Hauptwinkel, Winkel plus 30 / minus 30

	display_clear();
 80019fe:	f004 fba9 	bl	8006154 <display_clear>
	display_println("|  Test IMU-Sensor  |\n"
 8001a02:	48b4      	ldr	r0, [pc, #720]	; (8001cd4 <test_menu+0x33c>)
 8001a04:	f004 fbc2 	bl	800618c <display_println>
					"'-------------------'\n"
					"<USR> Back to Main");
	HAL_Delay(1000);
 8001a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a0c:	f000 fc9e 	bl	800234c <HAL_Delay>

	// Orientierung zu Beginn als Bezug ...
	v0= bno055_getVectorEuler();
 8001a10:	a810      	add	r0, sp, #64	; 0x40
 8001a12:	f004 fa13 	bl	8005e3c <bno055_getVectorEuler>

	while((buttonpressed(0)&BTN_USR) == 0)
 8001a16:	e13a      	b.n	8001c8e <test_menu+0x2f6>
	if ((*v)>max) (*v)=max;
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4630      	mov	r0, r6
 8001a1c:	4639      	mov	r1, r7
 8001a1e:	4bae      	ldr	r3, [pc, #696]	; (8001cd8 <test_menu+0x340>)
 8001a20:	f7ff f89e 	bl	8000b60 <__aeabi_dcmpgt>
 8001a24:	b108      	cbz	r0, 8001a2a <test_menu+0x92>
 8001a26:	2600      	movs	r6, #0
 8001a28:	4fab      	ldr	r7, [pc, #684]	; (8001cd8 <test_menu+0x340>)
	if ((*v)<min) (*v)=min;
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	4629      	mov	r1, r5
 8001a30:	4baa      	ldr	r3, [pc, #680]	; (8001cdc <test_menu+0x344>)
 8001a32:	f7ff f877 	bl	8000b24 <__aeabi_dcmplt>
 8001a36:	2800      	cmp	r0, #0
 8001a38:	f040 83c2 	bne.w	80021c0 <test_menu+0x828>
	if ((*v)>max) (*v)=max;
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4620      	mov	r0, r4
 8001a40:	4629      	mov	r1, r5
 8001a42:	4ba7      	ldr	r3, [pc, #668]	; (8001ce0 <test_menu+0x348>)
 8001a44:	f7ff f88c 	bl	8000b60 <__aeabi_dcmpgt>
 8001a48:	b108      	cbz	r0, 8001a4e <test_menu+0xb6>
 8001a4a:	2400      	movs	r4, #0
 8001a4c:	4da4      	ldr	r5, [pc, #656]	; (8001ce0 <test_menu+0x348>)
	{
	    v= bno055_getVectorEuler();
	    constrain(&v.y,-48.,48.);
	    constrain(&v.z,-22.,22.);
	    x0 = 64. - (v.y-v0.y);
 8001a4e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8001a52:	4630      	mov	r0, r6
 8001a54:	4639      	mov	r1, r7
 8001a56:	f7fe fc3b 	bl	80002d0 <__aeabi_dsub>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	2000      	movs	r0, #0
 8001a60:	49a0      	ldr	r1, [pc, #640]	; (8001ce4 <test_menu+0x34c>)
 8001a62:	f7fe fc35 	bl	80002d0 <__aeabi_dsub>
 8001a66:	f7ff f885 	bl	8000b74 <__aeabi_d2iz>
	    y0 = 32. - (v.z-v0.z)/2.;
 8001a6a:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	    x0 = 64. - (v.y-v0.y);
 8001a6e:	4607      	mov	r7, r0
	    y0 = 32. - (v.z-v0.z)/2.;
 8001a70:	4629      	mov	r1, r5
 8001a72:	4620      	mov	r0, r4
 8001a74:	f7fe fc2c 	bl	80002d0 <__aeabi_dsub>
 8001a78:	2200      	movs	r2, #0
 8001a7a:	4b9b      	ldr	r3, [pc, #620]	; (8001ce8 <test_menu+0x350>)
 8001a7c:	f7fe fde0 	bl	8000640 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	2000      	movs	r0, #0
 8001a86:	4999      	ldr	r1, [pc, #612]	; (8001cec <test_menu+0x354>)
 8001a88:	f7fe fc22 	bl	80002d0 <__aeabi_dsub>
 8001a8c:	f7ff f872 	bl	8000b74 <__aeabi_d2iz>
        w0 = v.x-v0.x;
 8001a90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
	    y0 = 32. - (v.z-v0.z)/2.;
 8001a94:	4606      	mov	r6, r0
        w0 = v.x-v0.x;
 8001a96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001a9a:	f7fe fc19 	bl	80002d0 <__aeabi_dsub>
        wp = (w0+30.)*DEG2RAD;
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	4b93      	ldr	r3, [pc, #588]	; (8001cf0 <test_menu+0x358>)
        w0 = v.x-v0.x;
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	460d      	mov	r5, r1
        wp = (w0+30.)*DEG2RAD;
 8001aa6:	f7fe fc15 	bl	80002d4 <__adddf3>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	f7fe fc11 	bl	80002d4 <__adddf3>
 8001ab2:	a383      	add	r3, pc, #524	; (adr r3, 8001cc0 <test_menu+0x328>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe fdc2 	bl	8000640 <__aeabi_dmul>
 8001abc:	2200      	movs	r2, #0
 8001abe:	4b8d      	ldr	r3, [pc, #564]	; (8001cf4 <test_menu+0x35c>)
 8001ac0:	f7fe fee8 	bl	8000894 <__aeabi_ddiv>
        wm = (w0-30.)*DEG2RAD;
 8001ac4:	2200      	movs	r2, #0
        wp = (w0+30.)*DEG2RAD;
 8001ac6:	e9cd 0104 	strd	r0, r1, [sp, #16]
        wm = (w0-30.)*DEG2RAD;
 8001aca:	4b89      	ldr	r3, [pc, #548]	; (8001cf0 <test_menu+0x358>)
 8001acc:	4620      	mov	r0, r4
 8001ace:	4629      	mov	r1, r5
 8001ad0:	f7fe fbfe 	bl	80002d0 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	f7fe fbfc 	bl	80002d4 <__adddf3>
 8001adc:	a378      	add	r3, pc, #480	; (adr r3, 8001cc0 <test_menu+0x328>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	f7fe fdad 	bl	8000640 <__aeabi_dmul>
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4b82      	ldr	r3, [pc, #520]	; (8001cf4 <test_menu+0x35c>)
 8001aea:	f7fe fed3 	bl	8000894 <__aeabi_ddiv>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
        w0 *= DEG2RAD;
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
        wm = (w0-30.)*DEG2RAD;
 8001af6:	e9cd 2306 	strd	r2, r3, [sp, #24]
        w0 *= DEG2RAD;
 8001afa:	a373      	add	r3, pc, #460	; (adr r3, 8001cc8 <test_menu+0x330>)
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f7fe fd9e 	bl	8000640 <__aeabi_dmul>
 8001b04:	4604      	mov	r4, r0
 8001b06:	460d      	mov	r5, r1
	    display_clear_f();
 8001b08:	f004 fb34 	bl	8006174 <display_clear_f>
	    x1 = x0-10*sin(w0);
 8001b0c:	4638      	mov	r0, r7
 8001b0e:	f7fe fd2d 	bl	800056c <__aeabi_i2d>
 8001b12:	e9cd 0100 	strd	r0, r1, [sp]
 8001b16:	4620      	mov	r0, r4
 8001b18:	4629      	mov	r1, r5
 8001b1a:	f007 f807 	bl	8008b2c <sin>
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4b75      	ldr	r3, [pc, #468]	; (8001cf8 <test_menu+0x360>)
 8001b22:	f7fe fd8d 	bl	8000640 <__aeabi_dmul>
 8001b26:	4680      	mov	r8, r0
	    y1 = y0-10*cos(w0);
 8001b28:	4630      	mov	r0, r6
	    x1 = x0-10*sin(w0);
 8001b2a:	4689      	mov	r9, r1
	    y1 = y0-10*cos(w0);
 8001b2c:	f7fe fd1e 	bl	800056c <__aeabi_i2d>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4620      	mov	r0, r4
 8001b36:	4629      	mov	r1, r5
 8001b38:	461e      	mov	r6, r3
 8001b3a:	4615      	mov	r5, r2
 8001b3c:	f006 ffb0 	bl	8008aa0 <cos>
 8001b40:	2200      	movs	r2, #0
 8001b42:	4b6d      	ldr	r3, [pc, #436]	; (8001cf8 <test_menu+0x360>)
 8001b44:	f7fe fd7c 	bl	8000640 <__aeabi_dmul>
	    x1 = x0-10*sin(w0);
 8001b48:	4642      	mov	r2, r8
	    y1 = y0-10*cos(w0);
 8001b4a:	4682      	mov	sl, r0
 8001b4c:	468b      	mov	fp, r1
	    x1 = x0-10*sin(w0);
 8001b4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001b52:	464b      	mov	r3, r9
 8001b54:	f7fe fbbc 	bl	80002d0 <__aeabi_dsub>
 8001b58:	f7ff f80c 	bl	8000b74 <__aeabi_d2iz>
	    y1 = y0-10*cos(w0);
 8001b5c:	4652      	mov	r2, sl
 8001b5e:	465b      	mov	r3, fp
	    x2 = x0+10*sin(w0);
	    y2 = y0+10*cos(w0);
	    display_line_f(x1,y1,x2,y2);
 8001b60:	b207      	sxth	r7, r0
	    y1 = y0-10*cos(w0);
 8001b62:	4631      	mov	r1, r6
 8001b64:	4628      	mov	r0, r5
 8001b66:	f7fe fbb3 	bl	80002d0 <__aeabi_dsub>
 8001b6a:	f7ff f803 	bl	8000b74 <__aeabi_d2iz>
	    y2 = y0+10*cos(w0);
 8001b6e:	4652      	mov	r2, sl
	    display_line_f(x1,y1,x2,y2);
 8001b70:	b204      	sxth	r4, r0
	    y2 = y0+10*cos(w0);
 8001b72:	465b      	mov	r3, fp
 8001b74:	4628      	mov	r0, r5
 8001b76:	4631      	mov	r1, r6
 8001b78:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8001b7c:	f7fe fbaa 	bl	80002d4 <__adddf3>
 8001b80:	f7fe fff8 	bl	8000b74 <__aeabi_d2iz>
	    x2 = x0+10*sin(w0);
 8001b84:	4642      	mov	r2, r8
 8001b86:	464b      	mov	r3, r9
	    display_line_f(x1,y1,x2,y2);
 8001b88:	b205      	sxth	r5, r0
	    x2 = x0+10*sin(w0);
 8001b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001b8e:	f7fe fba1 	bl	80002d4 <__adddf3>
 8001b92:	f7fe ffef 	bl	8000b74 <__aeabi_d2iz>
 8001b96:	4602      	mov	r2, r0
	    display_line_f(x1,y1,x2,y2);
 8001b98:	462b      	mov	r3, r5
 8001b9a:	b212      	sxth	r2, r2
 8001b9c:	4621      	mov	r1, r4
 8001b9e:	4638      	mov	r0, r7
 8001ba0:	f004 fb48 	bl	8006234 <display_line_f>
	    x2 = x0-5*sin(wp);
 8001ba4:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 8001ba8:	4628      	mov	r0, r5
 8001baa:	4631      	mov	r1, r6
 8001bac:	f006 ffbe 	bl	8008b2c <sin>
 8001bb0:	4682      	mov	sl, r0
 8001bb2:	468b      	mov	fp, r1
	    y2 = y0-5*cos(wp);
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	4631      	mov	r1, r6
 8001bb8:	f006 ff72 	bl	8008aa0 <cos>
	    x2 = x0-5*sin(wp);
 8001bbc:	2200      	movs	r2, #0
	    y2 = y0-5*cos(wp);
 8001bbe:	4680      	mov	r8, r0
 8001bc0:	4689      	mov	r9, r1
	    x2 = x0-5*sin(wp);
 8001bc2:	4650      	mov	r0, sl
 8001bc4:	4659      	mov	r1, fp
 8001bc6:	4b4d      	ldr	r3, [pc, #308]	; (8001cfc <test_menu+0x364>)
 8001bc8:	f7fe fd3a 	bl	8000640 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001bd4:	f7fe fb7c 	bl	80002d0 <__aeabi_dsub>
 8001bd8:	f7fe ffcc 	bl	8000b74 <__aeabi_d2iz>
	    y2 = y0-5*cos(wp);
 8001bdc:	4649      	mov	r1, r9
	    x2 = x0-5*sin(wp);
 8001bde:	4605      	mov	r5, r0
	    y2 = y0-5*cos(wp);
 8001be0:	2200      	movs	r2, #0
 8001be2:	4640      	mov	r0, r8
 8001be4:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <test_menu+0x364>)
 8001be6:	f7fe fd2b 	bl	8000640 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001bf2:	f7fe fb6d 	bl	80002d0 <__aeabi_dsub>
 8001bf6:	f7fe ffbd 	bl	8000b74 <__aeabi_d2iz>
 8001bfa:	4606      	mov	r6, r0
	    display_line_f(x1,y1,x2,y2);
 8001bfc:	b22d      	sxth	r5, r5
 8001bfe:	b236      	sxth	r6, r6
 8001c00:	462a      	mov	r2, r5
 8001c02:	4633      	mov	r3, r6
 8001c04:	4621      	mov	r1, r4
 8001c06:	4638      	mov	r0, r7
 8001c08:	f004 fb14 	bl	8006234 <display_line_f>
	    x3 = x0-5*sin(wm);
 8001c0c:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8001c10:	4640      	mov	r0, r8
 8001c12:	4649      	mov	r1, r9
 8001c14:	f006 ff8a 	bl	8008b2c <sin>
 8001c18:	4682      	mov	sl, r0
 8001c1a:	468b      	mov	fp, r1
	    y3 = y0-5*cos(wm);
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	4649      	mov	r1, r9
 8001c20:	f006 ff3e 	bl	8008aa0 <cos>
	    x3 = x0-5*sin(wm);
 8001c24:	2200      	movs	r2, #0
	    y3 = y0-5*cos(wm);
 8001c26:	4680      	mov	r8, r0
 8001c28:	4689      	mov	r9, r1
	    x3 = x0-5*sin(wm);
 8001c2a:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <test_menu+0x364>)
 8001c2c:	4650      	mov	r0, sl
 8001c2e:	4659      	mov	r1, fp
 8001c30:	f7fe fd06 	bl	8000640 <__aeabi_dmul>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001c3c:	f7fe fb48 	bl	80002d0 <__aeabi_dsub>
 8001c40:	f7fe ff98 	bl	8000b74 <__aeabi_d2iz>
 8001c44:	4603      	mov	r3, r0
	    y3 = y0-5*cos(wm);
 8001c46:	2200      	movs	r2, #0
 8001c48:	4640      	mov	r0, r8
 8001c4a:	4649      	mov	r1, r9
	    display_line_f(x1,y1,x3,y3);
 8001c4c:	fa0f f883 	sxth.w	r8, r3
	    y3 = y0-5*cos(wm);
 8001c50:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <test_menu+0x364>)
 8001c52:	f7fe fcf5 	bl	8000640 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001c5e:	f7fe fb37 	bl	80002d0 <__aeabi_dsub>
 8001c62:	f7fe ff87 	bl	8000b74 <__aeabi_d2iz>
 8001c66:	4603      	mov	r3, r0
	    display_line_f(x1,y1,x3,y3);
 8001c68:	4621      	mov	r1, r4
 8001c6a:	b21c      	sxth	r4, r3
 8001c6c:	4638      	mov	r0, r7
 8001c6e:	4642      	mov	r2, r8
 8001c70:	4623      	mov	r3, r4
 8001c72:	f004 fadf 	bl	8006234 <display_line_f>
	    display_line_f(x2,y2,x3,y3);
 8001c76:	4623      	mov	r3, r4
 8001c78:	4642      	mov	r2, r8
 8001c7a:	4631      	mov	r1, r6
 8001c7c:	4628      	mov	r0, r5
 8001c7e:	f004 fad9 	bl	8006234 <display_line_f>
	    //sprintf(buf,"%4i/%4i/%4i",(int)v.x, (int)v.y, (int)v.z);
	    //display_println(buf);
	    display_println("<USR> Back to main");
 8001c82:	481f      	ldr	r0, [pc, #124]	; (8001d00 <test_menu+0x368>)
 8001c84:	f004 fa82 	bl	800618c <display_println>
	    HAL_Delay(20);
 8001c88:	2014      	movs	r0, #20
 8001c8a:	f000 fb5f 	bl	800234c <HAL_Delay>
	while((buttonpressed(0)&BTN_USR) == 0)
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff fcca 	bl	8001628 <buttonpressed>
 8001c94:	0700      	lsls	r0, r0, #28
 8001c96:	f53f aea5 	bmi.w	80019e4 <test_menu+0x4c>
	    v= bno055_getVectorEuler();
 8001c9a:	a80a      	add	r0, sp, #40	; 0x28
 8001c9c:	f004 f8ce 	bl	8005e3c <bno055_getVectorEuler>
 8001ca0:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
	if ((*v)<min) (*v)=min;
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	4639      	mov	r1, r7
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <test_menu+0x36c>)
 8001cac:	f7fe ff3a 	bl	8000b24 <__aeabi_dcmplt>
	    v= bno055_getVectorEuler();
 8001cb0:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
	if ((*v)<min) (*v)=min;
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	f43f aeaf 	beq.w	8001a18 <test_menu+0x80>
 8001cba:	2600      	movs	r6, #0
 8001cbc:	4f11      	ldr	r7, [pc, #68]	; (8001d04 <test_menu+0x36c>)
 8001cbe:	e6b4      	b.n	8001a2a <test_menu+0x92>
 8001cc0:	5a7ed197 	.word	0x5a7ed197
 8001cc4:	400921fb 	.word	0x400921fb
 8001cc8:	a6c0950b 	.word	0xa6c0950b
 8001ccc:	3f91df46 	.word	0x3f91df46
 8001cd0:	08009c1c 	.word	0x08009c1c
 8001cd4:	08009d9c 	.word	0x08009d9c
 8001cd8:	40480000 	.word	0x40480000
 8001cdc:	c0360000 	.word	0xc0360000
 8001ce0:	40360000 	.word	0x40360000
 8001ce4:	40500000 	.word	0x40500000
 8001ce8:	3fe00000 	.word	0x3fe00000
 8001cec:	40400000 	.word	0x40400000
 8001cf0:	403e0000 	.word	0x403e0000
 8001cf4:	40768000 	.word	0x40768000
 8001cf8:	40240000 	.word	0x40240000
 8001cfc:	40140000 	.word	0x40140000
 8001d00:	08009ddc 	.word	0x08009ddc
 8001d04:	c0480000 	.word	0xc0480000
	display_clear();
 8001d08:	f004 fa24 	bl	8006154 <display_clear>
	display_println("|  Buzzer Test  |\n"
 8001d0c:	48b0      	ldr	r0, [pc, #704]	; (8001fd0 <test_menu+0x638>)
 8001d0e:	f004 fa3d 	bl	800618c <display_println>
 8001d12:	2464      	movs	r4, #100	; 0x64
		HAL_GPIO_WritePin(BUZ_PWM_GPIO_Port, BUZ_PWM_Pin,GPIO_PIN_SET);
 8001d14:	4daf      	ldr	r5, [pc, #700]	; (8001fd4 <test_menu+0x63c>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	f000 fd77 	bl	8002810 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001d22:	2002      	movs	r0, #2
 8001d24:	f000 fb12 	bl	800234c <HAL_Delay>
		HAL_GPIO_WritePin(BUZ_PWM_GPIO_Port, BUZ_PWM_Pin,GPIO_PIN_RESET);
 8001d28:	4628      	mov	r0, r5
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d30:	f000 fd6e 	bl	8002810 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001d34:	2002      	movs	r0, #2
 8001d36:	f000 fb09 	bl	800234c <HAL_Delay>
	for(i=0;i<100;i++)
 8001d3a:	3c01      	subs	r4, #1
 8001d3c:	d1eb      	bne.n	8001d16 <test_menu+0x37e>
 8001d3e:	2464      	movs	r4, #100	; 0x64
		HAL_GPIO_WritePin(BUZ_PWM_GPIO_Port, BUZ_PWM_Pin,GPIO_PIN_SET);
 8001d40:	4da4      	ldr	r5, [pc, #656]	; (8001fd4 <test_menu+0x63c>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f000 fd61 	bl	8002810 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f000 fafc 	bl	800234c <HAL_Delay>
		HAL_GPIO_WritePin(BUZ_PWM_GPIO_Port, BUZ_PWM_Pin,GPIO_PIN_RESET);
 8001d54:	4628      	mov	r0, r5
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d5c:	f000 fd58 	bl	8002810 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f000 faf3 	bl	800234c <HAL_Delay>
	for(i=0;i<100;i++)
 8001d66:	3c01      	subs	r4, #1
 8001d68:	d1eb      	bne.n	8001d42 <test_menu+0x3aa>
		if (!preselect)
 8001d6a:	9b08      	ldr	r3, [sp, #32]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f47f ae1d 	bne.w	80019ac <test_menu+0x14>
			display_clear();
 8001d72:	f004 f9ef 	bl	8006154 <display_clear>
			display_println("|  HW-TESTS   |\n"
 8001d76:	4898      	ldr	r0, [pc, #608]	; (8001fd8 <test_menu+0x640>)
 8001d78:	f004 fa08 	bl	800618c <display_println>
				display_println(">");
 8001d7c:	4f97      	ldr	r7, [pc, #604]	; (8001fdc <test_menu+0x644>)
				display_println(" ");
 8001d7e:	4e98      	ldr	r6, [pc, #608]	; (8001fe0 <test_menu+0x648>)
 8001d80:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8001d84:	e00a      	b.n	8001d9c <test_menu+0x404>
					s--;
 8001d86:	f108 38ff 	add.w	r8, r8, #4294967295
				if ((key&BTN_DN) && (s<smax))
 8001d8a:	07a0      	lsls	r0, r4, #30
 8001d8c:	d504      	bpl.n	8001d98 <test_menu+0x400>
 8001d8e:	f1b8 0f05 	cmp.w	r8, #5
					s++;
 8001d92:	bfd8      	it	le
 8001d94:	f108 0801 	addle.w	r8, r8, #1
				if (key&BTN_OK)
 8001d98:	07e1      	lsls	r1, r4, #31
 8001d9a:	d420      	bmi.n	8001dde <test_menu+0x446>
				display_gotoxy(0,s+1);
 8001d9c:	f108 0501 	add.w	r5, r8, #1
 8001da0:	b22d      	sxth	r5, r5
 8001da2:	4629      	mov	r1, r5
 8001da4:	2000      	movs	r0, #0
 8001da6:	f004 fa3d 	bl	8006224 <display_gotoxy>
				display_println(">");
 8001daa:	4638      	mov	r0, r7
 8001dac:	f004 f9ee 	bl	800618c <display_println>
				key = buttonpressed(BTN_WAIT);
 8001db0:	2001      	movs	r0, #1
 8001db2:	f7ff fc39 	bl	8001628 <buttonpressed>
 8001db6:	4604      	mov	r4, r0
				display_gotoxy(0,s+1);
 8001db8:	4629      	mov	r1, r5
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f004 fa32 	bl	8006224 <display_gotoxy>
				display_println(" ");
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	f004 f9e3 	bl	800618c <display_println>
				if ( (key&BTN_UP) && (s>1))
 8001dc6:	0765      	lsls	r5, r4, #29
 8001dc8:	d5df      	bpl.n	8001d8a <test_menu+0x3f2>
 8001dca:	f1b8 0f01 	cmp.w	r8, #1
 8001dce:	d1da      	bne.n	8001d86 <test_menu+0x3ee>
				if ((key&BTN_DN) && (s<smax))
 8001dd0:	f014 0f02 	tst.w	r4, #2
 8001dd4:	bf18      	it	ne
 8001dd6:	f04f 0802 	movne.w	r8, #2
				if (key&BTN_OK)
 8001dda:	07e1      	lsls	r1, r4, #31
 8001ddc:	d5de      	bpl.n	8001d9c <test_menu+0x404>
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8001de4:	9308      	str	r3, [sp, #32]
 8001de6:	e5f1      	b.n	80019cc <test_menu+0x34>
	display_println("|  MOTOR-TEST  |\n"
 8001de8:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8001fe4 <test_menu+0x64c>
		sprintf(buf, "ENC: %8li  %8li",motors_encoder_left(), motors_encoder_right());
 8001dec:	4f7e      	ldr	r7, [pc, #504]	; (8001fe8 <test_menu+0x650>)
			display_println("PRESELECT MODE");
 8001dee:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8001fec <test_menu+0x654>
 8001df2:	9d08      	ldr	r5, [sp, #32]
	display_clear();
 8001df4:	f004 f9ae 	bl	8006154 <display_clear>
	display_println("|  MOTOR-TEST  |\n"
 8001df8:	4640      	mov	r0, r8
 8001dfa:	f004 f9c7 	bl	800618c <display_println>
	int pwmdir=10;
 8001dfe:	f04f 0a0a 	mov.w	sl, #10
	int pwm=0;
 8001e02:	2600      	movs	r6, #0
		pwm+=pwmdir;
 8001e04:	4456      	add	r6, sl
		if (pwm>=100) pwmdir=-10;
 8001e06:	2e63      	cmp	r6, #99	; 0x63
 8001e08:	f300 81d7 	bgt.w	80021ba <test_menu+0x822>
		if (pwm<=-100) pwmdir=10;
 8001e0c:	f116 0f64 	cmn.w	r6, #100	; 0x64
 8001e10:	bfd8      	it	le
 8001e12:	f04f 0a0a 	movle.w	sl, #10
		motors_set_left_pwm(pwm);
 8001e16:	b234      	sxth	r4, r6
 8001e18:	4620      	mov	r0, r4
 8001e1a:	f004 fbeb 	bl	80065f4 <motors_set_left_pwm>
		motors_set_right_pwm(pwm);
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f004 fc0c 	bl	800663c <motors_set_right_pwm>
		sprintf(buf, "ENC: %8li  %8li",motors_encoder_left(), motors_encoder_right());
 8001e24:	f004 fbda 	bl	80065dc <motors_encoder_left>
 8001e28:	4683      	mov	fp, r0
 8001e2a:	f004 fbdd 	bl	80065e8 <motors_encoder_right>
 8001e2e:	465a      	mov	r2, fp
 8001e30:	4603      	mov	r3, r0
 8001e32:	4639      	mov	r1, r7
 8001e34:	a810      	add	r0, sp, #64	; 0x40
 8001e36:	f005 fce1 	bl	80077fc <siprintf>
		display_gotoxy(0,5);
 8001e3a:	2105      	movs	r1, #5
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f004 f9f1 	bl	8006224 <display_gotoxy>
		display_println(buf);
 8001e42:	a810      	add	r0, sp, #64	; 0x40
 8001e44:	2414      	movs	r4, #20
 8001e46:	f004 f9a1 	bl	800618c <display_println>
		for(i=0;i<20;i++)
 8001e4a:	e004      	b.n	8001e56 <test_menu+0x4be>
			HAL_Delay(5);
 8001e4c:	2005      	movs	r0, #5
 8001e4e:	f000 fa7d 	bl	800234c <HAL_Delay>
		for(i=0;i<20;i++)
 8001e52:	3c01      	subs	r4, #1
 8001e54:	d0d6      	beq.n	8001e04 <test_menu+0x46c>
			if (buttonpressed(BTN_NOWAIT) & BTN_USR)
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff fbe6 	bl	8001628 <buttonpressed>
 8001e5c:	0703      	lsls	r3, r0, #28
 8001e5e:	d5f5      	bpl.n	8001e4c <test_menu+0x4b4>
	motors_stop();
 8001e60:	f004 fc54 	bl	800670c <motors_stop>
		if (!preselect)
 8001e64:	2d00      	cmp	r5, #0
 8001e66:	d084      	beq.n	8001d72 <test_menu+0x3da>
			display_clear();
 8001e68:	f004 f974 	bl	8006154 <display_clear>
			display_println("PRESELECT MODE");
 8001e6c:	4648      	mov	r0, r9
 8001e6e:	f004 f98d 	bl	800618c <display_println>
			HAL_Delay(1000);
 8001e72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e76:	f000 fa69 	bl	800234c <HAL_Delay>
		switch(s)
 8001e7a:	e7bb      	b.n	8001df4 <test_menu+0x45c>
	display_println("|  LED Test  |\n"
 8001e7c:	4f5c      	ldr	r7, [pc, #368]	; (8001ff0 <test_menu+0x658>)
			HAL_GPIO_WritePin(LED_USR1_GPIO_Port, LED_USR1_Pin,GPIO_PIN_SET);
 8001e7e:	4e5d      	ldr	r6, [pc, #372]	; (8001ff4 <test_menu+0x65c>)
 8001e80:	9c08      	ldr	r4, [sp, #32]
	display_clear();
 8001e82:	f004 f967 	bl	8006154 <display_clear>
	display_println("|  LED Test  |\n"
 8001e86:	4638      	mov	r0, r7
 8001e88:	f004 f980 	bl	800618c <display_println>
	int led_no =0;
 8001e8c:	f04f 0800 	mov.w	r8, #0
		switch(led_no)
 8001e90:	f1b8 0f04 	cmp.w	r8, #4
 8001e94:	d80e      	bhi.n	8001eb4 <test_menu+0x51c>
 8001e96:	e8df f008 	tbb	[pc, r8]
 8001e9a:	5f47      	.short	0x5f47
 8001e9c:	6b53      	.short	0x6b53
 8001e9e:	03          	.byte	0x03
 8001e9f:	00          	.byte	0x00
			HAL_GPIO_WritePin(LED_USR1_GPIO_Port, LED_USR1_Pin,GPIO_PIN_SET);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	4630      	mov	r0, r6
 8001ea6:	f000 fcb3 	bl	8002810 <HAL_GPIO_WritePin>
			sprintf(buf,"Display USR1 ");
 8001eaa:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <test_menu+0x660>)
 8001eac:	ad10      	add	r5, sp, #64	; 0x40
 8001eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb0:	c507      	stmia	r5!, {r0, r1, r2}
 8001eb2:	802b      	strh	r3, [r5, #0]
		display_gotoxy(0,5);
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f004 f9b4 	bl	8006224 <display_gotoxy>
		display_println(buf);
 8001ebc:	a810      	add	r0, sp, #64	; 0x40
 8001ebe:	f004 f965 	bl	800618c <display_println>
 8001ec2:	e002      	b.n	8001eca <test_menu+0x532>
			if (btns&BTN_UP)
 8001ec4:	0742      	lsls	r2, r0, #29
 8001ec6:	f100 817e 	bmi.w	80021c6 <test_menu+0x82e>
			btns = buttonpressed(BTN_WAIT);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f7ff fbac 	bl	8001628 <buttonpressed>
			if (btns&BTN_USR)
 8001ed0:	f010 0508 	ands.w	r5, r0, #8
 8001ed4:	d0f6      	beq.n	8001ec4 <test_menu+0x52c>
		HAL_GPIO_WritePin(LED_BACK_L_GPIO_Port, LED_BACK_L_Pin,GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001edc:	4630      	mov	r0, r6
 8001ede:	f000 fc97 	bl	8002810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BACK_R_GPIO_Port, LED_BACK_R_Pin,GPIO_PIN_RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ee8:	4630      	mov	r0, r6
 8001eea:	f000 fc91 	bl	8002810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_FRONT_GPIO_Port, LED_FRONT_Pin,GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	f000 fc8b 	bl	8002810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_USR0_GPIO_Port, LED_USR0_Pin,GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2101      	movs	r1, #1
 8001efe:	4630      	mov	r0, r6
 8001f00:	f000 fc86 	bl	8002810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_USR1_GPIO_Port, LED_USR1_Pin,GPIO_PIN_RESET);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2102      	movs	r1, #2
 8001f08:	4630      	mov	r0, r6
 8001f0a:	f000 fc81 	bl	8002810 <HAL_GPIO_WritePin>
		if (!preselect)
 8001f0e:	2c00      	cmp	r4, #0
 8001f10:	f43f af2f 	beq.w	8001d72 <test_menu+0x3da>
			display_clear();
 8001f14:	f004 f91e 	bl	8006154 <display_clear>
			display_println("PRESELECT MODE");
 8001f18:	4834      	ldr	r0, [pc, #208]	; (8001fec <test_menu+0x654>)
 8001f1a:	f004 f937 	bl	800618c <display_println>
			HAL_Delay(1000);
 8001f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f22:	f000 fa13 	bl	800234c <HAL_Delay>
		switch(s)
 8001f26:	e7ac      	b.n	8001e82 <test_menu+0x4ea>
			HAL_GPIO_WritePin(LED_BACK_L_GPIO_Port, LED_BACK_L_Pin,GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f2e:	4630      	mov	r0, r6
 8001f30:	f000 fc6e 	bl	8002810 <HAL_GPIO_WritePin>
			sprintf(buf,"Hinten Links ");
 8001f34:	4b31      	ldr	r3, [pc, #196]	; (8001ffc <test_menu+0x664>)
 8001f36:	ad10      	add	r5, sp, #64	; 0x40
 8001f38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f3a:	c507      	stmia	r5!, {r0, r1, r2}
 8001f3c:	802b      	strh	r3, [r5, #0]
			break;
 8001f3e:	e7b9      	b.n	8001eb4 <test_menu+0x51c>
			HAL_GPIO_WritePin(LED_FRONT_GPIO_Port, LED_FRONT_Pin,GPIO_PIN_SET);
 8001f40:	2201      	movs	r2, #1
 8001f42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f46:	4630      	mov	r0, r6
 8001f48:	f000 fc62 	bl	8002810 <HAL_GPIO_WritePin>
			sprintf(buf,"Vorne        ");
 8001f4c:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <test_menu+0x668>)
 8001f4e:	ad10      	add	r5, sp, #64	; 0x40
 8001f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f52:	c507      	stmia	r5!, {r0, r1, r2}
 8001f54:	802b      	strh	r3, [r5, #0]
			break;
 8001f56:	e7ad      	b.n	8001eb4 <test_menu+0x51c>
			HAL_GPIO_WritePin(LED_BACK_R_GPIO_Port, LED_BACK_R_Pin,GPIO_PIN_SET);
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f5e:	4630      	mov	r0, r6
 8001f60:	f000 fc56 	bl	8002810 <HAL_GPIO_WritePin>
			sprintf(buf,"Hinten Rechts");
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <test_menu+0x66c>)
 8001f66:	ad10      	add	r5, sp, #64	; 0x40
 8001f68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f6a:	c507      	stmia	r5!, {r0, r1, r2}
 8001f6c:	802b      	strh	r3, [r5, #0]
			break;
 8001f6e:	e7a1      	b.n	8001eb4 <test_menu+0x51c>
			HAL_GPIO_WritePin(LED_USR0_GPIO_Port, LED_USR0_Pin,GPIO_PIN_SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	4630      	mov	r0, r6
 8001f74:	4611      	mov	r1, r2
 8001f76:	f000 fc4b 	bl	8002810 <HAL_GPIO_WritePin>
			sprintf(buf,"Display USR0 ");
 8001f7a:	4b23      	ldr	r3, [pc, #140]	; (8002008 <test_menu+0x670>)
 8001f7c:	ad10      	add	r5, sp, #64	; 0x40
 8001f7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f80:	c507      	stmia	r5!, {r0, r1, r2}
 8001f82:	802b      	strh	r3, [r5, #0]
			break;
 8001f84:	e796      	b.n	8001eb4 <test_menu+0x51c>
	display_println("|  Set BT Name  |\n"
 8001f86:	4e21      	ldr	r6, [pc, #132]	; (800200c <test_menu+0x674>)
	char names[5][7]={"Speedy", "Sparky", "Spoofy", "Spacey", "Spiffy"};
 8001f88:	4d21      	ldr	r5, [pc, #132]	; (8002010 <test_menu+0x678>)
 8001f8a:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8001f8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f90:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001f9a:	682b      	ldr	r3, [r5, #0]
	idx=0;
 8001f9c:	2400      	movs	r4, #0
	char names[5][7]={"Speedy", "Sparky", "Spoofy", "Spacey", "Spiffy"};
 8001f9e:	f82c 3b02 	strh.w	r3, [ip], #2
 8001fa2:	0c1b      	lsrs	r3, r3, #16
 8001fa4:	f88c 3000 	strb.w	r3, [ip]
	display_clear();
 8001fa8:	f004 f8d4 	bl	8006154 <display_clear>
	display_println("|  Set BT Name  |\n"
 8001fac:	4630      	mov	r0, r6
 8001fae:	f004 f8ed 	bl	800618c <display_println>
	sprintf(buf,"Now: %s",bt_getname());
 8001fb2:	f003 fe97 	bl	8005ce4 <bt_getname>
 8001fb6:	4917      	ldr	r1, [pc, #92]	; (8002014 <test_menu+0x67c>)
 8001fb8:	4602      	mov	r2, r0
 8001fba:	a80a      	add	r0, sp, #40	; 0x28
 8001fbc:	f005 fc1e 	bl	80077fc <siprintf>
	display_println(buf);
 8001fc0:	a80a      	add	r0, sp, #40	; 0x28
 8001fc2:	f004 f8e3 	bl	800618c <display_println>
	display_println("<UP>  N�chster\n"
 8001fc6:	4814      	ldr	r0, [pc, #80]	; (8002018 <test_menu+0x680>)
		sprintf(buf,"NEW: %s",names[idx]);
 8001fc8:	4f14      	ldr	r7, [pc, #80]	; (800201c <test_menu+0x684>)
	display_println("<UP>  N�chster\n"
 8001fca:	f004 f8df 	bl	800618c <display_println>
 8001fce:	e039      	b.n	8002044 <test_menu+0x6ac>
 8001fd0:	08009d6c 	.word	0x08009d6c
 8001fd4:	40010800 	.word	0x40010800
 8001fd8:	08009c2c 	.word	0x08009c2c
 8001fdc:	08009c94 	.word	0x08009c94
 8001fe0:	08009d04 	.word	0x08009d04
 8001fe4:	08009d28 	.word	0x08009d28
 8001fe8:	08009d5c 	.word	0x08009d5c
 8001fec:	08009c1c 	.word	0x08009c1c
 8001ff0:	08009c98 	.word	0x08009c98
 8001ff4:	40010c00 	.word	0x40010c00
 8001ff8:	08009d18 	.word	0x08009d18
 8001ffc:	08009cd8 	.word	0x08009cd8
 8002000:	08009cf8 	.word	0x08009cf8
 8002004:	08009ce8 	.word	0x08009ce8
 8002008:	08009d08 	.word	0x08009d08
 800200c:	08009e34 	.word	0x08009e34
 8002010:	08009b38 	.word	0x08009b38
 8002014:	08009e58 	.word	0x08009e58
 8002018:	08009e60 	.word	0x08009e60
 800201c:	08009e90 	.word	0x08009e90
		if (btns&BTN_UP)
 8002020:	0742      	lsls	r2, r0, #29
 8002022:	d50c      	bpl.n	800203e <test_menu+0x6a6>
			idx = (idx+1)%5;
 8002024:	4a82      	ldr	r2, [pc, #520]	; (8002230 <test_menu+0x898>)
 8002026:	fba2 2103 	umull	r2, r1, r2, r3
 800202a:	f001 02fc 	and.w	r2, r1, #252	; 0xfc
 800202e:	eb02 0291 	add.w	r2, r2, r1, lsr #2
 8002032:	1a9b      	subs	r3, r3, r2
	display_println(names[idx]);
 8002034:	ebc3 08c3 	rsb	r8, r3, r3, lsl #3
			idx = (idx+1)%5;
 8002038:	b2dc      	uxtb	r4, r3
	display_println(names[idx]);
 800203a:	ab10      	add	r3, sp, #64	; 0x40
 800203c:	4498      	add	r8, r3
		if (btns&BTN_OK)
 800203e:	07c3      	lsls	r3, r0, #31
 8002040:	f100 80e9 	bmi.w	8002216 <test_menu+0x87e>
		display_gotoxy(0,7);
 8002044:	2107      	movs	r1, #7
 8002046:	2000      	movs	r0, #0
 8002048:	f004 f8ec 	bl	8006224 <display_gotoxy>
		sprintf(buf,"NEW: %s",names[idx]);
 800204c:	ebc4 08c4 	rsb	r8, r4, r4, lsl #3
 8002050:	ab10      	add	r3, sp, #64	; 0x40
 8002052:	4498      	add	r8, r3
 8002054:	4639      	mov	r1, r7
 8002056:	4642      	mov	r2, r8
 8002058:	a80a      	add	r0, sp, #40	; 0x28
 800205a:	f005 fbcf 	bl	80077fc <siprintf>
		display_println(buf);
 800205e:	a80a      	add	r0, sp, #40	; 0x28
 8002060:	f004 f894 	bl	800618c <display_println>
		btns = buttonpressed(BTN_WAIT);
 8002064:	2001      	movs	r0, #1
 8002066:	f7ff fadf 	bl	8001628 <buttonpressed>
			idx = (idx+1)%5;
 800206a:	1c63      	adds	r3, r4, #1
		if (btns&BTN_USR)
 800206c:	0701      	lsls	r1, r0, #28
			idx = (idx+1)%5;
 800206e:	b2db      	uxtb	r3, r3
		if (btns&BTN_USR)
 8002070:	d5d6      	bpl.n	8002020 <test_menu+0x688>
		if (!preselect)
 8002072:	9b08      	ldr	r3, [sp, #32]
 8002074:	2b00      	cmp	r3, #0
 8002076:	f43f ae7c 	beq.w	8001d72 <test_menu+0x3da>
			display_clear();
 800207a:	f004 f86b 	bl	8006154 <display_clear>
			display_println("PRESELECT MODE");
 800207e:	486d      	ldr	r0, [pc, #436]	; (8002234 <test_menu+0x89c>)
 8002080:	f004 f884 	bl	800618c <display_println>
			HAL_Delay(1000);
 8002084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002088:	f000 f960 	bl	800234c <HAL_Delay>
		switch(s)
 800208c:	e77c      	b.n	8001f88 <test_menu+0x5f0>
	display_println("|  Distance Sensors  |\n"
 800208e:	4e6a      	ldr	r6, [pc, #424]	; (8002238 <test_menu+0x8a0>)
		display_println("<USR> Back to Main");
 8002090:	4d6a      	ldr	r5, [pc, #424]	; (800223c <test_menu+0x8a4>)
			display_println("PRESELECT MODE");
 8002092:	4f68      	ldr	r7, [pc, #416]	; (8002234 <test_menu+0x89c>)
 8002094:	9c08      	ldr	r4, [sp, #32]
	display_clear();
 8002096:	f004 f85d 	bl	8006154 <display_clear>
	display_println("|  Distance Sensors  |\n"
 800209a:	4630      	mov	r0, r6
 800209c:	f004 f876 	bl	800618c <display_println>
	HAL_Delay(1000);
 80020a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020a4:	f000 f952 	bl	800234c <HAL_Delay>
	distance_start_scan();
 80020a8:	f004 f972 	bl	8006390 <distance_start_scan>
	HAL_Delay(20);
 80020ac:	2014      	movs	r0, #20
 80020ae:	f000 f94d 	bl	800234c <HAL_Delay>
	while((buttonpressed(0)&BTN_USR) == 0)
 80020b2:	e06f      	b.n	8002194 <test_menu+0x7fc>
		distance_get_scan_values(range);
 80020b4:	a810      	add	r0, sp, #64	; 0x40
 80020b6:	f004 f94d 	bl	8006354 <distance_get_scan_values>
		distance_start_scan();
 80020ba:	f004 f969 	bl	8006390 <distance_start_scan>
		display_clear_f();
 80020be:	f004 f859 	bl	8006174 <display_clear_f>
		display_println("<USR> Back to Main");
 80020c2:	4628      	mov	r0, r5
 80020c4:	f004 f862 	bl	800618c <display_println>
	display_line_f(40,63,40,48);
 80020c8:	2228      	movs	r2, #40	; 0x28
 80020ca:	2330      	movs	r3, #48	; 0x30
 80020cc:	4610      	mov	r0, r2
 80020ce:	213f      	movs	r1, #63	; 0x3f
 80020d0:	f004 f8b0 	bl	8006234 <display_line_f>
	display_line_f(41,63,41,49);
 80020d4:	2229      	movs	r2, #41	; 0x29
 80020d6:	2331      	movs	r3, #49	; 0x31
 80020d8:	4610      	mov	r0, r2
 80020da:	213f      	movs	r1, #63	; 0x3f
 80020dc:	f004 f8aa 	bl	8006234 <display_line_f>
	display_line_f(40,48,56,32);
 80020e0:	2320      	movs	r3, #32
 80020e2:	2238      	movs	r2, #56	; 0x38
 80020e4:	2130      	movs	r1, #48	; 0x30
 80020e6:	2028      	movs	r0, #40	; 0x28
 80020e8:	f004 f8a4 	bl	8006234 <display_line_f>
	display_line_f(41,49,57,33);
 80020ec:	2321      	movs	r3, #33	; 0x21
 80020ee:	2239      	movs	r2, #57	; 0x39
 80020f0:	2131      	movs	r1, #49	; 0x31
 80020f2:	2029      	movs	r0, #41	; 0x29
 80020f4:	f004 f89e 	bl	8006234 <display_line_f>
	display_line_f(56,32,72,32);
 80020f8:	2320      	movs	r3, #32
 80020fa:	2248      	movs	r2, #72	; 0x48
 80020fc:	4619      	mov	r1, r3
 80020fe:	2038      	movs	r0, #56	; 0x38
 8002100:	f004 f898 	bl	8006234 <display_line_f>
	display_line_f(57,33,71,33);
 8002104:	2321      	movs	r3, #33	; 0x21
 8002106:	2247      	movs	r2, #71	; 0x47
 8002108:	4619      	mov	r1, r3
 800210a:	2039      	movs	r0, #57	; 0x39
 800210c:	f004 f892 	bl	8006234 <display_line_f>
	display_line_f(72,32,88,48);
 8002110:	2330      	movs	r3, #48	; 0x30
 8002112:	2258      	movs	r2, #88	; 0x58
 8002114:	2120      	movs	r1, #32
 8002116:	2048      	movs	r0, #72	; 0x48
 8002118:	f004 f88c 	bl	8006234 <display_line_f>
	display_line_f(71,33,87,49);
 800211c:	2331      	movs	r3, #49	; 0x31
 800211e:	2257      	movs	r2, #87	; 0x57
 8002120:	2121      	movs	r1, #33	; 0x21
 8002122:	2047      	movs	r0, #71	; 0x47
 8002124:	f004 f886 	bl	8006234 <display_line_f>
	display_line_f(88,48,88,63);
 8002128:	2258      	movs	r2, #88	; 0x58
 800212a:	233f      	movs	r3, #63	; 0x3f
 800212c:	4610      	mov	r0, r2
 800212e:	2130      	movs	r1, #48	; 0x30
 8002130:	f004 f880 	bl	8006234 <display_line_f>
	display_line_f(87,63,87,49);
 8002134:	2257      	movs	r2, #87	; 0x57
 8002136:	213f      	movs	r1, #63	; 0x3f
 8002138:	4610      	mov	r0, r2
 800213a:	2331      	movs	r3, #49	; 0x31
 800213c:	f004 f87a 	bl	8006234 <display_line_f>
		testing_draw_dist(64, 32, range[0], 0);		// FF
 8002140:	4643      	mov	r3, r8
 8002142:	2120      	movs	r1, #32
 8002144:	2040      	movs	r0, #64	; 0x40
 8002146:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800214a:	f7ff faf9 	bl	8001740 <testing_draw_dist>
		testing_draw_dist(80, 40, range[2], 45);	// FR
 800214e:	232d      	movs	r3, #45	; 0x2d
 8002150:	2128      	movs	r1, #40	; 0x28
 8002152:	2050      	movs	r0, #80	; 0x50
 8002154:	f9bd 2044 	ldrsh.w	r2, [sp, #68]	; 0x44
 8002158:	f7ff faf2 	bl	8001740 <testing_draw_dist>
		testing_draw_dist(47, 41, range[1], -45);	// FL
 800215c:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 8002160:	2129      	movs	r1, #41	; 0x29
 8002162:	202f      	movs	r0, #47	; 0x2f
 8002164:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8002168:	f7ff faea 	bl	8001740 <testing_draw_dist>
		testing_draw_dist(90, 56, range[4],90);		// RR
 800216c:	235a      	movs	r3, #90	; 0x5a
 800216e:	2138      	movs	r1, #56	; 0x38
 8002170:	4618      	mov	r0, r3
 8002172:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 8002176:	f7ff fae3 	bl	8001740 <testing_draw_dist>
		testing_draw_dist(40, 56, range[3],-90);	// LL
 800217a:	2028      	movs	r0, #40	; 0x28
 800217c:	f06f 0359 	mvn.w	r3, #89	; 0x59
 8002180:	2138      	movs	r1, #56	; 0x38
 8002182:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8002186:	f7ff fadb 	bl	8001740 <testing_draw_dist>
		display_update();
 800218a:	f004 f867 	bl	800625c <display_update>
		HAL_Delay(10);
 800218e:	200a      	movs	r0, #10
 8002190:	f000 f8dc 	bl	800234c <HAL_Delay>
	while((buttonpressed(0)&BTN_USR) == 0)
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff fa47 	bl	8001628 <buttonpressed>
 800219a:	f010 0808 	ands.w	r8, r0, #8
 800219e:	d089      	beq.n	80020b4 <test_menu+0x71c>
		if (!preselect)
 80021a0:	2c00      	cmp	r4, #0
 80021a2:	f43f ade6 	beq.w	8001d72 <test_menu+0x3da>
			display_clear();
 80021a6:	f003 ffd5 	bl	8006154 <display_clear>
			display_println("PRESELECT MODE");
 80021aa:	4638      	mov	r0, r7
 80021ac:	f003 ffee 	bl	800618c <display_println>
			HAL_Delay(1000);
 80021b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021b4:	f000 f8ca 	bl	800234c <HAL_Delay>
		switch(s)
 80021b8:	e76d      	b.n	8002096 <test_menu+0x6fe>
		if (pwm>=100) pwmdir=-10;
 80021ba:	f06f 0a09 	mvn.w	sl, #9
 80021be:	e62a      	b.n	8001e16 <test_menu+0x47e>
	if ((*v)<min) (*v)=min;
 80021c0:	2400      	movs	r4, #0
 80021c2:	4d1f      	ldr	r5, [pc, #124]	; (8002240 <test_menu+0x8a8>)
 80021c4:	e443      	b.n	8001a4e <test_menu+0xb6>
				led_no = (led_no+1)%5;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <test_menu+0x898>)
 80021c8:	f108 0801 	add.w	r8, r8, #1
 80021cc:	fba3 3c08 	umull	r3, ip, r3, r8
 80021d0:	f02c 0303 	bic.w	r3, ip, #3
 80021d4:	eb03 039c 	add.w	r3, r3, ip, lsr #2
		HAL_GPIO_WritePin(LED_BACK_L_GPIO_Port, LED_BACK_L_Pin,GPIO_PIN_RESET);
 80021d8:	4630      	mov	r0, r6
 80021da:	462a      	mov	r2, r5
 80021dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
				led_no = (led_no+1)%5;
 80021e0:	eba8 0803 	sub.w	r8, r8, r3
		HAL_GPIO_WritePin(LED_BACK_L_GPIO_Port, LED_BACK_L_Pin,GPIO_PIN_RESET);
 80021e4:	f000 fb14 	bl	8002810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_BACK_R_GPIO_Port, LED_BACK_R_Pin,GPIO_PIN_RESET);
 80021e8:	462a      	mov	r2, r5
 80021ea:	4630      	mov	r0, r6
 80021ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021f0:	f000 fb0e 	bl	8002810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_FRONT_GPIO_Port, LED_FRONT_Pin,GPIO_PIN_RESET);
 80021f4:	462a      	mov	r2, r5
 80021f6:	4630      	mov	r0, r6
 80021f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021fc:	f000 fb08 	bl	8002810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_USR0_GPIO_Port, LED_USR0_Pin,GPIO_PIN_RESET);
 8002200:	462a      	mov	r2, r5
 8002202:	4630      	mov	r0, r6
 8002204:	2101      	movs	r1, #1
 8002206:	f000 fb03 	bl	8002810 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_USR1_GPIO_Port, LED_USR1_Pin,GPIO_PIN_RESET);
 800220a:	462a      	mov	r2, r5
 800220c:	2102      	movs	r1, #2
 800220e:	4630      	mov	r0, r6
 8002210:	f000 fafe 	bl	8002810 <HAL_GPIO_WritePin>
	while(led_no <100)	// led_no >= 100 : Schleife verlassen
 8002214:	e63c      	b.n	8001e90 <test_menu+0x4f8>
	display_clear();
 8002216:	f003 ff9d 	bl	8006154 <display_clear>
	display_println("Setze neuen Namen");
 800221a:	480a      	ldr	r0, [pc, #40]	; (8002244 <test_menu+0x8ac>)
 800221c:	f003 ffb6 	bl	800618c <display_println>
	display_println(names[idx]);
 8002220:	4640      	mov	r0, r8
 8002222:	f003 ffb3 	bl	800618c <display_println>
	bt_program(names[idx]);
 8002226:	4640      	mov	r0, r8
 8002228:	f003 fbbe 	bl	80059a8 <bt_program>
 800222c:	e721      	b.n	8002072 <test_menu+0x6da>
 800222e:	bf00      	nop
 8002230:	cccccccd 	.word	0xcccccccd
 8002234:	08009c1c 	.word	0x08009c1c
 8002238:	08009df0 	.word	0x08009df0
 800223c:	08009dc8 	.word	0x08009dc8
 8002240:	c0360000 	.word	0xc0360000
 8002244:	08009e98 	.word	0x08009e98

08002248 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{


	   overflow_cnt+=5;
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_TIM_PeriodElapsedCallback+0x20>)

   if(htim == &htim3)
 800224a:	4908      	ldr	r1, [pc, #32]	; (800226c <HAL_TIM_PeriodElapsedCallback+0x24>)
	   overflow_cnt+=5;
 800224c:	8813      	ldrh	r3, [r2, #0]
   if(htim == &htim3)
 800224e:	4281      	cmp	r1, r0
	   overflow_cnt+=5;
 8002250:	f103 0305 	add.w	r3, r3, #5
 8002254:	b29b      	uxth	r3, r3
 8002256:	8013      	strh	r3, [r2, #0]
   if(htim == &htim3)
 8002258:	d000      	beq.n	800225c <HAL_TIM_PeriodElapsedCallback+0x14>
	   overflow_cnt++;
   }



}
 800225a:	4770      	bx	lr
	   overflow_cnt++;
 800225c:	8813      	ldrh	r3, [r2, #0]
 800225e:	3301      	adds	r3, #1
 8002260:	b29b      	uxth	r3, r3
 8002262:	8013      	strh	r3, [r2, #0]
}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	200006d8 	.word	0x200006d8
 800226c:	200005d0 	.word	0x200005d0

08002270 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002270:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002272:	e003      	b.n	800227c <LoopCopyDataInit>

08002274 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002276:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002278:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800227a:	3104      	adds	r1, #4

0800227c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800227c:	480a      	ldr	r0, [pc, #40]	; (80022a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800227e:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002280:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002282:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002284:	d3f6      	bcc.n	8002274 <CopyDataInit>
  ldr r2, =_sbss
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002288:	e002      	b.n	8002290 <LoopFillZerobss>

0800228a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800228c:	f842 3b04 	str.w	r3, [r2], #4

08002290 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002292:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002294:	d3f9      	bcc.n	800228a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002296:	f7ff f99f 	bl	80015d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229a:	f005 f9db 	bl	8007654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800229e:	f7fe fd5b 	bl	8000d58 <main>
  bx lr
 80022a2:	4770      	bx	lr
  ldr r3, =_sidata
 80022a4:	0800adb8 	.word	0x0800adb8
  ldr r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80022ac:	20000484 	.word	0x20000484
  ldr r2, =_sbss
 80022b0:	20000484 	.word	0x20000484
  ldr r3, = _ebss
 80022b4:	20000dd0 	.word	0x20000dd0

080022b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC1_2_IRQHandler>
	...

080022bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <HAL_InitTick+0x3c>)
{
 80022c4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c6:	7811      	ldrb	r1, [r2, #0]
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_InitTick+0x40>)
 80022ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	fbb2 f0f3 	udiv	r0, r2, r3
 80022d4:	f000 f8aa 	bl	800242c <HAL_SYSTICK_Config>
 80022d8:	b908      	cbnz	r0, 80022de <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022da:	2d0f      	cmp	r5, #15
 80022dc:	d901      	bls.n	80022e2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80022de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80022e0:	bd38      	pop	{r3, r4, r5, pc}
 80022e2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e4:	4602      	mov	r2, r0
 80022e6:	4629      	mov	r1, r5
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f000 f852 	bl	8002394 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_InitTick+0x44>)
 80022f2:	4620      	mov	r0, r4
 80022f4:	601d      	str	r5, [r3, #0]
}
 80022f6:	bd38      	pop	{r3, r4, r5, pc}
 80022f8:	20000004 	.word	0x20000004
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000008 	.word	0x20000008

08002304 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002304:	4a07      	ldr	r2, [pc, #28]	; (8002324 <HAL_Init+0x20>)
{
 8002306:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002308:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800230c:	f043 0310 	orr.w	r3, r3, #16
 8002310:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002312:	f000 f82d 	bl	8002370 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002316:	2000      	movs	r0, #0
 8002318:	f7ff ffd0 	bl	80022bc <HAL_InitTick>
  HAL_MspInit();
 800231c:	f7fe ff0e 	bl	800113c <HAL_MspInit>
}
 8002320:	2000      	movs	r0, #0
 8002322:	bd08      	pop	{r3, pc}
 8002324:	40022000 	.word	0x40022000

08002328 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002328:	4a03      	ldr	r2, [pc, #12]	; (8002338 <HAL_IncTick+0x10>)
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <HAL_IncTick+0x14>)
 800232c:	6811      	ldr	r1, [r2, #0]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	440b      	add	r3, r1
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	200006dc 	.word	0x200006dc
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002340:	4b01      	ldr	r3, [pc, #4]	; (8002348 <HAL_GetTick+0x8>)
 8002342:	6818      	ldr	r0, [r3, #0]
}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	200006dc 	.word	0x200006dc

0800234c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff fff6 	bl	8002340 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002354:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002356:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002358:	d002      	beq.n	8002360 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <HAL_Delay+0x20>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002360:	f7ff ffee 	bl	8002340 <HAL_GetTick>
 8002364:	1b40      	subs	r0, r0, r5
 8002366:	42a0      	cmp	r0, r4
 8002368:	d3fa      	bcc.n	8002360 <HAL_Delay+0x14>
  {
  }
}
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	20000004 	.word	0x20000004

08002370 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002370:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4906      	ldr	r1, [pc, #24]	; (8002390 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002376:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002378:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800237a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800238c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002394:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002396:	b500      	push	{lr}
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239e:	f1c3 0e07 	rsb	lr, r3, #7
 80023a2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023aa:	bf28      	it	cs
 80023ac:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b0:	f1bc 0f06 	cmp.w	ip, #6
 80023b4:	d91b      	bls.n	80023ee <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b6:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023bc:	fa0c fc03 	lsl.w	ip, ip, r3
 80023c0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	f04f 3cff 	mov.w	ip, #4294967295
 80023c8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80023cc:	ea21 010c 	bic.w	r1, r1, ip
 80023d0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80023d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80023d8:	db0c      	blt.n	80023f4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	0109      	lsls	r1, r1, #4
 80023dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80023e0:	b2c9      	uxtb	r1, r1
 80023e2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80023e6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80023ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80023ee:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f0:	4613      	mov	r3, r2
 80023f2:	e7e7      	b.n	80023c4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_NVIC_SetPriority+0x78>)
 80023f6:	f000 000f 	and.w	r0, r0, #15
 80023fa:	0109      	lsls	r1, r1, #4
 80023fc:	b2c9      	uxtb	r1, r1
 80023fe:	4403      	add	r3, r0
 8002400:	7619      	strb	r1, [r3, #24]
 8002402:	f85d fb04 	ldr.w	pc, [sp], #4
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00
 800240c:	e000ecfc 	.word	0xe000ecfc

08002410 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002410:	2800      	cmp	r0, #0
 8002412:	db07      	blt.n	8002424 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002414:	2301      	movs	r3, #1
 8002416:	f000 011f 	and.w	r1, r0, #31
 800241a:	4a03      	ldr	r2, [pc, #12]	; (8002428 <HAL_NVIC_EnableIRQ+0x18>)
 800241c:	0940      	lsrs	r0, r0, #5
 800241e:	408b      	lsls	r3, r1
 8002420:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	3801      	subs	r0, #1
 800242e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002432:	d20f      	bcs.n	8002454 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002434:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243e:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002440:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	4c05      	ldr	r4, [pc, #20]	; (8002458 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002444:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800244e:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002450:	6119      	str	r1, [r3, #16]
 8002452:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002454:	2001      	movs	r0, #1
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800245c:	b340      	cbz	r0, 80024b0 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800245e:	4603      	mov	r3, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002460:	c805      	ldmia	r0, {r0, r2}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002462:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 8002466:	b430      	push	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002468:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 800246a:	6899      	ldr	r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800246c:	68dd      	ldr	r5, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800246e:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002470:	4910      	ldr	r1, [pc, #64]	; (80024b4 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002472:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002474:	4d10      	ldr	r5, [pc, #64]	; (80024b8 <HAL_DMA_Init+0x5c>)
 8002476:	4401      	add	r1, r0
 8002478:	fba5 5101 	umull	r5, r1, r5, r1
 800247c:	0909      	lsrs	r1, r1, #4
 800247e:	0089      	lsls	r1, r1, #2
 8002480:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002482:	6919      	ldr	r1, [r3, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002484:	699d      	ldr	r5, [r3, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002486:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002488:	6959      	ldr	r1, [r3, #20]
 800248a:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 800248c:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002490:	69dd      	ldr	r5, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002492:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8002496:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 800249a:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 800249c:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 800249e:	4907      	ldr	r1, [pc, #28]	; (80024bc <HAL_DMA_Init+0x60>)
 80024a0:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 80024a2:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 80024a4:	f8a3 c020 	strh.w	ip, [r3, #32]

  return HAL_OK;
 80024a8:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024aa:	639c      	str	r4, [r3, #56]	; 0x38
}
 80024ac:	bc30      	pop	{r4, r5}
 80024ae:	4770      	bx	lr
    return HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
}
 80024b2:	4770      	bx	lr
 80024b4:	bffdfff8 	.word	0xbffdfff8
 80024b8:	cccccccd 	.word	0xcccccccd
 80024bc:	40020000 	.word	0x40020000

080024c0 <HAL_DMA_IRQHandler>:
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024c0:	2204      	movs	r2, #4
{
 80024c2:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024c4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024c6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024c8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80024ca:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024cc:	408a      	lsls	r2, r1
 80024ce:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80024d0:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80024d2:	d01f      	beq.n	8002514 <HAL_DMA_IRQHandler+0x54>
 80024d4:	076a      	lsls	r2, r5, #29
 80024d6:	d51d      	bpl.n	8002514 <HAL_DMA_IRQHandler+0x54>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	0691      	lsls	r1, r2, #26
 80024dc:	d403      	bmi.n	80024e6 <HAL_DMA_IRQHandler+0x26>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	f022 0204 	bic.w	r2, r2, #4
 80024e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024e6:	4a3e      	ldr	r2, [pc, #248]	; (80025e0 <HAL_DMA_IRQHandler+0x120>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d050      	beq.n	800258e <HAL_DMA_IRQHandler+0xce>
 80024ec:	3214      	adds	r2, #20
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d060      	beq.n	80025b4 <HAL_DMA_IRQHandler+0xf4>
 80024f2:	3214      	adds	r2, #20
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d067      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x108>
 80024f8:	3214      	adds	r2, #20
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d06a      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x114>
 80024fe:	3214      	adds	r2, #20
 8002500:	4293      	cmp	r3, r2
 8002502:	d05c      	beq.n	80025be <HAL_DMA_IRQHandler+0xfe>
 8002504:	3214      	adds	r2, #20
 8002506:	4293      	cmp	r3, r2
 8002508:	bf0c      	ite	eq
 800250a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800250e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002512:	e03d      	b.n	8002590 <HAL_DMA_IRQHandler+0xd0>
      hdma->XferHalfCpltCallback(hdma);
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002514:	2202      	movs	r2, #2
 8002516:	408a      	lsls	r2, r1
 8002518:	4222      	tst	r2, r4
 800251a:	d022      	beq.n	8002562 <HAL_DMA_IRQHandler+0xa2>
 800251c:	07aa      	lsls	r2, r5, #30
 800251e:	d520      	bpl.n	8002562 <HAL_DMA_IRQHandler+0xa2>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	0691      	lsls	r1, r2, #26
 8002524:	d406      	bmi.n	8002534 <HAL_DMA_IRQHandler+0x74>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002526:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	f022 020a 	bic.w	r2, r2, #10
 800252e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002530:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002534:	4a2a      	ldr	r2, [pc, #168]	; (80025e0 <HAL_DMA_IRQHandler+0x120>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d031      	beq.n	800259e <HAL_DMA_IRQHandler+0xde>
 800253a:	3214      	adds	r2, #20
 800253c:	4293      	cmp	r3, r2
 800253e:	d041      	beq.n	80025c4 <HAL_DMA_IRQHandler+0x104>
 8002540:	3214      	adds	r2, #20
 8002542:	4293      	cmp	r3, r2
 8002544:	d043      	beq.n	80025ce <HAL_DMA_IRQHandler+0x10e>
 8002546:	3214      	adds	r2, #20
 8002548:	4293      	cmp	r3, r2
 800254a:	d035      	beq.n	80025b8 <HAL_DMA_IRQHandler+0xf8>
 800254c:	3214      	adds	r2, #20
 800254e:	4293      	cmp	r3, r2
 8002550:	d043      	beq.n	80025da <HAL_DMA_IRQHandler+0x11a>
 8002552:	3214      	adds	r2, #20
 8002554:	4293      	cmp	r3, r2
 8002556:	bf0c      	ite	eq
 8002558:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800255c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002560:	e01e      	b.n	80025a0 <HAL_DMA_IRQHandler+0xe0>
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002562:	2208      	movs	r2, #8
 8002564:	408a      	lsls	r2, r1
 8002566:	4222      	tst	r2, r4
 8002568:	d017      	beq.n	800259a <HAL_DMA_IRQHandler+0xda>
 800256a:	072a      	lsls	r2, r5, #28
 800256c:	d515      	bpl.n	800259a <HAL_DMA_IRQHandler+0xda>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256e:	681a      	ldr	r2, [r3, #0]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002570:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002574:	f022 020e 	bic.w	r2, r2, #14
 8002578:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800257a:	2301      	movs	r3, #1

    if (hdma->XferErrorCallback != NULL)
 800257c:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800257e:	fa03 f101 	lsl.w	r1, r3, r1
 8002582:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002584:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002586:	8404      	strh	r4, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002588:	b13a      	cbz	r2, 800259a <HAL_DMA_IRQHandler+0xda>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 800258a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800258c:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800258e:	2304      	movs	r3, #4
 8002590:	4914      	ldr	r1, [pc, #80]	; (80025e4 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8002592:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002594:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002596:	2a00      	cmp	r2, #0
 8002598:	d1f7      	bne.n	800258a <HAL_DMA_IRQHandler+0xca>
}
 800259a:	bc70      	pop	{r4, r5, r6}
 800259c:	4770      	bx	lr
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800259e:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 80025a0:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025a2:	4c10      	ldr	r4, [pc, #64]	; (80025e4 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 80025a4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025a6:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 80025a8:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80025ac:	2a00      	cmp	r2, #0
 80025ae:	d0f4      	beq.n	800259a <HAL_DMA_IRQHandler+0xda>
}
 80025b0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80025b2:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025b4:	2340      	movs	r3, #64	; 0x40
 80025b6:	e7eb      	b.n	8002590 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025bc:	e7f0      	b.n	80025a0 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025c2:	e7e5      	b.n	8002590 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025c4:	2320      	movs	r3, #32
 80025c6:	e7eb      	b.n	80025a0 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025cc:	e7e0      	b.n	8002590 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d2:	e7e5      	b.n	80025a0 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025d8:	e7da      	b.n	8002590 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80025da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025de:	e7df      	b.n	80025a0 <HAL_DMA_IRQHandler+0xe0>
 80025e0:	40020008 	.word	0x40020008
 80025e4:	40020000 	.word	0x40020000

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ec:	680e      	ldr	r6, [r1, #0]
{
 80025ee:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f0:	2e00      	cmp	r6, #0
 80025f2:	f000 80b5 	beq.w	8002760 <HAL_GPIO_Init+0x178>
 80025f6:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025f8:	4f7a      	ldr	r7, [pc, #488]	; (80027e4 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 80025fa:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 80025fc:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025fe:	4d7a      	ldr	r5, [pc, #488]	; (80027e8 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8002600:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 80027ec <HAL_GPIO_Init+0x204>
 8002604:	e006      	b.n	8002614 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8002606:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002608:	fa36 f403 	lsrs.w	r4, r6, r3
 800260c:	f102 0204 	add.w	r2, r2, #4
 8002610:	f000 80a6 	beq.w	8002760 <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 8002614:	2401      	movs	r4, #1
 8002616:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8002618:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261c:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8002620:	d1f1      	bne.n	8002606 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8002622:	684e      	ldr	r6, [r1, #4]
 8002624:	2e12      	cmp	r6, #18
 8002626:	f200 809e 	bhi.w	8002766 <HAL_GPIO_Init+0x17e>
 800262a:	2e12      	cmp	r6, #18
 800262c:	d81a      	bhi.n	8002664 <HAL_GPIO_Init+0x7c>
 800262e:	e8df f006 	tbb	[pc, r6]
 8002632:	b9a7      	.short	0xb9a7
 8002634:	1919ceb5 	.word	0x1919ceb5
 8002638:	19191919 	.word	0x19191919
 800263c:	19191919 	.word	0x19191919
 8002640:	b1191919 	.word	0xb1191919
 8002644:	bc          	.byte	0xbc
 8002645:	00          	.byte	0x00
 8002646:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80027f0 <HAL_GPIO_Init+0x208>
 800264a:	4576      	cmp	r6, lr
 800264c:	f000 8098 	beq.w	8002780 <HAL_GPIO_Init+0x198>
 8002650:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8002654:	4576      	cmp	r6, lr
 8002656:	f000 8093 	beq.w	8002780 <HAL_GPIO_Init+0x198>
 800265a:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800265e:	4576      	cmp	r6, lr
 8002660:	f000 808e 	beq.w	8002780 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002664:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8002668:	bf9c      	itt	ls
 800266a:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800266c:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800266e:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002672:	bf84      	itt	hi
 8002674:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002678:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800267c:	f8de 4000 	ldr.w	r4, [lr]
 8002680:	fa0a f90b 	lsl.w	r9, sl, fp
 8002684:	fa06 fb0b 	lsl.w	fp, r6, fp
 8002688:	ea24 040b 	bic.w	r4, r4, fp
 800268c:	ea44 0409 	orr.w	r4, r4, r9
 8002690:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002694:	684c      	ldr	r4, [r1, #4]
 8002696:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800269a:	d079      	beq.n	8002790 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800269c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026a0:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026a4:	f04e 0e01 	orr.w	lr, lr, #1
 80026a8:	f8c7 e018 	str.w	lr, [r7, #24]
 80026ac:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026b0:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026b4:	f00e 0e01 	and.w	lr, lr, #1
 80026b8:	f8cd e004 	str.w	lr, [sp, #4]
 80026bc:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80026c0:	f023 0e03 	bic.w	lr, r3, #3
 80026c4:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 80026c8:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 80026cc:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026d0:	fa06 f609 	lsl.w	r6, r6, r9
 80026d4:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026d8:	f8df b118 	ldr.w	fp, [pc, #280]	; 80027f4 <HAL_GPIO_Init+0x20c>
 80026dc:	4558      	cmp	r0, fp
 80026de:	d013      	beq.n	8002708 <HAL_GPIO_Init+0x120>
 80026e0:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 80026e4:	4558      	cmp	r0, fp
 80026e6:	d06b      	beq.n	80027c0 <HAL_GPIO_Init+0x1d8>
 80026e8:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80027f8 <HAL_GPIO_Init+0x210>
 80026ec:	4558      	cmp	r0, fp
 80026ee:	d060      	beq.n	80027b2 <HAL_GPIO_Init+0x1ca>
 80026f0:	f8df b108 	ldr.w	fp, [pc, #264]	; 80027fc <HAL_GPIO_Init+0x214>
 80026f4:	4558      	cmp	r0, fp
 80026f6:	bf0c      	ite	eq
 80026f8:	f04f 0b03 	moveq.w	fp, #3
 80026fc:	f04f 0b04 	movne.w	fp, #4
 8002700:	fa0b f909 	lsl.w	r9, fp, r9
 8002704:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002708:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800270c:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800270e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002712:	bf14      	ite	ne
 8002714:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002718:	ea26 060c 	biceq.w	r6, r6, ip
 800271c:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800271e:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002720:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002724:	bf14      	ite	ne
 8002726:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800272a:	ea26 060c 	biceq.w	r6, r6, ip
 800272e:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002730:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002732:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002736:	bf14      	ite	ne
 8002738:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800273c:	ea26 060c 	biceq.w	r6, r6, ip
 8002740:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002742:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002746:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002748:	d01f      	beq.n	800278a <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 800274a:	ea44 040c 	orr.w	r4, r4, ip
 800274e:	60ec      	str	r4, [r5, #12]
 8002750:	680e      	ldr	r6, [r1, #0]
	position++;
 8002752:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002754:	fa36 f403 	lsrs.w	r4, r6, r3
 8002758:	f102 0204 	add.w	r2, r2, #4
 800275c:	f47f af5a 	bne.w	8002614 <HAL_GPIO_Init+0x2c>
  }
}
 8002760:	b003      	add	sp, #12
 8002762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8002766:	4546      	cmp	r6, r8
 8002768:	d00a      	beq.n	8002780 <HAL_GPIO_Init+0x198>
 800276a:	f67f af6c 	bls.w	8002646 <HAL_GPIO_Init+0x5e>
 800276e:	f8df e090 	ldr.w	lr, [pc, #144]	; 8002800 <HAL_GPIO_Init+0x218>
 8002772:	4576      	cmp	r6, lr
 8002774:	d004      	beq.n	8002780 <HAL_GPIO_Init+0x198>
 8002776:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 800277a:	4576      	cmp	r6, lr
 800277c:	f47f af72 	bne.w	8002664 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002780:	688e      	ldr	r6, [r1, #8]
 8002782:	bb3e      	cbnz	r6, 80027d4 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002784:	f04f 0a04 	mov.w	sl, #4
 8002788:	e76c      	b.n	8002664 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800278a:	ea24 040c 	bic.w	r4, r4, ip
 800278e:	60ec      	str	r4, [r5, #12]
 8002790:	680e      	ldr	r6, [r1, #0]
 8002792:	e738      	b.n	8002606 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002794:	68cc      	ldr	r4, [r1, #12]
 8002796:	f104 0a04 	add.w	sl, r4, #4
          break;
 800279a:	e763      	b.n	8002664 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800279c:	68cc      	ldr	r4, [r1, #12]
 800279e:	f104 0a08 	add.w	sl, r4, #8
          break;
 80027a2:	e75f      	b.n	8002664 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027a4:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 80027a8:	e75c      	b.n	8002664 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027aa:	68cc      	ldr	r4, [r1, #12]
 80027ac:	f104 0a0c 	add.w	sl, r4, #12
          break;
 80027b0:	e758      	b.n	8002664 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027b2:	f04f 0b02 	mov.w	fp, #2
 80027b6:	fa0b f909 	lsl.w	r9, fp, r9
 80027ba:	ea46 0609 	orr.w	r6, r6, r9
 80027be:	e7a3      	b.n	8002708 <HAL_GPIO_Init+0x120>
 80027c0:	f04f 0b01 	mov.w	fp, #1
 80027c4:	fa0b f909 	lsl.w	r9, fp, r9
 80027c8:	ea46 0609 	orr.w	r6, r6, r9
 80027cc:	e79c      	b.n	8002708 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 80027ce:	f04f 0a00 	mov.w	sl, #0
 80027d2:	e747      	b.n	8002664 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027d4:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d6:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 80027da:	bf0c      	ite	eq
 80027dc:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 80027de:	6144      	strne	r4, [r0, #20]
 80027e0:	e740      	b.n	8002664 <HAL_GPIO_Init+0x7c>
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010400 	.word	0x40010400
 80027ec:	10220000 	.word	0x10220000
 80027f0:	10120000 	.word	0x10120000
 80027f4:	40010800 	.word	0x40010800
 80027f8:	40011000 	.word	0x40011000
 80027fc:	40011400 	.word	0x40011400
 8002800:	10310000 	.word	0x10310000

08002804 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002804:	6883      	ldr	r3, [r0, #8]
 8002806:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002808:	bf14      	ite	ne
 800280a:	2001      	movne	r0, #1
 800280c:	2000      	moveq	r0, #0
 800280e:	4770      	bx	lr

08002810 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002810:	b902      	cbnz	r2, 8002814 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002812:	0409      	lsls	r1, r1, #16
 8002814:	6101      	str	r1, [r0, #16]
  }
}
 8002816:	4770      	bx	lr

08002818 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800281c:	4680      	mov	r8, r0
 800281e:	460e      	mov	r6, r1
 8002820:	4617      	mov	r7, r2
 8002822:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002824:	f8d8 4000 	ldr.w	r4, [r8]
 8002828:	e004      	b.n	8002834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x1c>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800282a:	6965      	ldr	r5, [r4, #20]
 800282c:	056a      	lsls	r2, r5, #21
 800282e:	d409      	bmi.n	8002844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002830:	1c7b      	adds	r3, r7, #1
 8002832:	d121      	bne.n	8002878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002834:	6960      	ldr	r0, [r4, #20]
 8002836:	ea26 0000 	bic.w	r0, r6, r0
 800283a:	b280      	uxth	r0, r0
 800283c:	2800      	cmp	r0, #0
 800283e:	d1f4      	bne.n	800282a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x12>
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
}
 8002840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002844:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002846:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800284a:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	6823      	ldr	r3, [r4, #0]
      return HAL_ERROR;
 800284e:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002854:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002856:	6165      	str	r5, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002858:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800285c:	f888 103d 	strb.w	r1, [r8, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002860:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002864:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002868:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
}
 8002874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002878:	f7ff fd62 	bl	8002340 <HAL_GetTick>
 800287c:	eba0 0009 	sub.w	r0, r0, r9
 8002880:	42b8      	cmp	r0, r7
 8002882:	d801      	bhi.n	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x70>
 8002884:	2f00      	cmp	r7, #0
 8002886:	d1cd      	bne.n	8002824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002888:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800288a:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800288c:	f8c8 2030 	str.w	r2, [r8, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002890:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002894:	f888 203e 	strb.w	r2, [r8, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002898:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 800289c:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800289e:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80028a2:	f888 203c 	strb.w	r2, [r8, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a6:	f8c8 3040 	str.w	r3, [r8, #64]	; 0x40
        return HAL_ERROR;
 80028aa:	e7c9      	b.n	8002840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x28>

080028ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	4606      	mov	r6, r0
 80028b0:	460d      	mov	r5, r1
 80028b2:	4617      	mov	r7, r2

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028b4:	e008      	b.n	80028c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028b6:	6962      	ldr	r2, [r4, #20]
 80028b8:	06d2      	lsls	r2, r2, #27
 80028ba:	d41b      	bmi.n	80028f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>

      return HAL_ERROR;
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028bc:	f7ff fd40 	bl	8002340 <HAL_GetTick>
 80028c0:	1bc0      	subs	r0, r0, r7
 80028c2:	42a8      	cmp	r0, r5
 80028c4:	d807      	bhi.n	80028d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 80028c6:	b135      	cbz	r5, 80028d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028c8:	6834      	ldr	r4, [r6, #0]
 80028ca:	6963      	ldr	r3, [r4, #20]
 80028cc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80028d0:	d0f1      	beq.n	80028b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80028d2:	2000      	movs	r0, #0
}
 80028d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028d6:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80028d8:	2320      	movs	r3, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028da:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028dc:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e0:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e4:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80028e6:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028ea:	f043 0320 	orr.w	r3, r3, #32
      return HAL_ERROR;
 80028ee:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028f0:	6433      	str	r3, [r6, #64]	; 0x40
}
 80028f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f4:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 80028f8:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028fa:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028fc:	6333      	str	r3, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028fe:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002902:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002906:	6c32      	ldr	r2, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002908:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
      return HAL_ERROR;
 800290c:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800290e:	6432      	str	r2, [r6, #64]	; 0x40
}
 8002910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002912:	bf00      	nop

08002914 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002916:	4605      	mov	r5, r0
 8002918:	460e      	mov	r6, r1
 800291a:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800291c:	682c      	ldr	r4, [r5, #0]
 800291e:	e001      	b.n	8002924 <I2C_WaitOnTXEFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8002920:	1c73      	adds	r3, r6, #1
 8002922:	d119      	bne.n	8002958 <I2C_WaitOnTXEFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002924:	6963      	ldr	r3, [r4, #20]
 8002926:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800292a:	d113      	bne.n	8002954 <I2C_WaitOnTXEFlagUntilTimeout+0x40>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800292c:	6960      	ldr	r0, [r4, #20]
 800292e:	0542      	lsls	r2, r0, #21
 8002930:	d5f6      	bpl.n	8002920 <I2C_WaitOnTXEFlagUntilTimeout+0xc>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002932:	f46f 6180 	mvn.w	r1, #1024	; 0x400

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002936:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002938:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800293a:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800293c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002940:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002944:	6c2a      	ldr	r2, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002946:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800294a:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 800294e:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002950:	642a      	str	r2, [r5, #64]	; 0x40
}
 8002952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8002954:	2000      	movs	r0, #0
}
 8002956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002958:	f7ff fcf2 	bl	8002340 <HAL_GetTick>
 800295c:	1bc0      	subs	r0, r0, r7
 800295e:	42b0      	cmp	r0, r6
 8002960:	d801      	bhi.n	8002966 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
 8002962:	2e00      	cmp	r6, #0
 8002964:	d1da      	bne.n	800291c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002966:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002968:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800296a:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800296c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002970:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002976:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800297a:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800297e:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002984 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002986:	4605      	mov	r5, r0
 8002988:	460e      	mov	r6, r1
 800298a:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800298c:	682c      	ldr	r4, [r5, #0]
 800298e:	e001      	b.n	8002994 <I2C_WaitOnBTFFlagUntilTimeout+0x10>
    if (Timeout != HAL_MAX_DELAY)
 8002990:	1c73      	adds	r3, r6, #1
 8002992:	d119      	bne.n	80029c8 <I2C_WaitOnBTFFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002994:	6963      	ldr	r3, [r4, #20]
 8002996:	f013 0304 	ands.w	r3, r3, #4
 800299a:	d113      	bne.n	80029c4 <I2C_WaitOnBTFFlagUntilTimeout+0x40>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800299c:	6960      	ldr	r0, [r4, #20]
 800299e:	0542      	lsls	r2, r0, #21
 80029a0:	d5f6      	bpl.n	8002990 <I2C_WaitOnBTFFlagUntilTimeout+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80029a6:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029a8:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80029aa:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029ac:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b0:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029b4:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80029b6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ba:	f042 0204 	orr.w	r2, r2, #4
      return HAL_ERROR;
 80029be:	2001      	movs	r0, #1
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029c0:	642a      	str	r2, [r5, #64]	; 0x40
}
 80029c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80029c4:	2000      	movs	r0, #0
}
 80029c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c8:	f7ff fcba 	bl	8002340 <HAL_GetTick>
 80029cc:	1bc0      	subs	r0, r0, r7
 80029ce:	42b0      	cmp	r0, r6
 80029d0:	d801      	bhi.n	80029d6 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
 80029d2:	2e00      	cmp	r6, #0
 80029d4:	d1da      	bne.n	800298c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d6:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d8:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029da:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029dc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e0:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80029e6:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ea:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80029ee:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	642b      	str	r3, [r5, #64]	; 0x40
}
 80029f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029f4 <I2C_RequestMemoryWrite>:
{
 80029f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f8:	6805      	ldr	r5, [r0, #0]
{
 80029fa:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029fc:	682b      	ldr	r3, [r5, #0]
{
 80029fe:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002a04:	4607      	mov	r7, r0
 8002a06:	e9dd 6a0c 	ldrd	r6, sl, [sp, #48]	; 0x30
 8002a0a:	4688      	mov	r8, r1
 8002a0c:	4691      	mov	r9, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a0e:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a10:	e001      	b.n	8002a16 <I2C_RequestMemoryWrite+0x22>
    if (Timeout != HAL_MAX_DELAY)
 8002a12:	1c72      	adds	r2, r6, #1
 8002a14:	d110      	bne.n	8002a38 <I2C_RequestMemoryWrite+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a16:	696c      	ldr	r4, [r5, #20]
 8002a18:	07e3      	lsls	r3, r4, #31
 8002a1a:	d5fa      	bpl.n	8002a12 <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a1c:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8002a20:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a22:	4653      	mov	r3, sl
 8002a24:	4632      	mov	r2, r6
 8002a26:	4638      	mov	r0, r7
 8002a28:	4927      	ldr	r1, [pc, #156]	; (8002ac8 <I2C_RequestMemoryWrite+0xd4>)
 8002a2a:	f7ff fef5 	bl	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a2e:	b168      	cbz	r0, 8002a4c <I2C_RequestMemoryWrite+0x58>
    return HAL_ERROR;
 8002a30:	2001      	movs	r0, #1
}
 8002a32:	b003      	add	sp, #12
 8002a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a38:	f7ff fc82 	bl	8002340 <HAL_GetTick>
 8002a3c:	eba0 000a 	sub.w	r0, r0, sl
 8002a40:	4286      	cmp	r6, r0
 8002a42:	d331      	bcc.n	8002aa8 <I2C_RequestMemoryWrite+0xb4>
 8002a44:	2e00      	cmp	r6, #0
 8002a46:	d02f      	beq.n	8002aa8 <I2C_RequestMemoryWrite+0xb4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a48:	683d      	ldr	r5, [r7, #0]
 8002a4a:	e7e4      	b.n	8002a16 <I2C_RequestMemoryWrite+0x22>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	9001      	str	r0, [sp, #4]
 8002a50:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	4652      	mov	r2, sl
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a54:	9101      	str	r1, [sp, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a58:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5a:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5c:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5e:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a60:	f7ff ff58 	bl	8002914 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a64:	b938      	cbnz	r0, 8002a76 <I2C_RequestMemoryWrite+0x82>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a66:	f1bb 0f01 	cmp.w	fp, #1
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a6a:	683b      	ldr	r3, [r7, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a6c:	d10d      	bne.n	8002a8a <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a6e:	fa5f f289 	uxtb.w	r2, r9
 8002a72:	611a      	str	r2, [r3, #16]
 8002a74:	e7dd      	b.n	8002a32 <I2C_RequestMemoryWrite+0x3e>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d1d9      	bne.n	8002a30 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	683a      	ldr	r2, [r7, #0]
      return HAL_ERROR;
 8002a7e:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a80:	6813      	ldr	r3, [r2, #0]
 8002a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e7d3      	b.n	8002a32 <I2C_RequestMemoryWrite+0x3e>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a8a:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8002a8e:	6118      	str	r0, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a90:	4652      	mov	r2, sl
 8002a92:	4631      	mov	r1, r6
 8002a94:	4638      	mov	r0, r7
 8002a96:	f7ff ff3d 	bl	8002914 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a9a:	2800      	cmp	r0, #0
 8002a9c:	d1eb      	bne.n	8002a76 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	fa5f f389 	uxtb.w	r3, r9
 8002aa4:	6113      	str	r3, [r2, #16]
 8002aa6:	e7c4      	b.n	8002a32 <I2C_RequestMemoryWrite+0x3e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002aa8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002aaa:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002aac:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002aae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ab2:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    return HAL_ERROR;
 8002ab8:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aba:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8002abe:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40
        return HAL_ERROR;
 8002ac4:	e7b5      	b.n	8002a32 <I2C_RequestMemoryWrite+0x3e>
 8002ac6:	bf00      	nop
 8002ac8:	00010002 	.word	0x00010002

08002acc <I2C_RequestMemoryRead>:
{
 8002acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad0:	6805      	ldr	r5, [r0, #0]
{
 8002ad2:	469b      	mov	fp, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad4:	682b      	ldr	r3, [r5, #0]
{
 8002ad6:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002adc:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ade:	682b      	ldr	r3, [r5, #0]
{
 8002ae0:	4607      	mov	r7, r0
 8002ae2:	e9dd 6a0c 	ldrd	r6, sl, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002aea:	4688      	mov	r8, r1
 8002aec:	4691      	mov	r9, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aee:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af0:	e001      	b.n	8002af6 <I2C_RequestMemoryRead+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8002af2:	1c70      	adds	r0, r6, #1
 8002af4:	d112      	bne.n	8002b1c <I2C_RequestMemoryRead+0x50>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af6:	696c      	ldr	r4, [r5, #20]
 8002af8:	07e1      	lsls	r1, r4, #31
 8002afa:	d5fa      	bpl.n	8002af2 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002afc:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8002b00:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b02:	4632      	mov	r2, r6
 8002b04:	4653      	mov	r3, sl
 8002b06:	4638      	mov	r0, r7
 8002b08:	493c      	ldr	r1, [pc, #240]	; (8002bfc <I2C_RequestMemoryRead+0x130>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b0a:	fa5f f888 	uxtb.w	r8, r8
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b0e:	f7ff fe83 	bl	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b12:	b168      	cbz	r0, 8002b30 <I2C_RequestMemoryRead+0x64>
    return HAL_ERROR;
 8002b14:	2001      	movs	r0, #1
}
 8002b16:	b003      	add	sp, #12
 8002b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1c:	f7ff fc10 	bl	8002340 <HAL_GetTick>
 8002b20:	eba0 000a 	sub.w	r0, r0, sl
 8002b24:	4286      	cmp	r6, r0
 8002b26:	d34f      	bcc.n	8002bc8 <I2C_RequestMemoryRead+0xfc>
 8002b28:	2e00      	cmp	r6, #0
 8002b2a:	d04d      	beq.n	8002bc8 <I2C_RequestMemoryRead+0xfc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b2c:	683d      	ldr	r5, [r7, #0]
 8002b2e:	e7e2      	b.n	8002af6 <I2C_RequestMemoryRead+0x2a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	9001      	str	r0, [sp, #4]
 8002b34:	6959      	ldr	r1, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b36:	4652      	mov	r2, sl
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b38:	9101      	str	r1, [sp, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b3c:	4631      	mov	r1, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3e:	9301      	str	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b40:	4638      	mov	r0, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b42:	9b01      	ldr	r3, [sp, #4]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b44:	f7ff fee6 	bl	8002914 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b48:	bb20      	cbnz	r0, 8002b94 <I2C_RequestMemoryRead+0xc8>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b4a:	f1bb 0f01 	cmp.w	fp, #1
 8002b4e:	d12b      	bne.n	8002ba8 <I2C_RequestMemoryRead+0xdc>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	fa5f f289 	uxtb.w	r2, r9
 8002b56:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b58:	4652      	mov	r2, sl
 8002b5a:	4631      	mov	r1, r6
 8002b5c:	4638      	mov	r0, r7
 8002b5e:	f7ff fed9 	bl	8002914 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b62:	b9b8      	cbnz	r0, 8002b94 <I2C_RequestMemoryRead+0xc8>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	680b      	ldr	r3, [r1, #0]
 8002b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6c:	600b      	str	r3, [r1, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b6e:	e001      	b.n	8002b74 <I2C_RequestMemoryRead+0xa8>
    if (Timeout != HAL_MAX_DELAY)
 8002b70:	1c72      	adds	r2, r6, #1
 8002b72:	d138      	bne.n	8002be6 <I2C_RequestMemoryRead+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b74:	694b      	ldr	r3, [r1, #20]
 8002b76:	07db      	lsls	r3, r3, #31
 8002b78:	d5fa      	bpl.n	8002b70 <I2C_RequestMemoryRead+0xa4>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b7a:	f048 0401 	orr.w	r4, r8, #1
 8002b7e:	610c      	str	r4, [r1, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b80:	4653      	mov	r3, sl
 8002b82:	4632      	mov	r2, r6
 8002b84:	4638      	mov	r0, r7
 8002b86:	491d      	ldr	r1, [pc, #116]	; (8002bfc <I2C_RequestMemoryRead+0x130>)
 8002b88:	f7ff fe46 	bl	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8002b8c:	3800      	subs	r0, #0
 8002b8e:	bf18      	it	ne
 8002b90:	2001      	movne	r0, #1
 8002b92:	e7c0      	b.n	8002b16 <I2C_RequestMemoryRead+0x4a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d1bc      	bne.n	8002b14 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	683a      	ldr	r2, [r7, #0]
    return HAL_ERROR;
 8002b9c:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9e:	6813      	ldr	r3, [r2, #0]
 8002ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e7b6      	b.n	8002b16 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8002bae:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb0:	4631      	mov	r1, r6
 8002bb2:	4652      	mov	r2, sl
 8002bb4:	4638      	mov	r0, r7
 8002bb6:	f7ff fead 	bl	8002914 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	d1ea      	bne.n	8002b94 <I2C_RequestMemoryRead+0xc8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	fa5f f389 	uxtb.w	r3, r9
 8002bc4:	6113      	str	r3, [r2, #16]
 8002bc6:	e7c7      	b.n	8002b58 <I2C_RequestMemoryRead+0x8c>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bc8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bca:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bcc:	633a      	str	r2, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bd2:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    return HAL_ERROR;
 8002bd8:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bda:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8002bde:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40
        return HAL_ERROR;
 8002be4:	e797      	b.n	8002b16 <I2C_RequestMemoryRead+0x4a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be6:	f7ff fbab 	bl	8002340 <HAL_GetTick>
 8002bea:	eba0 030a 	sub.w	r3, r0, sl
 8002bee:	429e      	cmp	r6, r3
 8002bf0:	d3ea      	bcc.n	8002bc8 <I2C_RequestMemoryRead+0xfc>
 8002bf2:	2e00      	cmp	r6, #0
 8002bf4:	d0e8      	beq.n	8002bc8 <I2C_RequestMemoryRead+0xfc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf6:	6839      	ldr	r1, [r7, #0]
 8002bf8:	e7bc      	b.n	8002b74 <I2C_RequestMemoryRead+0xa8>
 8002bfa:	bf00      	nop
 8002bfc:	00010002 	.word	0x00010002

08002c00 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002c00:	2800      	cmp	r0, #0
 8002c02:	f000 80b1 	beq.w	8002d68 <HAL_I2C_Init+0x168>
{
 8002c06:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c08:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c0c:	4604      	mov	r4, r0
 8002c0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8090 	beq.w	8002d38 <HAL_I2C_Init+0x138>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c18:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002c1a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002c20:	6813      	ldr	r3, [r2, #0]
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c28:	f000 ffaa 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c2c:	6863      	ldr	r3, [r4, #4]
 8002c2e:	494f      	ldr	r1, [pc, #316]	; (8002d6c <HAL_I2C_Init+0x16c>)
 8002c30:	428b      	cmp	r3, r1
 8002c32:	d84f      	bhi.n	8002cd4 <HAL_I2C_Init+0xd4>
 8002c34:	4a4e      	ldr	r2, [pc, #312]	; (8002d70 <HAL_I2C_Init+0x170>)
 8002c36:	4290      	cmp	r0, r2
 8002c38:	d97c      	bls.n	8002d34 <HAL_I2C_Init+0x134>
  freqrange = I2C_FREQRANGE(pclk1);
 8002c3a:	4d4e      	ldr	r5, [pc, #312]	; (8002d74 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c3c:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8002c3e:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c42:	1e43      	subs	r3, r0, #1
 8002c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c48:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c4c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002c4e:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c50:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c52:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c56:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002c5a:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8002c5e:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c60:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c62:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c64:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002c68:	ea41 010c 	orr.w	r1, r1, ip
 8002c6c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c6e:	69d1      	ldr	r1, [r2, #28]
 8002c70:	ea13 0f0e 	tst.w	r3, lr
 8002c74:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002c78:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002c7c:	d161      	bne.n	8002d42 <HAL_I2C_Init+0x142>
 8002c7e:	2304      	movs	r3, #4
 8002c80:	430b      	orrs	r3, r1
 8002c82:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c84:	6811      	ldr	r1, [r2, #0]
 8002c86:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002c8a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002c8e:	4303      	orrs	r3, r0
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c94:	6891      	ldr	r1, [r2, #8]
 8002c96:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002c9a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002c9e:	4303      	orrs	r3, r0
 8002ca0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ca8:	68d0      	ldr	r0, [r2, #12]
 8002caa:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8002cae:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	4303      	orrs	r3, r0
 8002cb6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002cb8:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cba:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc4:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cca:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ccc:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8002cd0:	4608      	mov	r0, r1
}
 8002cd2:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cd4:	4a28      	ldr	r2, [pc, #160]	; (8002d78 <HAL_I2C_Init+0x178>)
 8002cd6:	4290      	cmp	r0, r2
 8002cd8:	d92c      	bls.n	8002d34 <HAL_I2C_Init+0x134>
  freqrange = I2C_FREQRANGE(pclk1);
 8002cda:	4d26      	ldr	r5, [pc, #152]	; (8002d74 <HAL_I2C_Init+0x174>)
 8002cdc:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ce0:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8002ce4:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ce8:	fb02 f101 	mul.w	r1, r2, r1
 8002cec:	4d23      	ldr	r5, [pc, #140]	; (8002d7c <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cee:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cf0:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cf4:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cf6:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cf8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002cfc:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8002d00:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d02:	6a15      	ldr	r5, [r2, #32]
 8002d04:	3101      	adds	r1, #1
 8002d06:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002d0a:	4329      	orrs	r1, r5
 8002d0c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d0e:	69d1      	ldr	r1, [r2, #28]
 8002d10:	68a5      	ldr	r5, [r4, #8]
 8002d12:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002d16:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002d1a:	b9ad      	cbnz	r5, 8002d48 <HAL_I2C_Init+0x148>
 8002d1c:	3801      	subs	r0, #1
 8002d1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2c:	b1d3      	cbz	r3, 8002d64 <HAL_I2C_Init+0x164>
 8002d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d32:	e7a5      	b.n	8002c80 <HAL_I2C_Init+0x80>
    return HAL_ERROR;
 8002d34:	2001      	movs	r0, #1
}
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002d38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002d3c:	f7fe fa20 	bl	8001180 <HAL_I2C_MspInit>
 8002d40:	e76a      	b.n	8002c18 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d46:	e79b      	b.n	8002c80 <HAL_I2C_Init+0x80>
 8002d48:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d4c:	3801      	subs	r0, #1
 8002d4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d56:	3301      	adds	r3, #1
 8002d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5c:	b113      	cbz	r3, 8002d64 <HAL_I2C_Init+0x164>
 8002d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d62:	e78d      	b.n	8002c80 <HAL_I2C_Init+0x80>
 8002d64:	2301      	movs	r3, #1
 8002d66:	e78b      	b.n	8002c80 <HAL_I2C_Init+0x80>
    return HAL_ERROR;
 8002d68:	2001      	movs	r0, #1
}
 8002d6a:	4770      	bx	lr
 8002d6c:	000186a0 	.word	0x000186a0
 8002d70:	001e847f 	.word	0x001e847f
 8002d74:	431bde83 	.word	0x431bde83
 8002d78:	003d08ff 	.word	0x003d08ff
 8002d7c:	10624dd3 	.word	0x10624dd3

08002d80 <HAL_I2C_Master_Transmit>:
{
 8002d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d84:	4604      	mov	r4, r0
 8002d86:	b082      	sub	sp, #8
 8002d88:	4699      	mov	r9, r3
 8002d8a:	4688      	mov	r8, r1
 8002d8c:	4692      	mov	sl, r2
 8002d8e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff fad6 	bl	8002340 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d94:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d005      	beq.n	8002da8 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 8002d9c:	f04f 0802 	mov.w	r8, #2
}
 8002da0:	4640      	mov	r0, r8
 8002da2:	b002      	add	sp, #8
 8002da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da8:	4606      	mov	r6, r0
 8002daa:	e005      	b.n	8002db8 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dac:	f7ff fac8 	bl	8002340 <HAL_GetTick>
 8002db0:	1b80      	subs	r0, r0, r6
 8002db2:	2819      	cmp	r0, #25
 8002db4:	f200 80c2 	bhi.w	8002f3c <HAL_I2C_Master_Transmit+0x1bc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	699d      	ldr	r5, [r3, #24]
 8002dbc:	ea6f 0c05 	mvn.w	ip, r5
 8002dc0:	f01c 0502 	ands.w	r5, ip, #2
 8002dc4:	d0f2      	beq.n	8002dac <HAL_I2C_Master_Transmit+0x2c>
    __HAL_LOCK(hi2c);
 8002dc6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8002dca:	2a01      	cmp	r2, #1
 8002dcc:	d0e6      	beq.n	8002d9c <HAL_I2C_Master_Transmit+0x1c>
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	07d0      	lsls	r0, r2, #31
 8002dd8:	f140 808f 	bpl.w	8002efa <HAL_I2C_Master_Transmit+0x17a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ddc:	2100      	movs	r1, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dde:	2521      	movs	r5, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002de0:	2010      	movs	r0, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de8:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dea:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dee:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002df2:	6421      	str	r1, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002df4:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002df8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dfa:	f5a1 3180 	sub.w	r1, r1, #65536	; 0x10000
 8002dfe:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002e00:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8002e04:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e08:	2a08      	cmp	r2, #8
 8002e0a:	d006      	beq.n	8002e1a <HAL_I2C_Master_Transmit+0x9a>
 8002e0c:	2a01      	cmp	r2, #1
 8002e0e:	d004      	beq.n	8002e1a <HAL_I2C_Master_Transmit+0x9a>
 8002e10:	428a      	cmp	r2, r1
 8002e12:	d002      	beq.n	8002e1a <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e14:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e16:	2a12      	cmp	r2, #18
 8002e18:	d106      	bne.n	8002e28 <HAL_I2C_Master_Transmit+0xa8>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e001      	b.n	8002e28 <HAL_I2C_Master_Transmit+0xa8>
    if (Timeout != HAL_MAX_DELAY)
 8002e24:	1c79      	adds	r1, r7, #1
 8002e26:	d15f      	bne.n	8002ee8 <HAL_I2C_Master_Transmit+0x168>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	07d2      	lsls	r2, r2, #31
 8002e2c:	d5fa      	bpl.n	8002e24 <HAL_I2C_Master_Transmit+0xa4>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e2e:	6922      	ldr	r2, [r4, #16]
 8002e30:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002e34:	d166      	bne.n	8002f04 <HAL_I2C_Master_Transmit+0x184>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e36:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8002e3a:	6119      	str	r1, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e3c:	4633      	mov	r3, r6
 8002e3e:	463a      	mov	r2, r7
 8002e40:	4620      	mov	r0, r4
 8002e42:	4955      	ldr	r1, [pc, #340]	; (8002f98 <HAL_I2C_Master_Transmit+0x218>)
 8002e44:	f7ff fce8 	bl	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e48:	4680      	mov	r8, r0
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	d170      	bne.n	8002f30 <HAL_I2C_Master_Transmit+0x1b0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	9001      	str	r0, [sp, #4]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	9201      	str	r2, [sp, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	9301      	str	r3, [sp, #4]
 8002e5a:	9b01      	ldr	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 8002e5c:	e034      	b.n	8002ec8 <HAL_I2C_Master_Transmit+0x148>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5e:	4632      	mov	r2, r6
 8002e60:	4639      	mov	r1, r7
 8002e62:	4620      	mov	r0, r4
 8002e64:	f7ff fd56 	bl	8002914 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	d15e      	bne.n	8002f2a <HAL_I2C_Master_Transmit+0x1aa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6c:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 8002e70:	f8d4 c000 	ldr.w	ip, [r4]
 8002e74:	4673      	mov	r3, lr
 8002e76:	f813 ab01 	ldrb.w	sl, [r3], #1
      hi2c->XferSize--;
 8002e7a:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e7e:	f8cc a010 	str.w	sl, [ip, #16]
      hi2c->pBuffPtr++;
 8002e82:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002e84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002e86:	f109 35ff 	add.w	r5, r9, #4294967295
      hi2c->XferCount--;
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e90:	f8dc 3014 	ldr.w	r3, [ip, #20]
      hi2c->XferSize--;
 8002e94:	b2ad      	uxth	r5, r5
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e96:	075b      	lsls	r3, r3, #29
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e98:	4632      	mov	r2, r6
 8002e9a:	4639      	mov	r1, r7
 8002e9c:	4620      	mov	r0, r4
      hi2c->XferSize--;
 8002e9e:	8525      	strh	r5, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ea0:	d50f      	bpl.n	8002ec2 <HAL_I2C_Master_Transmit+0x142>
 8002ea2:	b175      	cbz	r5, 8002ec2 <HAL_I2C_Master_Transmit+0x142>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ea4:	f89e 3001 	ldrb.w	r3, [lr, #1]
        hi2c->XferSize--;
 8002ea8:	f1a9 0902 	sub.w	r9, r9, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eac:	f8cc 3010 	str.w	r3, [ip, #16]
        hi2c->pBuffPtr++;
 8002eb0:	f10e 0302 	add.w	r3, lr, #2
 8002eb4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002eb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002eb8:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec2:	f7ff fd5f 	bl	8002984 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ec6:	bb80      	cbnz	r0, 8002f2a <HAL_I2C_Master_Transmit+0x1aa>
    while (hi2c->XferSize > 0U)
 8002ec8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1c7      	bne.n	8002e5e <HAL_I2C_Master_Transmit+0xde>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ece:	6821      	ldr	r1, [r4, #0]
 8002ed0:	680a      	ldr	r2, [r1, #0]
 8002ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ed8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002eda:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002ee6:	e75b      	b.n	8002da0 <HAL_I2C_Master_Transmit+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee8:	f7ff fa2a 	bl	8002340 <HAL_GetTick>
 8002eec:	1b80      	subs	r0, r0, r6
 8002eee:	4287      	cmp	r7, r0
 8002ef0:	d336      	bcc.n	8002f60 <HAL_I2C_Master_Transmit+0x1e0>
 8002ef2:	2f00      	cmp	r7, #0
 8002ef4:	d034      	beq.n	8002f60 <HAL_I2C_Master_Transmit+0x1e0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	e796      	b.n	8002e28 <HAL_I2C_Master_Transmit+0xa8>
      __HAL_I2C_ENABLE(hi2c);
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	f042 0201 	orr.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	e76b      	b.n	8002ddc <HAL_I2C_Master_Transmit+0x5c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f04:	ea4f 12e8 	mov.w	r2, r8, asr #7
 8002f08:	f002 0206 	and.w	r2, r2, #6
 8002f0c:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8002f10:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f12:	4620      	mov	r0, r4
 8002f14:	4633      	mov	r3, r6
 8002f16:	463a      	mov	r2, r7
 8002f18:	4920      	ldr	r1, [pc, #128]	; (8002f9c <HAL_I2C_Master_Transmit+0x21c>)
 8002f1a:	f7ff fc7d 	bl	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f1e:	b938      	cbnz	r0, 8002f30 <HAL_I2C_Master_Transmit+0x1b0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f20:	6822      	ldr	r2, [r4, #0]
 8002f22:	fa5f f388 	uxtb.w	r3, r8
 8002f26:	6113      	str	r3, [r2, #16]
 8002f28:	e788      	b.n	8002e3c <HAL_I2C_Master_Transmit+0xbc>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d02a      	beq.n	8002f86 <HAL_I2C_Master_Transmit+0x206>
      return HAL_ERROR;
 8002f30:	f04f 0801 	mov.w	r8, #1
}
 8002f34:	4640      	mov	r0, r8
 8002f36:	b002      	add	sp, #8
 8002f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_BUSY;
 8002f3c:	f04f 0802 	mov.w	r8, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f40:	2320      	movs	r3, #32
}
 8002f42:	4640      	mov	r0, r8
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f44:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f4a:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f50:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	f043 0320 	orr.w	r3, r3, #32
 8002f58:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002f5a:	b002      	add	sp, #8
 8002f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
 8002f60:	f04f 0801 	mov.w	r8, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f64:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f66:	2320      	movs	r3, #32
}
 8002f68:	4640      	mov	r0, r8
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f6a:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f70:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f76:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f7a:	f043 0320 	orr.w	r3, r3, #32
 8002f7e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002f80:	b002      	add	sp, #8
 8002f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f86:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8002f88:	f04f 0801 	mov.w	r8, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8c:	6813      	ldr	r3, [r2, #0]
 8002f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	e704      	b.n	8002da0 <HAL_I2C_Master_Transmit+0x20>
 8002f96:	bf00      	nop
 8002f98:	00010002 	.word	0x00010002
 8002f9c:	00010008 	.word	0x00010008

08002fa0 <HAL_I2C_Mem_Write>:
{
 8002fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	4699      	mov	r9, r3
 8002faa:	460f      	mov	r7, r1
 8002fac:	4690      	mov	r8, r2
 8002fae:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002fb2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f7ff f9c4 	bl	8002340 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d003      	beq.n	8002fc8 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8002fc0:	2002      	movs	r0, #2
}
 8002fc2:	b003      	add	sp, #12
 8002fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc8:	4605      	mov	r5, r0
 8002fca:	e004      	b.n	8002fd6 <HAL_I2C_Mem_Write+0x36>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fcc:	f7ff f9b8 	bl	8002340 <HAL_GetTick>
 8002fd0:	1b40      	subs	r0, r0, r5
 8002fd2:	2819      	cmp	r0, #25
 8002fd4:	d87b      	bhi.n	80030ce <HAL_I2C_Mem_Write+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd6:	6820      	ldr	r0, [r4, #0]
 8002fd8:	6983      	ldr	r3, [r0, #24]
 8002fda:	ea6f 0c03 	mvn.w	ip, r3
 8002fde:	f01c 0b02 	ands.w	fp, ip, #2
 8002fe2:	d0f3      	beq.n	8002fcc <HAL_I2C_Mem_Write+0x2c>
    __HAL_LOCK(hi2c);
 8002fe4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d0e9      	beq.n	8002fc0 <HAL_I2C_Mem_Write+0x20>
 8002fec:	2301      	movs	r3, #1
 8002fee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ff2:	6803      	ldr	r3, [r0, #0]
 8002ff4:	07da      	lsls	r2, r3, #31
 8002ff6:	d565      	bpl.n	80030c4 <HAL_I2C_Mem_Write+0x124>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ff8:	4642      	mov	r2, r8
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ffa:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ffe:	f04f 0821 	mov.w	r8, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003002:	f04f 0c00 	mov.w	ip, #0
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003006:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003008:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800300a:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800300c:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8003010:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8003012:	980c      	ldr	r0, [sp, #48]	; 0x30
 8003014:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003016:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800301a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800301e:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003022:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003026:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800302a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800302c:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800302e:	4835      	ldr	r0, [pc, #212]	; (8003104 <HAL_I2C_Mem_Write+0x164>)
 8003030:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003032:	4620      	mov	r0, r4
 8003034:	f7ff fcde 	bl	80029f4 <I2C_RequestMemoryWrite>
 8003038:	2800      	cmp	r0, #0
 800303a:	d13f      	bne.n	80030bc <HAL_I2C_Mem_Write+0x11c>
    while (hi2c->XferSize > 0U)
 800303c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800303e:	2b00      	cmp	r3, #0
 8003040:	d029      	beq.n	8003096 <HAL_I2C_Mem_Write+0xf6>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003042:	462a      	mov	r2, r5
 8003044:	4631      	mov	r1, r6
 8003046:	4620      	mov	r0, r4
 8003048:	f7ff fc64 	bl	8002914 <I2C_WaitOnTXEFlagUntilTimeout>
 800304c:	2800      	cmp	r0, #0
 800304e:	d14f      	bne.n	80030f0 <HAL_I2C_Mem_Write+0x150>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003050:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003052:	6820      	ldr	r0, [r4, #0]
 8003054:	4639      	mov	r1, r7
 8003056:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 800305a:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800305e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8003060:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003062:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->XferCount--;
 8003066:	3b01      	subs	r3, #1
 8003068:	b29b      	uxth	r3, r3
 800306a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800306c:	6943      	ldr	r3, [r0, #20]
      hi2c->XferSize--;
 800306e:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003070:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8003072:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003074:	6261      	str	r1, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003076:	d50c      	bpl.n	8003092 <HAL_I2C_Mem_Write+0xf2>
 8003078:	b16a      	cbz	r2, 8003096 <HAL_I2C_Mem_Write+0xf6>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800307a:	787b      	ldrb	r3, [r7, #1]
        hi2c->XferSize--;
 800307c:	f1ac 0202 	sub.w	r2, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003080:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8003082:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003084:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8003086:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8003088:	3702      	adds	r7, #2
        hi2c->XferCount--;
 800308a:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 800308c:	6267      	str	r7, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800308e:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003090:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003092:	2a00      	cmp	r2, #0
 8003094:	d1d5      	bne.n	8003042 <HAL_I2C_Mem_Write+0xa2>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003096:	462a      	mov	r2, r5
 8003098:	4631      	mov	r1, r6
 800309a:	4620      	mov	r0, r4
 800309c:	f7ff fc72 	bl	8002984 <I2C_WaitOnBTFFlagUntilTimeout>
 80030a0:	bb30      	cbnz	r0, 80030f0 <HAL_I2C_Mem_Write+0x150>
    hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a4:	6822      	ldr	r2, [r4, #0]
 80030a6:	6813      	ldr	r3, [r2, #0]
 80030a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ac:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80030ae:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80030b2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80030ba:	e782      	b.n	8002fc2 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80030bc:	2001      	movs	r0, #1
}
 80030be:	b003      	add	sp, #12
 80030c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 80030c4:	6803      	ldr	r3, [r0, #0]
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6003      	str	r3, [r0, #0]
 80030cc:	e794      	b.n	8002ff8 <HAL_I2C_Mem_Write+0x58>
        hi2c->State             = HAL_I2C_STATE_READY;
 80030ce:	2320      	movs	r3, #32
      return HAL_BUSY;
 80030d0:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030d2:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030da:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030de:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80030e0:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	f043 0320 	orr.w	r3, r3, #32
 80030e8:	6423      	str	r3, [r4, #64]	; 0x40
}
 80030ea:	b003      	add	sp, #12
 80030ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d1e2      	bne.n	80030bc <HAL_I2C_Mem_Write+0x11c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f6:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 80030f8:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fa:	6813      	ldr	r3, [r2, #0]
 80030fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e75e      	b.n	8002fc2 <HAL_I2C_Mem_Write+0x22>
 8003104:	ffff0000 	.word	0xffff0000

08003108 <HAL_I2C_Mem_Read>:
{
 8003108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800310c:	4604      	mov	r4, r0
 800310e:	b087      	sub	sp, #28
 8003110:	469a      	mov	sl, r3
 8003112:	460f      	mov	r7, r1
 8003114:	4691      	mov	r9, r2
 8003116:	f8bd b044 	ldrh.w	fp, [sp, #68]	; 0x44
 800311a:	9d12      	ldr	r5, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800311c:	f7ff f910 	bl	8002340 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003120:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003124:	2b20      	cmp	r3, #32
 8003126:	d004      	beq.n	8003132 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 8003128:	2702      	movs	r7, #2
}
 800312a:	4638      	mov	r0, r7
 800312c:	b007      	add	sp, #28
 800312e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003132:	4606      	mov	r6, r0
 8003134:	e005      	b.n	8003142 <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003136:	f7ff f903 	bl	8002340 <HAL_GetTick>
 800313a:	1b80      	subs	r0, r0, r6
 800313c:	2819      	cmp	r0, #25
 800313e:	f200 80cf 	bhi.w	80032e0 <HAL_I2C_Mem_Read+0x1d8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	6983      	ldr	r3, [r0, #24]
 8003146:	ea6f 0803 	mvn.w	r8, r3
 800314a:	f018 0802 	ands.w	r8, r8, #2
 800314e:	d0f2      	beq.n	8003136 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8003150:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d0e7      	beq.n	8003128 <HAL_I2C_Mem_Read+0x20>
 8003158:	2301      	movs	r3, #1
 800315a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800315e:	6803      	ldr	r3, [r0, #0]
 8003160:	07da      	lsls	r2, r3, #31
 8003162:	d539      	bpl.n	80031d8 <HAL_I2C_Mem_Read+0xd0>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003164:	f04f 0e40 	mov.w	lr, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003168:	f04f 0c00 	mov.w	ip, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800316c:	f04f 0822 	mov.w	r8, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003170:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003172:	6807      	ldr	r7, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003174:	4653      	mov	r3, sl
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003176:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 800317a:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 800317c:	9810      	ldr	r0, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800317e:	464a      	mov	r2, r9
    hi2c->pBuffPtr    = pData;
 8003180:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003182:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003186:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800318a:	f884 e03e 	strb.w	lr, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318e:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003192:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003196:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003198:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800319a:	4896      	ldr	r0, [pc, #600]	; (80033f4 <HAL_I2C_Mem_Read+0x2ec>)
 800319c:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800319e:	4620      	mov	r0, r4
 80031a0:	f7ff fc94 	bl	8002acc <I2C_RequestMemoryRead>
 80031a4:	4607      	mov	r7, r0
 80031a6:	2800      	cmp	r0, #0
 80031a8:	f040 80b2 	bne.w	8003310 <HAL_I2C_Mem_Read+0x208>
    if (hi2c->XferSize == 0U)
 80031ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80031ae:	b9c3      	cbnz	r3, 80031e2 <HAL_I2C_Mem_Read+0xda>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	9002      	str	r0, [sp, #8]
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	9202      	str	r2, [sp, #8]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	9202      	str	r2, [sp, #8]
 80031bc:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c4:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80031c8:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80031ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80031ce:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80031d6:	e7a8      	b.n	800312a <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 80031d8:	6803      	ldr	r3, [r0, #0]
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6003      	str	r3, [r0, #0]
 80031e0:	e7c0      	b.n	8003164 <HAL_I2C_Mem_Read+0x5c>
    else if (hi2c->XferSize == 1U)
 80031e2:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e4:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 80031e6:	f000 8107 	beq.w	80033f8 <HAL_I2C_Mem_Read+0x2f0>
    else if (hi2c->XferSize == 2U)
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	f000 80c9 	beq.w	8003382 <HAL_I2C_Mem_Read+0x27a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f0:	6811      	ldr	r1, [r2, #0]
 80031f2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80031f6:	6011      	str	r1, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f8:	9005      	str	r0, [sp, #20]
 80031fa:	6951      	ldr	r1, [r2, #20]
 80031fc:	9105      	str	r1, [sp, #20]
 80031fe:	6992      	ldr	r2, [r2, #24]
 8003200:	9205      	str	r2, [sp, #20]
 8003202:	9a05      	ldr	r2, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8003204:	2b03      	cmp	r3, #3
 8003206:	d84c      	bhi.n	80032a2 <HAL_I2C_Mem_Read+0x19a>
        if (hi2c->XferSize == 1U)
 8003208:	2b01      	cmp	r3, #1
 800320a:	d07b      	beq.n	8003304 <HAL_I2C_Mem_Read+0x1fc>
        else if (hi2c->XferSize == 2U)
 800320c:	2b02      	cmp	r3, #2
 800320e:	f000 808b 	beq.w	8003328 <HAL_I2C_Mem_Read+0x220>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003212:	6822      	ldr	r2, [r4, #0]
 8003214:	e002      	b.n	800321c <HAL_I2C_Mem_Read+0x114>
    if (Timeout != HAL_MAX_DELAY)
 8003216:	1c69      	adds	r1, r5, #1
 8003218:	f040 80c9 	bne.w	80033ae <HAL_I2C_Mem_Read+0x2a6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321c:	6953      	ldr	r3, [r2, #20]
 800321e:	075b      	lsls	r3, r3, #29
 8003220:	d5f9      	bpl.n	8003216 <HAL_I2C_Mem_Read+0x10e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003222:	6813      	ldr	r3, [r2, #0]
 8003224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003228:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800322a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800322c:	6822      	ldr	r2, [r4, #0]
 800322e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003230:	6912      	ldr	r2, [r2, #16]
 8003232:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8003234:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003236:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003238:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800323a:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800323c:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800323e:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003240:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003242:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003244:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003246:	8563      	strh	r3, [r4, #42]	; 0x2a
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003248:	6822      	ldr	r2, [r4, #0]
 800324a:	e002      	b.n	8003252 <HAL_I2C_Mem_Read+0x14a>
    if (Timeout != HAL_MAX_DELAY)
 800324c:	1c68      	adds	r0, r5, #1
 800324e:	f040 80c8 	bne.w	80033e2 <HAL_I2C_Mem_Read+0x2da>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003252:	6953      	ldr	r3, [r2, #20]
 8003254:	0759      	lsls	r1, r3, #29
 8003256:	d5f9      	bpl.n	800324c <HAL_I2C_Mem_Read+0x144>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003260:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003262:	6913      	ldr	r3, [r2, #16]
 8003264:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8003266:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003268:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800326a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800326c:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800326e:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003270:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003272:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003274:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003276:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003278:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800327a:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327c:	6822      	ldr	r2, [r4, #0]
 800327e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003280:	6912      	ldr	r2, [r2, #16]
 8003282:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8003284:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003286:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003288:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800328a:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 800328c:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 800328e:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003290:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8003292:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8003294:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003296:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003298:	8562      	strh	r2, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800329a:	2b00      	cmp	r3, #0
 800329c:	d093      	beq.n	80031c6 <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d9b2      	bls.n	8003208 <HAL_I2C_Mem_Read+0x100>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a2:	4632      	mov	r2, r6
 80032a4:	4629      	mov	r1, r5
 80032a6:	4620      	mov	r0, r4
 80032a8:	f7ff fb00 	bl	80028ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d12f      	bne.n	8003310 <HAL_I2C_Mem_Read+0x208>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b0:	6822      	ldr	r2, [r4, #0]
 80032b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032b4:	6912      	ldr	r2, [r2, #16]
 80032b6:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 80032b8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032ba:	6820      	ldr	r0, [r4, #0]
        hi2c->XferCount--;
 80032bc:	3a01      	subs	r2, #1
 80032be:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 80032c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80032c2:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032c4:	6942      	ldr	r2, [r0, #20]
        hi2c->pBuffPtr++;
 80032c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 80032cc:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032d0:	0752      	lsls	r2, r2, #29
        hi2c->XferSize--;
 80032d2:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80032d4:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032d8:	d5df      	bpl.n	800329a <HAL_I2C_Mem_Read+0x192>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032da:	6903      	ldr	r3, [r0, #16]
 80032dc:	704b      	strb	r3, [r1, #1]
 80032de:	e042      	b.n	8003366 <HAL_I2C_Mem_Read+0x25e>
      return HAL_BUSY;
 80032e0:	2702      	movs	r7, #2
        hi2c->State             = HAL_I2C_STATE_READY;
 80032e2:	2320      	movs	r3, #32
}
 80032e4:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032e6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ee:	f884 803e 	strb.w	r8, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80032f4:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032f8:	f043 0320 	orr.w	r3, r3, #32
 80032fc:	6423      	str	r3, [r4, #64]	; 0x40
}
 80032fe:	b007      	add	sp, #28
 8003300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003304:	4632      	mov	r2, r6
 8003306:	4629      	mov	r1, r5
 8003308:	4620      	mov	r0, r4
 800330a:	f7ff facf 	bl	80028ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800330e:	b330      	cbz	r0, 800335e <HAL_I2C_Mem_Read+0x256>
      return HAL_ERROR;
 8003310:	2701      	movs	r7, #1
}
 8003312:	4638      	mov	r0, r7
 8003314:	b007      	add	sp, #28
 8003316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331a:	f7ff f811 	bl	8002340 <HAL_GetTick>
 800331e:	1b80      	subs	r0, r0, r6
 8003320:	4285      	cmp	r5, r0
 8003322:	d34c      	bcc.n	80033be <HAL_I2C_Mem_Read+0x2b6>
 8003324:	2d00      	cmp	r5, #0
 8003326:	d04a      	beq.n	80033be <HAL_I2C_Mem_Read+0x2b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	e001      	b.n	8003330 <HAL_I2C_Mem_Read+0x228>
    if (Timeout != HAL_MAX_DELAY)
 800332c:	1c6b      	adds	r3, r5, #1
 800332e:	d1f4      	bne.n	800331a <HAL_I2C_Mem_Read+0x212>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003330:	6953      	ldr	r3, [r2, #20]
 8003332:	0758      	lsls	r0, r3, #29
 8003334:	d5fa      	bpl.n	800332c <HAL_I2C_Mem_Read+0x224>
  __ASM volatile ("cpsid i" : : : "memory");
 8003336:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003338:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003342:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8003348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800334a:	3301      	adds	r3, #1
 800334c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800334e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003350:	3b01      	subs	r3, #1
 8003352:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003354:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003356:	3b01      	subs	r3, #1
 8003358:	b29b      	uxth	r3, r3
 800335a:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800335c:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003364:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003366:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8003368:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800336a:	3301      	adds	r3, #1
 800336c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800336e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003370:	3a01      	subs	r2, #1
          hi2c->XferSize--;
 8003372:	3b01      	subs	r3, #1
 8003374:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8003376:	b292      	uxth	r2, r2
          hi2c->XferSize--;
 8003378:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800337a:	8562      	strh	r2, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800337c:	2b00      	cmp	r3, #0
 800337e:	d18e      	bne.n	800329e <HAL_I2C_Mem_Read+0x196>
 8003380:	e721      	b.n	80031c6 <HAL_I2C_Mem_Read+0xbe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003388:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800338a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	9004      	str	r0, [sp, #16]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	9204      	str	r2, [sp, #16]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	9204      	str	r2, [sp, #16]
 8003398:	9a04      	ldr	r2, [sp, #16]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033a2:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80033a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f47f af2c 	bne.w	8003204 <HAL_I2C_Mem_Read+0xfc>
 80033ac:	e70b      	b.n	80031c6 <HAL_I2C_Mem_Read+0xbe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fe ffc7 	bl	8002340 <HAL_GetTick>
 80033b2:	1b80      	subs	r0, r0, r6
 80033b4:	4285      	cmp	r5, r0
 80033b6:	d302      	bcc.n	80033be <HAL_I2C_Mem_Read+0x2b6>
 80033b8:	2d00      	cmp	r5, #0
 80033ba:	f47f af2a 	bne.w	8003212 <HAL_I2C_Mem_Read+0x10a>
            return HAL_ERROR;
 80033be:	2701      	movs	r7, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033c0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80033c2:	2320      	movs	r3, #32
}
 80033c4:	4638      	mov	r0, r7
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033c6:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033cc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80033d2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	f043 0320 	orr.w	r3, r3, #32
 80033da:	6423      	str	r3, [r4, #64]	; 0x40
}
 80033dc:	b007      	add	sp, #28
 80033de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7fe ffad 	bl	8002340 <HAL_GetTick>
 80033e6:	1b80      	subs	r0, r0, r6
 80033e8:	4285      	cmp	r5, r0
 80033ea:	d3e8      	bcc.n	80033be <HAL_I2C_Mem_Read+0x2b6>
 80033ec:	2d00      	cmp	r5, #0
 80033ee:	f47f af2b 	bne.w	8003248 <HAL_I2C_Mem_Read+0x140>
 80033f2:	e7e4      	b.n	80033be <HAL_I2C_Mem_Read+0x2b6>
 80033f4:	ffff0000 	.word	0xffff0000
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f8:	6813      	ldr	r3, [r2, #0]
 80033fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033fe:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003400:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	9003      	str	r0, [sp, #12]
 8003406:	695a      	ldr	r2, [r3, #20]
 8003408:	9203      	str	r2, [sp, #12]
 800340a:	699a      	ldr	r2, [r3, #24]
 800340c:	9203      	str	r2, [sp, #12]
 800340e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003416:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003418:	b662      	cpsie	i
}
 800341a:	e7c3      	b.n	80033a4 <HAL_I2C_Mem_Read+0x29c>

0800341c <HAL_I2C_IsDeviceReady>:
{
 800341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003420:	4605      	mov	r5, r0
 8003422:	b083      	sub	sp, #12
 8003424:	461e      	mov	r6, r3
 8003426:	468a      	mov	sl, r1
 8003428:	4693      	mov	fp, r2
  uint32_t tickstart = HAL_GetTick();
 800342a:	f7fe ff89 	bl	8002340 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800342e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8003432:	2b20      	cmp	r3, #32
 8003434:	d003      	beq.n	800343e <HAL_I2C_IsDeviceReady+0x22>
    return HAL_BUSY;
 8003436:	2002      	movs	r0, #2
}
 8003438:	b003      	add	sp, #12
 800343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800343e:	4607      	mov	r7, r0
 8003440:	e005      	b.n	800344e <HAL_I2C_IsDeviceReady+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003442:	f7fe ff7d 	bl	8002340 <HAL_GetTick>
 8003446:	1bc0      	subs	r0, r0, r7
 8003448:	2819      	cmp	r0, #25
 800344a:	f200 80a2 	bhi.w	8003592 <HAL_I2C_IsDeviceReady+0x176>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800344e:	682b      	ldr	r3, [r5, #0]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	43d2      	mvns	r2, r2
 8003454:	f012 0402 	ands.w	r4, r2, #2
 8003458:	d0f3      	beq.n	8003442 <HAL_I2C_IsDeviceReady+0x26>
    __HAL_LOCK(hi2c);
 800345a:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
 800345e:	2a01      	cmp	r2, #1
 8003460:	d0e9      	beq.n	8003436 <HAL_I2C_IsDeviceReady+0x1a>
 8003462:	2201      	movs	r2, #1
 8003464:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	07d4      	lsls	r4, r2, #31
 800346c:	d57d      	bpl.n	800356a <HAL_I2C_IsDeviceReady+0x14e>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800346e:	2024      	movs	r0, #36	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003470:	2100      	movs	r1, #0
  uint32_t I2C_Trials = 1U;
 8003472:	f04f 0901 	mov.w	r9, #1
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003476:	f04f 08a0 	mov.w	r8, #160	; 0xa0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800347a:	681a      	ldr	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800347c:	f00a 0afe 	and.w	sl, sl, #254	; 0xfe
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003484:	601a      	str	r2, [r3, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003486:	4a54      	ldr	r2, [pc, #336]	; (80035d8 <HAL_I2C_IsDeviceReady+0x1bc>)
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003488:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348c:	6429      	str	r1, [r5, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800348e:	62ea      	str	r2, [r5, #44]	; 0x2c
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003496:	601a      	str	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003498:	e001      	b.n	800349e <HAL_I2C_IsDeviceReady+0x82>
    if (Timeout != HAL_MAX_DELAY)
 800349a:	1c70      	adds	r0, r6, #1
 800349c:	d14d      	bne.n	800353a <HAL_I2C_IsDeviceReady+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	07d1      	lsls	r1, r2, #31
 80034a2:	d5fa      	bpl.n	800349a <HAL_I2C_IsDeviceReady+0x7e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034a4:	f8c3 a010 	str.w	sl, [r3, #16]
      tickstart = HAL_GetTick();
 80034a8:	f7fe ff4a 	bl	8002340 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034ac:	682b      	ldr	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80034ae:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034b0:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034b2:	695a      	ldr	r2, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034b4:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034b8:	f001 0102 	and.w	r1, r1, #2
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034bc:	2ca0      	cmp	r4, #160	; 0xa0
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034be:	f402 6280 	and.w	r2, r2, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034c2:	d113      	bne.n	80034ec <HAL_I2C_IsDeviceReady+0xd0>
 80034c4:	e014      	b.n	80034f0 <HAL_I2C_IsDeviceReady+0xd4>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034c6:	f7fe ff3b 	bl	8002340 <HAL_GetTick>
 80034ca:	1bc0      	subs	r0, r0, r7
 80034cc:	42b0      	cmp	r0, r6
 80034ce:	d800      	bhi.n	80034d2 <HAL_I2C_IsDeviceReady+0xb6>
 80034d0:	b90e      	cbnz	r6, 80034d6 <HAL_I2C_IsDeviceReady+0xba>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80034d2:	f885 803d 	strb.w	r8, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034d6:	682b      	ldr	r3, [r5, #0]
 80034d8:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034da:	695a      	ldr	r2, [r3, #20]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034dc:	f895 003d 	ldrb.w	r0, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034e0:	f001 0102 	and.w	r1, r1, #2
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034e4:	28a0      	cmp	r0, #160	; 0xa0
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034e6:	f402 6280 	and.w	r2, r2, #1024	; 0x400
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034ea:	d001      	beq.n	80034f0 <HAL_I2C_IsDeviceReady+0xd4>
 80034ec:	430a      	orrs	r2, r1
 80034ee:	d0ea      	beq.n	80034c6 <HAL_I2C_IsDeviceReady+0xaa>
      hi2c->State = HAL_I2C_STATE_READY;
 80034f0:	2220      	movs	r2, #32
 80034f2:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	0792      	lsls	r2, r2, #30
 80034fa:	d44e      	bmi.n	800359a <HAL_I2C_IsDeviceReady+0x17e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fc:	f46f 6180 	mvn.w	r1, #1024	; 0x400
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003506:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003508:	6159      	str	r1, [r3, #20]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800350a:	e005      	b.n	8003518 <HAL_I2C_IsDeviceReady+0xfc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350c:	f7fe ff18 	bl	8002340 <HAL_GetTick>
 8003510:	1bc0      	subs	r0, r0, r7
 8003512:	2819      	cmp	r0, #25
 8003514:	d819      	bhi.n	800354a <HAL_I2C_IsDeviceReady+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003516:	682b      	ldr	r3, [r5, #0]
 8003518:	699c      	ldr	r4, [r3, #24]
 800351a:	43e4      	mvns	r4, r4
 800351c:	f014 0402 	ands.w	r4, r4, #2
 8003520:	d0f4      	beq.n	800350c <HAL_I2C_IsDeviceReady+0xf0>
      I2C_Trials++;
 8003522:	f109 0901 	add.w	r9, r9, #1
    while (I2C_Trials < Trials);
 8003526:	45d9      	cmp	r9, fp
 8003528:	d3b2      	bcc.n	8003490 <HAL_I2C_IsDeviceReady+0x74>
    hi2c->State = HAL_I2C_STATE_READY;
 800352a:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800352c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800352e:	2001      	movs	r0, #1
    hi2c->State = HAL_I2C_STATE_READY;
 8003530:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003534:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    return HAL_ERROR;
 8003538:	e77e      	b.n	8003438 <HAL_I2C_IsDeviceReady+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe ff01 	bl	8002340 <HAL_GetTick>
 800353e:	1bc0      	subs	r0, r0, r7
 8003540:	4286      	cmp	r6, r0
 8003542:	d317      	bcc.n	8003574 <HAL_I2C_IsDeviceReady+0x158>
 8003544:	b1b6      	cbz	r6, 8003574 <HAL_I2C_IsDeviceReady+0x158>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003546:	682b      	ldr	r3, [r5, #0]
 8003548:	e7a9      	b.n	800349e <HAL_I2C_IsDeviceReady+0x82>
        hi2c->State             = HAL_I2C_STATE_READY;
 800354a:	2320      	movs	r3, #32
          return HAL_ERROR;
 800354c:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 800354e:	632c      	str	r4, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003550:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003554:	f885 403e 	strb.w	r4, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003558:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800355a:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800355e:	f043 0320 	orr.w	r3, r3, #32
 8003562:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003564:	b003      	add	sp, #12
 8003566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      __HAL_I2C_ENABLE(hi2c);
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	e77c      	b.n	800346e <HAL_I2C_IsDeviceReady+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003574:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003576:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003578:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800357a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800357e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003582:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003584:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003586:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800358a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800358e:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003590:	e752      	b.n	8003438 <HAL_I2C_IsDeviceReady+0x1c>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003592:	2320      	movs	r3, #32
      return HAL_BUSY;
 8003594:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003596:	632c      	str	r4, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003598:	e7da      	b.n	8003550 <HAL_I2C_IsDeviceReady+0x134>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359a:	2100      	movs	r1, #0
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a4:	9101      	str	r1, [sp, #4]
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	9201      	str	r2, [sp, #4]
 80035aa:	699a      	ldr	r2, [r3, #24]
 80035ac:	9201      	str	r2, [sp, #4]
 80035ae:	9a01      	ldr	r2, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b0:	e005      	b.n	80035be <HAL_I2C_IsDeviceReady+0x1a2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7fe fec5 	bl	8002340 <HAL_GetTick>
 80035b6:	1bc0      	subs	r0, r0, r7
 80035b8:	2819      	cmp	r0, #25
 80035ba:	d8c6      	bhi.n	800354a <HAL_I2C_IsDeviceReady+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035bc:	682b      	ldr	r3, [r5, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	43db      	mvns	r3, r3
 80035c2:	f013 0402 	ands.w	r4, r3, #2
 80035c6:	d0f4      	beq.n	80035b2 <HAL_I2C_IsDeviceReady+0x196>
        __HAL_UNLOCK(hi2c);
 80035c8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	2220      	movs	r2, #32
        return HAL_OK;
 80035cc:	4618      	mov	r0, r3
        hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80035d2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_OK;
 80035d6:	e72f      	b.n	8003438 <HAL_I2C_IsDeviceReady+0x1c>
 80035d8:	ffff0000 	.word	0xffff0000

080035dc <HAL_I2C_GetState>:
  return hi2c->State;
 80035dc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop

080035e4 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80035e4:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 80035e6:	4770      	bx	lr

080035e8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035e8:	2800      	cmp	r0, #0
 80035ea:	f000 81b6 	beq.w	800395a <HAL_RCC_OscConfig+0x372>
{
 80035ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f2:	6803      	ldr	r3, [r0, #0]
 80035f4:	4604      	mov	r4, r0
 80035f6:	07dd      	lsls	r5, r3, #31
{
 80035f8:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	d535      	bpl.n	8003668 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035fc:	499a      	ldr	r1, [pc, #616]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 80035fe:	684a      	ldr	r2, [r1, #4]
 8003600:	f002 020c 	and.w	r2, r2, #12
 8003604:	2a04      	cmp	r2, #4
 8003606:	f000 80ef 	beq.w	80037e8 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800360a:	684a      	ldr	r2, [r1, #4]
 800360c:	f002 020c 	and.w	r2, r2, #12
 8003610:	2a08      	cmp	r2, #8
 8003612:	f000 80e5 	beq.w	80037e0 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003616:	6863      	ldr	r3, [r4, #4]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d010      	beq.n	8003640 <HAL_RCC_OscConfig+0x58>
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 810c 	beq.w	800383c <HAL_RCC_OscConfig+0x254>
 8003624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003628:	f000 8182 	beq.w	8003930 <HAL_RCC_OscConfig+0x348>
 800362c:	4b8e      	ldr	r3, [pc, #568]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e004      	b.n	800364a <HAL_RCC_OscConfig+0x62>
 8003640:	4a89      	ldr	r2, [pc, #548]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 8003642:	6813      	ldr	r3, [r2, #0]
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364a:	f7fe fe79 	bl	8002340 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800364e:	4e86      	ldr	r6, [pc, #536]	; (8003868 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8003650:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	e005      	b.n	8003660 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003654:	f7fe fe74 	bl	8002340 <HAL_GetTick>
 8003658:	1b40      	subs	r0, r0, r5
 800365a:	2864      	cmp	r0, #100	; 0x64
 800365c:	f200 80ea 	bhi.w	8003834 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003660:	6833      	ldr	r3, [r6, #0]
 8003662:	039a      	lsls	r2, r3, #14
 8003664:	d5f6      	bpl.n	8003654 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	079f      	lsls	r7, r3, #30
 800366a:	d528      	bpl.n	80036be <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366c:	4a7e      	ldr	r2, [pc, #504]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 800366e:	6851      	ldr	r1, [r2, #4]
 8003670:	f011 0f0c 	tst.w	r1, #12
 8003674:	f000 808d 	beq.w	8003792 <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003678:	6851      	ldr	r1, [r2, #4]
 800367a:	f001 010c 	and.w	r1, r1, #12
 800367e:	2908      	cmp	r1, #8
 8003680:	f000 8083 	beq.w	800378a <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003684:	6923      	ldr	r3, [r4, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 8118 	beq.w	80038bc <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800368c:	2201      	movs	r2, #1
 800368e:	4b77      	ldr	r3, [pc, #476]	; (800386c <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003690:	4e75      	ldr	r6, [pc, #468]	; (8003868 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8003692:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003694:	f7fe fe54 	bl	8002340 <HAL_GetTick>
 8003698:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369a:	e005      	b.n	80036a8 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369c:	f7fe fe50 	bl	8002340 <HAL_GetTick>
 80036a0:	1b40      	subs	r0, r0, r5
 80036a2:	2802      	cmp	r0, #2
 80036a4:	f200 80c6 	bhi.w	8003834 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	6833      	ldr	r3, [r6, #0]
 80036aa:	0798      	lsls	r0, r3, #30
 80036ac:	d5f6      	bpl.n	800369c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ae:	6833      	ldr	r3, [r6, #0]
 80036b0:	6962      	ldr	r2, [r4, #20]
 80036b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80036b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80036ba:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	071a      	lsls	r2, r3, #28
 80036c0:	d41f      	bmi.n	8003702 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c2:	075d      	lsls	r5, r3, #29
 80036c4:	d542      	bpl.n	800374c <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036c6:	4b68      	ldr	r3, [pc, #416]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	00d0      	lsls	r0, r2, #3
 80036cc:	d57d      	bpl.n	80037ca <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80036ce:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	4e67      	ldr	r6, [pc, #412]	; (8003870 <HAL_RCC_OscConfig+0x288>)
 80036d2:	6833      	ldr	r3, [r6, #0]
 80036d4:	05d9      	lsls	r1, r3, #23
 80036d6:	f140 809d 	bpl.w	8003814 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036da:	68e3      	ldr	r3, [r4, #12]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	f000 80fe 	beq.w	80038de <HAL_RCC_OscConfig+0x2f6>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80ca 	beq.w	800387c <HAL_RCC_OscConfig+0x294>
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	4b5f      	ldr	r3, [pc, #380]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 80036ec:	6a1a      	ldr	r2, [r3, #32]
 80036ee:	f000 812c 	beq.w	800394a <HAL_RCC_OscConfig+0x362>
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	621a      	str	r2, [r3, #32]
 80036f8:	6a1a      	ldr	r2, [r3, #32]
 80036fa:	f022 0204 	bic.w	r2, r2, #4
 80036fe:	621a      	str	r2, [r3, #32]
 8003700:	e0f2      	b.n	80038e8 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003702:	69a3      	ldr	r3, [r4, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d04f      	beq.n	80037a8 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8003708:	2201      	movs	r2, #1
 800370a:	4b58      	ldr	r3, [pc, #352]	; (800386c <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370c:	4e56      	ldr	r6, [pc, #344]	; (8003868 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 800370e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8003712:	f7fe fe15 	bl	8002340 <HAL_GetTick>
 8003716:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003718:	e005      	b.n	8003726 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371a:	f7fe fe11 	bl	8002340 <HAL_GetTick>
 800371e:	1b40      	subs	r0, r0, r5
 8003720:	2802      	cmp	r0, #2
 8003722:	f200 8087 	bhi.w	8003834 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003726:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003728:	079b      	lsls	r3, r3, #30
 800372a:	d5f6      	bpl.n	800371a <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800372c:	4b51      	ldr	r3, [pc, #324]	; (8003874 <HAL_RCC_OscConfig+0x28c>)
 800372e:	4a52      	ldr	r2, [pc, #328]	; (8003878 <HAL_RCC_OscConfig+0x290>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	0a5b      	lsrs	r3, r3, #9
 8003738:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800373a:	bf00      	nop
  }
  while (Delay --);
 800373c:	9b01      	ldr	r3, [sp, #4]
 800373e:	1e5a      	subs	r2, r3, #1
 8003740:	9201      	str	r2, [sp, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f9      	bne.n	800373a <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	075d      	lsls	r5, r3, #29
 800374a:	d4bc      	bmi.n	80036c6 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800374c:	69e0      	ldr	r0, [r4, #28]
 800374e:	b1c0      	cbz	r0, 8003782 <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003750:	4d45      	ldr	r5, [pc, #276]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 8003752:	686b      	ldr	r3, [r5, #4]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b08      	cmp	r3, #8
 800375a:	f000 80d8 	beq.w	800390e <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800375e:	2200      	movs	r2, #0
 8003760:	4b42      	ldr	r3, [pc, #264]	; (800386c <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003762:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003764:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003766:	f000 80fa 	beq.w	800395e <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 800376a:	f7fe fde9 	bl	8002340 <HAL_GetTick>
 800376e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003770:	e004      	b.n	800377c <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003772:	f7fe fde5 	bl	8002340 <HAL_GetTick>
 8003776:	1b00      	subs	r0, r0, r4
 8003778:	2802      	cmp	r0, #2
 800377a:	d85b      	bhi.n	8003834 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377c:	682b      	ldr	r3, [r5, #0]
 800377e:	019b      	lsls	r3, r3, #6
 8003780:	d4f7      	bmi.n	8003772 <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 8003782:	2000      	movs	r0, #0
}
 8003784:	b002      	add	sp, #8
 8003786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800378a:	6852      	ldr	r2, [r2, #4]
 800378c:	03d6      	lsls	r6, r2, #15
 800378e:	f53f af79 	bmi.w	8003684 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003792:	4a35      	ldr	r2, [pc, #212]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	0795      	lsls	r5, r2, #30
 8003798:	d530      	bpl.n	80037fc <HAL_RCC_OscConfig+0x214>
 800379a:	6922      	ldr	r2, [r4, #16]
 800379c:	2a01      	cmp	r2, #1
 800379e:	d02d      	beq.n	80037fc <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 80037a0:	2001      	movs	r0, #1
}
 80037a2:	b002      	add	sp, #8
 80037a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80037a8:	4a30      	ldr	r2, [pc, #192]	; (800386c <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037aa:	4e2f      	ldr	r6, [pc, #188]	; (8003868 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 80037ac:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80037b0:	f7fe fdc6 	bl	8002340 <HAL_GetTick>
 80037b4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b6:	e004      	b.n	80037c2 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b8:	f7fe fdc2 	bl	8002340 <HAL_GetTick>
 80037bc:	1b40      	subs	r0, r0, r5
 80037be:	2802      	cmp	r0, #2
 80037c0:	d838      	bhi.n	8003834 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80037c4:	079f      	lsls	r7, r3, #30
 80037c6:	d4f7      	bmi.n	80037b8 <HAL_RCC_OscConfig+0x1d0>
 80037c8:	e7bd      	b.n	8003746 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80037cc:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037d2:	61da      	str	r2, [r3, #28]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80037de:	e777      	b.n	80036d0 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037e0:	684a      	ldr	r2, [r1, #4]
 80037e2:	03d0      	lsls	r0, r2, #15
 80037e4:	f57f af17 	bpl.w	8003616 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	0391      	lsls	r1, r2, #14
 80037ee:	f57f af3b 	bpl.w	8003668 <HAL_RCC_OscConfig+0x80>
 80037f2:	6862      	ldr	r2, [r4, #4]
 80037f4:	2a00      	cmp	r2, #0
 80037f6:	f47f af37 	bne.w	8003668 <HAL_RCC_OscConfig+0x80>
 80037fa:	e7d1      	b.n	80037a0 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037fc:	491a      	ldr	r1, [pc, #104]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 80037fe:	6960      	ldr	r0, [r4, #20]
 8003800:	680a      	ldr	r2, [r1, #0]
 8003802:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003806:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800380a:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380c:	071a      	lsls	r2, r3, #28
 800380e:	f57f af58 	bpl.w	80036c2 <HAL_RCC_OscConfig+0xda>
 8003812:	e776      	b.n	8003702 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003814:	6833      	ldr	r3, [r6, #0]
 8003816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800381c:	f7fe fd90 	bl	8002340 <HAL_GetTick>
 8003820:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003822:	6833      	ldr	r3, [r6, #0]
 8003824:	05da      	lsls	r2, r3, #23
 8003826:	f53f af58 	bmi.w	80036da <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382a:	f7fe fd89 	bl	8002340 <HAL_GetTick>
 800382e:	1bc0      	subs	r0, r0, r7
 8003830:	2864      	cmp	r0, #100	; 0x64
 8003832:	d9f6      	bls.n	8003822 <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8003834:	2003      	movs	r0, #3
}
 8003836:	b002      	add	sp, #8
 8003838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383c:	4d0a      	ldr	r5, [pc, #40]	; (8003868 <HAL_RCC_OscConfig+0x280>)
 800383e:	682b      	ldr	r3, [r5, #0]
 8003840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003844:	602b      	str	r3, [r5, #0]
 8003846:	682b      	ldr	r3, [r5, #0]
 8003848:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800384e:	f7fe fd77 	bl	8002340 <HAL_GetTick>
 8003852:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003854:	e004      	b.n	8003860 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003856:	f7fe fd73 	bl	8002340 <HAL_GetTick>
 800385a:	1b80      	subs	r0, r0, r6
 800385c:	2864      	cmp	r0, #100	; 0x64
 800385e:	d8e9      	bhi.n	8003834 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	039b      	lsls	r3, r3, #14
 8003864:	d4f7      	bmi.n	8003856 <HAL_RCC_OscConfig+0x26e>
 8003866:	e6fe      	b.n	8003666 <HAL_RCC_OscConfig+0x7e>
 8003868:	40021000 	.word	0x40021000
 800386c:	42420000 	.word	0x42420000
 8003870:	40007000 	.word	0x40007000
 8003874:	20000000 	.word	0x20000000
 8003878:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800387c:	4e50      	ldr	r6, [pc, #320]	; (80039c0 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003882:	6a33      	ldr	r3, [r6, #32]
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	6233      	str	r3, [r6, #32]
 800388a:	6a33      	ldr	r3, [r6, #32]
 800388c:	f023 0304 	bic.w	r3, r3, #4
 8003890:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8003892:	f7fe fd55 	bl	8002340 <HAL_GetTick>
 8003896:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003898:	e004      	b.n	80038a4 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389a:	f7fe fd51 	bl	8002340 <HAL_GetTick>
 800389e:	1bc0      	subs	r0, r0, r7
 80038a0:	4540      	cmp	r0, r8
 80038a2:	d8c7      	bhi.n	8003834 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a4:	6a33      	ldr	r3, [r6, #32]
 80038a6:	0798      	lsls	r0, r3, #30
 80038a8:	d4f7      	bmi.n	800389a <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 80038aa:	2d00      	cmp	r5, #0
 80038ac:	f43f af4e 	beq.w	800374c <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b0:	4a43      	ldr	r2, [pc, #268]	; (80039c0 <HAL_RCC_OscConfig+0x3d8>)
 80038b2:	69d3      	ldr	r3, [r2, #28]
 80038b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b8:	61d3      	str	r3, [r2, #28]
 80038ba:	e747      	b.n	800374c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80038bc:	4a41      	ldr	r2, [pc, #260]	; (80039c4 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038be:	4e40      	ldr	r6, [pc, #256]	; (80039c0 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 80038c0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80038c2:	f7fe fd3d 	bl	8002340 <HAL_GetTick>
 80038c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c8:	e004      	b.n	80038d4 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ca:	f7fe fd39 	bl	8002340 <HAL_GetTick>
 80038ce:	1b40      	subs	r0, r0, r5
 80038d0:	2802      	cmp	r0, #2
 80038d2:	d8af      	bhi.n	8003834 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d4:	6833      	ldr	r3, [r6, #0]
 80038d6:	0799      	lsls	r1, r3, #30
 80038d8:	d4f7      	bmi.n	80038ca <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	e6ef      	b.n	80036be <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038de:	4a38      	ldr	r2, [pc, #224]	; (80039c0 <HAL_RCC_OscConfig+0x3d8>)
 80038e0:	6a13      	ldr	r3, [r2, #32]
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80038e8:	f7fe fd2a 	bl	8002340 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ec:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80038f0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f2:	4f33      	ldr	r7, [pc, #204]	; (80039c0 <HAL_RCC_OscConfig+0x3d8>)
 80038f4:	e004      	b.n	8003900 <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f6:	f7fe fd23 	bl	8002340 <HAL_GetTick>
 80038fa:	1b80      	subs	r0, r0, r6
 80038fc:	4540      	cmp	r0, r8
 80038fe:	d899      	bhi.n	8003834 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	079b      	lsls	r3, r3, #30
 8003904:	d5f7      	bpl.n	80038f6 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8003906:	2d00      	cmp	r5, #0
 8003908:	f43f af20 	beq.w	800374c <HAL_RCC_OscConfig+0x164>
 800390c:	e7d0      	b.n	80038b0 <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800390e:	2801      	cmp	r0, #1
 8003910:	f43f af38 	beq.w	8003784 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8003914:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003916:	6a22      	ldr	r2, [r4, #32]
 8003918:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800391c:	4291      	cmp	r1, r2
 800391e:	f47f af3f 	bne.w	80037a0 <HAL_RCC_OscConfig+0x1b8>
 8003922:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003924:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8003928:	1a18      	subs	r0, r3, r0
 800392a:	bf18      	it	ne
 800392c:	2001      	movne	r0, #1
 800392e:	e729      	b.n	8003784 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003934:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e67f      	b.n	800364a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800394a:	f042 0204 	orr.w	r2, r2, #4
 800394e:	621a      	str	r2, [r3, #32]
 8003950:	6a1a      	ldr	r2, [r3, #32]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	621a      	str	r2, [r3, #32]
 8003958:	e7c6      	b.n	80038e8 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 800395a:	2001      	movs	r0, #1
}
 800395c:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800395e:	f7fe fcef 	bl	8002340 <HAL_GetTick>
 8003962:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003964:	e005      	b.n	8003972 <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003966:	f7fe fceb 	bl	8002340 <HAL_GetTick>
 800396a:	1b80      	subs	r0, r0, r6
 800396c:	2802      	cmp	r0, #2
 800396e:	f63f af61 	bhi.w	8003834 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003972:	682b      	ldr	r3, [r5, #0]
 8003974:	0199      	lsls	r1, r3, #6
 8003976:	d4f6      	bmi.n	8003966 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003978:	6a23      	ldr	r3, [r4, #32]
 800397a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397e:	d105      	bne.n	800398c <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003980:	686a      	ldr	r2, [r5, #4]
 8003982:	68a1      	ldr	r1, [r4, #8]
 8003984:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003988:	430a      	orrs	r2, r1
 800398a:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800398c:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800398e:	4d0c      	ldr	r5, [pc, #48]	; (80039c0 <HAL_RCC_OscConfig+0x3d8>)
 8003990:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003992:	686a      	ldr	r2, [r5, #4]
 8003994:	430b      	orrs	r3, r1
 8003996:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800399a:	490a      	ldr	r1, [pc, #40]	; (80039c4 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800399c:	4313      	orrs	r3, r2
 800399e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80039a0:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 80039a2:	f7fe fccd 	bl	8002340 <HAL_GetTick>
 80039a6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a8:	e005      	b.n	80039b6 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fe fcc9 	bl	8002340 <HAL_GetTick>
 80039ae:	1b00      	subs	r0, r0, r4
 80039b0:	2802      	cmp	r0, #2
 80039b2:	f63f af3f 	bhi.w	8003834 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039b6:	682b      	ldr	r3, [r5, #0]
 80039b8:	019a      	lsls	r2, r3, #6
 80039ba:	d5f6      	bpl.n	80039aa <HAL_RCC_OscConfig+0x3c2>
 80039bc:	e6e1      	b.n	8003782 <HAL_RCC_OscConfig+0x19a>
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000
 80039c4:	42420000 	.word	0x42420000

080039c8 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039c8:	f240 2c01 	movw	ip, #513	; 0x201
{
 80039cc:	b500      	push	{lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039ce:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80039d0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80039d2:	f10d 0e18 	add.w	lr, sp, #24
 80039d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039d8:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80039dc:	4a15      	ldr	r2, [pc, #84]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80039de:	f8ad c004 	strh.w	ip, [sp, #4]
  tmpreg = RCC->CFGR;
 80039e2:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80039e4:	f003 010c 	and.w	r1, r3, #12
 80039e8:	2908      	cmp	r1, #8
 80039ea:	d003      	beq.n	80039f4 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = HSE_VALUE;
 80039ec:	4812      	ldr	r0, [pc, #72]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x70>)
}
 80039ee:	b007      	add	sp, #28
 80039f0:	f85d fb04 	ldr.w	pc, [sp], #4
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039f4:	f3c3 4183 	ubfx	r1, r3, #18, #4
 80039f8:	3118      	adds	r1, #24
 80039fa:	4469      	add	r1, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039fc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039fe:	f811 0c10 	ldrb.w	r0, [r1, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a02:	d50e      	bpl.n	8003a22 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a04:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a06:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a08:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a0c:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a10:	3318      	adds	r3, #24
 8003a12:	446b      	add	r3, sp
 8003a14:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a18:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003a1c:	b007      	add	sp, #28
 8003a1e:	f85d fb04 	ldr.w	pc, [sp], #4
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x74>)
 8003a24:	fb03 f000 	mul.w	r0, r3, r0
}
 8003a28:	b007      	add	sp, #28
 8003a2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a2e:	bf00      	nop
 8003a30:	08009eac 	.word	0x08009eac
 8003a34:	40021000 	.word	0x40021000
 8003a38:	007a1200 	.word	0x007a1200
 8003a3c:	003d0900 	.word	0x003d0900

08003a40 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003a40:	2800      	cmp	r0, #0
 8003a42:	f000 808c 	beq.w	8003b5e <HAL_RCC_ClockConfig+0x11e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a46:	4a49      	ldr	r2, [pc, #292]	; (8003b6c <HAL_RCC_ClockConfig+0x12c>)
{
 8003a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a4c:	6813      	ldr	r3, [r2, #0]
 8003a4e:	4604      	mov	r4, r0
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	428b      	cmp	r3, r1
 8003a56:	460d      	mov	r5, r1
 8003a58:	d20c      	bcs.n	8003a74 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	6813      	ldr	r3, [r2, #0]
 8003a5c:	f023 0307 	bic.w	r3, r3, #7
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a64:	6813      	ldr	r3, [r2, #0]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	428b      	cmp	r3, r1
 8003a6c:	d002      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003a6e:	2001      	movs	r0, #1
}
 8003a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	0798      	lsls	r0, r3, #30
 8003a78:	d514      	bpl.n	8003aa4 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7a:	0759      	lsls	r1, r3, #29
 8003a7c:	d504      	bpl.n	8003a88 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a7e:	493c      	ldr	r1, [pc, #240]	; (8003b70 <HAL_RCC_ClockConfig+0x130>)
 8003a80:	684a      	ldr	r2, [r1, #4]
 8003a82:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003a86:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a88:	071a      	lsls	r2, r3, #28
 8003a8a:	d504      	bpl.n	8003a96 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a8c:	4938      	ldr	r1, [pc, #224]	; (8003b70 <HAL_RCC_ClockConfig+0x130>)
 8003a8e:	684a      	ldr	r2, [r1, #4]
 8003a90:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003a94:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a96:	4936      	ldr	r1, [pc, #216]	; (8003b70 <HAL_RCC_ClockConfig+0x130>)
 8003a98:	68a0      	ldr	r0, [r4, #8]
 8003a9a:	684a      	ldr	r2, [r1, #4]
 8003a9c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003aa0:	4302      	orrs	r2, r0
 8003aa2:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa4:	07df      	lsls	r7, r3, #31
 8003aa6:	d520      	bpl.n	8003aea <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa8:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aac:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab0:	d057      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x122>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab2:	2a02      	cmp	r2, #2
 8003ab4:	d050      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x118>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab6:	0799      	lsls	r1, r3, #30
 8003ab8:	d5d9      	bpl.n	8003a6e <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aba:	4e2d      	ldr	r6, [pc, #180]	; (8003b70 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003abc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac0:	6873      	ldr	r3, [r6, #4]
 8003ac2:	f023 0303 	bic.w	r3, r3, #3
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003aca:	f7fe fc39 	bl	8002340 <HAL_GetTick>
 8003ace:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad0:	e004      	b.n	8003adc <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad2:	f7fe fc35 	bl	8002340 <HAL_GetTick>
 8003ad6:	1bc0      	subs	r0, r0, r7
 8003ad8:	4540      	cmp	r0, r8
 8003ada:	d845      	bhi.n	8003b68 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003adc:	6873      	ldr	r3, [r6, #4]
 8003ade:	6862      	ldr	r2, [r4, #4]
 8003ae0:	f003 030c 	and.w	r3, r3, #12
 8003ae4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ae8:	d1f3      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aea:	4a20      	ldr	r2, [pc, #128]	; (8003b6c <HAL_RCC_ClockConfig+0x12c>)
 8003aec:	6813      	ldr	r3, [r2, #0]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	42ab      	cmp	r3, r5
 8003af4:	d909      	bls.n	8003b0a <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	6813      	ldr	r3, [r2, #0]
 8003af8:	f023 0307 	bic.w	r3, r3, #7
 8003afc:	432b      	orrs	r3, r5
 8003afe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b00:	6813      	ldr	r3, [r2, #0]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	42ab      	cmp	r3, r5
 8003b08:	d1b1      	bne.n	8003a6e <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	075a      	lsls	r2, r3, #29
 8003b0e:	d506      	bpl.n	8003b1e <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b10:	4917      	ldr	r1, [pc, #92]	; (8003b70 <HAL_RCC_ClockConfig+0x130>)
 8003b12:	68e0      	ldr	r0, [r4, #12]
 8003b14:	684a      	ldr	r2, [r1, #4]
 8003b16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b1a:	4302      	orrs	r2, r0
 8003b1c:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1e:	071b      	lsls	r3, r3, #28
 8003b20:	d507      	bpl.n	8003b32 <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b22:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <HAL_RCC_ClockConfig+0x130>)
 8003b24:	6921      	ldr	r1, [r4, #16]
 8003b26:	6853      	ldr	r3, [r2, #4]
 8003b28:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003b2c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003b30:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b32:	f7ff ff49 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8003b36:	4603      	mov	r3, r0
 8003b38:	4a0d      	ldr	r2, [pc, #52]	; (8003b70 <HAL_RCC_ClockConfig+0x130>)
 8003b3a:	490e      	ldr	r1, [pc, #56]	; (8003b74 <HAL_RCC_ClockConfig+0x134>)
 8003b3c:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003b3e:	480e      	ldr	r0, [pc, #56]	; (8003b78 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b40:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003b44:	5c89      	ldrb	r1, [r1, r2]
 8003b46:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <HAL_RCC_ClockConfig+0x13c>)
 8003b48:	40cb      	lsrs	r3, r1
  HAL_InitTick(uwTickPrio);
 8003b4a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b4c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003b4e:	f7fe fbb5 	bl	80022bc <HAL_InitTick>
  return HAL_OK;
 8003b52:	2000      	movs	r0, #0
}
 8003b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b58:	0198      	lsls	r0, r3, #6
 8003b5a:	d4ae      	bmi.n	8003aba <HAL_RCC_ClockConfig+0x7a>
 8003b5c:	e787      	b.n	8003a6e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003b5e:	2001      	movs	r0, #1
}
 8003b60:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	039e      	lsls	r6, r3, #14
 8003b64:	d4a9      	bmi.n	8003aba <HAL_RCC_ClockConfig+0x7a>
 8003b66:	e782      	b.n	8003a6e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003b68:	2003      	movs	r0, #3
 8003b6a:	e781      	b.n	8003a70 <HAL_RCC_ClockConfig+0x30>
 8003b6c:	40022000 	.word	0x40022000
 8003b70:	40021000 	.word	0x40021000
 8003b74:	08009be8 	.word	0x08009be8
 8003b78:	20000008 	.word	0x20000008
 8003b7c:	20000000 	.word	0x20000000

08003b80 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003b82:	4a05      	ldr	r2, [pc, #20]	; (8003b98 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4905      	ldr	r1, [pc, #20]	; (8003b9c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b88:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003b8c:	5ccb      	ldrb	r3, [r1, r3]
 8003b8e:	6810      	ldr	r0, [r2, #0]
}
 8003b90:	40d8      	lsrs	r0, r3
 8003b92:	4770      	bx	lr
 8003b94:	40021000 	.word	0x40021000
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	08009bf8 	.word	0x08009bf8

08003ba0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003ba2:	4a05      	ldr	r2, [pc, #20]	; (8003bb8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4905      	ldr	r1, [pc, #20]	; (8003bbc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003ba8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003bac:	5ccb      	ldrb	r3, [r1, r3]
 8003bae:	6810      	ldr	r0, [r2, #0]
}
 8003bb0:	40d8      	lsrs	r0, r3
 8003bb2:	4770      	bx	lr
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	08009bf8 	.word	0x08009bf8

08003bc0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc4:	4607      	mov	r7, r0
 8003bc6:	460d      	mov	r5, r1
 8003bc8:	4616      	mov	r6, r2
 8003bca:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	e001      	b.n	8003bd4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bd0:	1c73      	adds	r3, r6, #1
 8003bd2:	d106      	bne.n	8003be2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bd4:	6894      	ldr	r4, [r2, #8]
 8003bd6:	ea35 0304 	bics.w	r3, r5, r4
 8003bda:	d0f9      	beq.n	8003bd0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8003bdc:	2000      	movs	r0, #0
}
 8003bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003be2:	f7fe fbad 	bl	8002340 <HAL_GetTick>
 8003be6:	eba0 0008 	sub.w	r0, r0, r8
 8003bea:	4286      	cmp	r6, r0
 8003bec:	d8ee      	bhi.n	8003bcc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bee:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bf2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bf4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bf8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bfc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfe:	d014      	beq.n	8003c2a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c02:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003c06:	d007      	beq.n	8003c18 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
        hspi->State = HAL_SPI_STATE_READY;
 8003c08:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8003c0e:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003c12:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        return HAL_TIMEOUT;
 8003c16:	e7e2      	b.n	8003bde <SPI_WaitFlagStateUntilTimeout.constprop.0+0x1e>
          SPI_RESET_CRC(hspi);
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e7ee      	b.n	8003c08 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003c30:	d002      	beq.n	8003c38 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c32:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003c36:	d1e3      	bne.n	8003c00 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
          __HAL_SPI_DISABLE(hspi);
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e7de      	b.n	8003c00 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
 8003c42:	bf00      	nop

08003c44 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d03a      	beq.n	8003cbe <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c48:	2300      	movs	r3, #0
{
 8003c4a:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c4c:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
 8003c50:	4604      	mov	r4, r0
 8003c52:	f002 01ff 	and.w	r1, r2, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c56:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c58:	b35a      	cbz	r2, 8003cb2 <HAL_SPI_Init+0x6e>
 8003c5a:	4618      	mov	r0, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c5c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003c60:	2102      	movs	r1, #2
  hspi->State     = HAL_SPI_STATE_READY;
 8003c62:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c66:	432b      	orrs	r3, r5
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c68:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c6a:	68e6      	ldr	r6, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003c6c:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c70:	4333      	orrs	r3, r6
 8003c72:	6926      	ldr	r6, [r4, #16]
 8003c74:	6961      	ldr	r1, [r4, #20]
 8003c76:	4333      	orrs	r3, r6
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	69e1      	ldr	r1, [r4, #28]
  __HAL_SPI_DISABLE(hspi);
 8003c7c:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c7e:	6a26      	ldr	r6, [r4, #32]
 8003c80:	430b      	orrs	r3, r1
 8003c82:	4333      	orrs	r3, r6
  __HAL_SPI_DISABLE(hspi);
 8003c84:	6816      	ldr	r6, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c86:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8003c88:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 8003c8c:	6016      	str	r6, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c8e:	f401 7600 	and.w	r6, r1, #512	; 0x200
 8003c92:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c94:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c96:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c98:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c9c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c9e:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ca0:	69d3      	ldr	r3, [r2, #28]
  return HAL_OK;
 8003ca2:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ca4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ca8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003caa:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cac:	f884 c051 	strb.w	ip, [r4, #81]	; 0x51
}
 8003cb0:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003cb2:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003cb6:	f7fd fa9f 	bl	80011f8 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003cba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003cbc:	e7ce      	b.n	8003c5c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003cbe:	2001      	movs	r0, #1
}
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop

08003cc4 <HAL_SPI_Transmit>:
{
 8003cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc8:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8003cca:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8003cce:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d062      	beq.n	8003d9a <HAL_SPI_Transmit+0xd6>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	4604      	mov	r4, r0
 8003cd8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8003cdc:	4688      	mov	r8, r1
 8003cde:	4617      	mov	r7, r2
  tickstart = HAL_GetTick();
 8003ce0:	f7fe fb2e 	bl	8002340 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003ce4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8003ce8:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	b2d8      	uxtb	r0, r3
 8003cee:	d009      	beq.n	8003d04 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8003cf0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003cf2:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8003cf4:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003cf6:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003cfa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003cfe:	b002      	add	sp, #8
 8003d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8003d04:	f1b8 0f00 	cmp.w	r8, #0
 8003d08:	d0f3      	beq.n	8003cf2 <HAL_SPI_Transmit+0x2e>
 8003d0a:	2f00      	cmp	r7, #0
 8003d0c:	d0f1      	beq.n	8003cf2 <HAL_SPI_Transmit+0x2e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d0e:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d10:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d12:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d14:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  hspi->RxXferSize  = 0U;
 8003d18:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d1a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003d1c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->TxXferCount = Size;
 8003d1e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003d20:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferCount = 0U;
 8003d22:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d24:	68a3      	ldr	r3, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d26:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8003d2e:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8003d30:	86a7      	strh	r7, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8003d32:	bf02      	ittt	eq
 8003d34:	681a      	ldreq	r2, [r3, #0]
 8003d36:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8003d3a:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	0652      	lsls	r2, r2, #25
 8003d40:	d403      	bmi.n	8003d4a <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d48:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d4a:	68e2      	ldr	r2, [r4, #12]
 8003d4c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d50:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d52:	d026      	beq.n	8003da2 <HAL_SPI_Transmit+0xde>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d54:	2a00      	cmp	r2, #0
 8003d56:	d04b      	beq.n	8003df0 <HAL_SPI_Transmit+0x12c>
 8003d58:	2f01      	cmp	r7, #1
 8003d5a:	d049      	beq.n	8003df0 <HAL_SPI_Transmit+0x12c>
    while (hspi->TxXferCount > 0U)
 8003d5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	b973      	cbnz	r3, 8003d80 <HAL_SPI_Transmit+0xbc>
 8003d62:	e053      	b.n	8003e0c <HAL_SPI_Transmit+0x148>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d66:	7812      	ldrb	r2, [r2, #0]
 8003d68:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8003d6a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003d6e:	3901      	subs	r1, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d70:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8003d72:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d74:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003d76:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003d78:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003d7a:	b289      	uxth	r1, r1
 8003d7c:	2900      	cmp	r1, #0
 8003d7e:	d045      	beq.n	8003e0c <HAL_SPI_Transmit+0x148>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d80:	6823      	ldr	r3, [r4, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	0792      	lsls	r2, r2, #30
 8003d86:	d4ed      	bmi.n	8003d64 <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d88:	f7fe fada 	bl	8002340 <HAL_GetTick>
 8003d8c:	1b80      	subs	r0, r0, r6
 8003d8e:	42a8      	cmp	r0, r5
 8003d90:	d339      	bcc.n	8003e06 <HAL_SPI_Transmit+0x142>
 8003d92:	1c6b      	adds	r3, r5, #1
 8003d94:	d0f0      	beq.n	8003d78 <HAL_SPI_Transmit+0xb4>
          errorcode = HAL_TIMEOUT;
 8003d96:	2003      	movs	r0, #3
 8003d98:	e7ab      	b.n	8003cf2 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8003d9a:	2002      	movs	r0, #2
}
 8003d9c:	b002      	add	sp, #8
 8003d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	d14c      	bne.n	8003e40 <HAL_SPI_Transmit+0x17c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da6:	4641      	mov	r1, r8
 8003da8:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003dac:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003dae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db0:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003db2:	3a01      	subs	r2, #1
 8003db4:	b292      	uxth	r2, r2
 8003db6:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003db8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003dba:	b292      	uxth	r2, r2
 8003dbc:	b96a      	cbnz	r2, 8003dda <HAL_SPI_Transmit+0x116>
 8003dbe:	e025      	b.n	8003e0c <HAL_SPI_Transmit+0x148>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003dc2:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003dc6:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8003dc8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dca:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003dd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	b1cb      	cbz	r3, 8003e0c <HAL_SPI_Transmit+0x148>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	0790      	lsls	r0, r2, #30
 8003dde:	d4ef      	bmi.n	8003dc0 <HAL_SPI_Transmit+0xfc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003de0:	f7fe faae 	bl	8002340 <HAL_GetTick>
 8003de4:	1b80      	subs	r0, r0, r6
 8003de6:	42a8      	cmp	r0, r5
 8003de8:	d32d      	bcc.n	8003e46 <HAL_SPI_Transmit+0x182>
 8003dea:	1c69      	adds	r1, r5, #1
 8003dec:	d0f1      	beq.n	8003dd2 <HAL_SPI_Transmit+0x10e>
 8003dee:	e7d2      	b.n	8003d96 <HAL_SPI_Transmit+0xd2>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003df0:	f898 2000 	ldrb.w	r2, [r8]
 8003df4:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8003df6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003df8:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003dfa:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dfc:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8003dfe:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e00:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003e02:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003e04:	e7aa      	b.n	8003d5c <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e06:	2d00      	cmp	r5, #0
 8003e08:	d1b6      	bne.n	8003d78 <HAL_SPI_Transmit+0xb4>
 8003e0a:	e7c4      	b.n	8003d96 <HAL_SPI_Transmit+0xd2>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0c:	4633      	mov	r3, r6
 8003e0e:	462a      	mov	r2, r5
 8003e10:	2180      	movs	r1, #128	; 0x80
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7ff fed4 	bl	8003bc0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003e18:	b120      	cbz	r0, 8003e24 <HAL_SPI_Transmit+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e1a:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e22:	6562      	str	r2, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e24:	68a3      	ldr	r3, [r4, #8]
 8003e26:	b933      	cbnz	r3, 8003e36 <HAL_SPI_Transmit+0x172>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e28:	6822      	ldr	r2, [r4, #0]
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	68d3      	ldr	r3, [r2, #12]
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	6893      	ldr	r3, [r2, #8]
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e36:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003e38:	3800      	subs	r0, #0
 8003e3a:	bf18      	it	ne
 8003e3c:	2001      	movne	r0, #1
error:
 8003e3e:	e758      	b.n	8003cf2 <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e40:	2f01      	cmp	r7, #1
 8003e42:	d1b9      	bne.n	8003db8 <HAL_SPI_Transmit+0xf4>
 8003e44:	e7af      	b.n	8003da6 <HAL_SPI_Transmit+0xe2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e46:	2d00      	cmp	r5, #0
 8003e48:	d1c3      	bne.n	8003dd2 <HAL_SPI_Transmit+0x10e>
 8003e4a:	e7a4      	b.n	8003d96 <HAL_SPI_Transmit+0xd2>

08003e4c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4c:	6a03      	ldr	r3, [r0, #32]
{
 8003e4e:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e56:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e5a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e5c:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e5e:	4d0f      	ldr	r5, [pc, #60]	; (8003e9c <TIM_OC1_SetConfig+0x50>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e60:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003e64:	4332      	orrs	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8003e66:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003e68:	f023 0302 	bic.w	r3, r3, #2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e6c:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8003e6e:	ea43 0306 	orr.w	r3, r3, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e72:	d006      	beq.n	8003e82 <TIM_OC1_SetConfig+0x36>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e74:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003e76:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003e78:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003e7a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8003e7c:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8003e7e:	6203      	str	r3, [r0, #32]
}
 8003e80:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8003e82:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e84:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003e88:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e8a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e8e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003e92:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e94:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e98:	432c      	orrs	r4, r5
 8003e9a:	e7eb      	b.n	8003e74 <TIM_OC1_SetConfig+0x28>
 8003e9c:	40012c00 	.word	0x40012c00

08003ea0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ea0:	6a03      	ldr	r3, [r0, #32]
{
 8003ea2:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eae:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb0:	680e      	ldr	r6, [r1, #0]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eb2:	4d10      	ldr	r5, [pc, #64]	; (8003ef4 <TIM_OC3_SetConfig+0x54>)
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eb4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003eb8:	4332      	orrs	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eba:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ec0:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ec2:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ec6:	d006      	beq.n	8003ed6 <TIM_OC3_SetConfig+0x36>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ec8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003eca:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003ecc:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003ece:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8003ed0:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003ed2:	6203      	str	r3, [r0, #32]
}
 8003ed4:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ed6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ed8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003edc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ee0:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ee4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8003ee8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003eea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eee:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8003ef2:	e7e9      	b.n	8003ec8 <TIM_OC3_SetConfig+0x28>
 8003ef4:	40012c00 	.word	0x40012c00

08003ef8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ef8:	6a03      	ldr	r3, [r0, #32]
{
 8003efa:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f00:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f06:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f08:	f8d1 c000 	ldr.w	ip, [r1]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0c:	4d0c      	ldr	r5, [pc, #48]	; (8003f40 <TIM_OC4_SetConfig+0x48>)
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f0e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f12:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f16:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1e:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f20:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f24:	d006      	beq.n	8003f34 <TIM_OC4_SetConfig+0x3c>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f26:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003f28:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003f2a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8003f2c:	bc30      	pop	{r4, r5}
  TIMx->CCR4 = OC_Config->Pulse;
 8003f2e:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003f30:	6203      	str	r3, [r0, #32]
}
 8003f32:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f34:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f36:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f3a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003f3e:	e7f2      	b.n	8003f26 <TIM_OC4_SetConfig+0x2e>
 8003f40:	40012c00 	.word	0x40012c00

08003f44 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d054      	beq.n	8003ff2 <HAL_TIM_Base_Init+0xae>
{
 8003f48:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f4e:	4604      	mov	r4, r0
 8003f50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d033      	beq.n	8003fc0 <HAL_TIM_Base_Init+0x7c>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f5c:	4926      	ldr	r1, [pc, #152]	; (8003ff8 <HAL_TIM_Base_Init+0xb4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f62:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003f64:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f66:	d030      	beq.n	8003fca <HAL_TIM_Base_Init+0x86>
 8003f68:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003f6c:	d011      	beq.n	8003f92 <HAL_TIM_Base_Init+0x4e>
 8003f6e:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8003f72:	428a      	cmp	r2, r1
 8003f74:	d00d      	beq.n	8003f92 <HAL_TIM_Base_Init+0x4e>
 8003f76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f7a:	428a      	cmp	r2, r1
 8003f7c:	d009      	beq.n	8003f92 <HAL_TIM_Base_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f7e:	69a0      	ldr	r0, [r4, #24]
 8003f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f84:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f86:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8003f88:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8003f8a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f8c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f8e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f90:	e010      	b.n	8003fb4 <HAL_TIM_Base_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 8003f92:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f98:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8003f9a:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003faa:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003fac:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003fae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb0:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fb2:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8003fb8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003fbc:	2000      	movs	r0, #0
}
 8003fbe:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003fc0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003fc4:	f7fd f96c 	bl	80012a0 <HAL_TIM_Base_MspInit>
 8003fc8:	e7c6      	b.n	8003f58 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003fca:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8003fd2:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fd8:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fda:	69a1      	ldr	r1, [r4, #24]
 8003fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003fe2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fe4:	68e3      	ldr	r3, [r4, #12]
 8003fe6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fe8:	6863      	ldr	r3, [r4, #4]
 8003fea:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003fec:	6963      	ldr	r3, [r4, #20]
 8003fee:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff0:	e7e0      	b.n	8003fb4 <HAL_TIM_Base_Init+0x70>
    return HAL_ERROR;
 8003ff2:	2001      	movs	r0, #1
}
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40012c00 	.word	0x40012c00

08003ffc <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffe:	6801      	ldr	r1, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004004:	688a      	ldr	r2, [r1, #8]
{
 8004006:	4603      	mov	r3, r0
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004008:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400c:	2a06      	cmp	r2, #6
 800400e:	d003      	beq.n	8004018 <HAL_TIM_Base_Start+0x1c>
    __HAL_TIM_ENABLE(htim);
 8004010:	680a      	ldr	r2, [r1, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	600a      	str	r2, [r1, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004018:	2201      	movs	r2, #1
}
 800401a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop

08004024 <HAL_TIM_PWM_MspInit>:
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop

08004028 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004028:	2800      	cmp	r0, #0
 800402a:	d054      	beq.n	80040d6 <HAL_TIM_PWM_Init+0xae>
{
 800402c:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800402e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004032:	4604      	mov	r4, r0
 8004034:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004038:	2b00      	cmp	r3, #0
 800403a:	d033      	beq.n	80040a4 <HAL_TIM_PWM_Init+0x7c>
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800403e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004040:	4926      	ldr	r1, [pc, #152]	; (80040dc <HAL_TIM_PWM_Init+0xb4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004042:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004046:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004048:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800404a:	d030      	beq.n	80040ae <HAL_TIM_PWM_Init+0x86>
 800404c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004050:	d011      	beq.n	8004076 <HAL_TIM_PWM_Init+0x4e>
 8004052:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004056:	428a      	cmp	r2, r1
 8004058:	d00d      	beq.n	8004076 <HAL_TIM_PWM_Init+0x4e>
 800405a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800405e:	428a      	cmp	r2, r1
 8004060:	d009      	beq.n	8004076 <HAL_TIM_PWM_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004062:	69a0      	ldr	r0, [r4, #24]
 8004064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004068:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406a:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800406c:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800406e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004070:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004072:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004074:	e010      	b.n	8004098 <HAL_TIM_PWM_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 8004076:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800407e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004084:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004086:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800408c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800408e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004090:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004092:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004094:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004096:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004098:	2301      	movs	r3, #1
 800409a:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 800409c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80040a0:	2000      	movs	r0, #0
}
 80040a2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80040a4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80040a8:	f7ff ffbc 	bl	8004024 <HAL_TIM_PWM_MspInit>
 80040ac:	e7c6      	b.n	800403c <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80040ae:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 80040b6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80040b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040bc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040be:	69a1      	ldr	r1, [r4, #24]
 80040c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80040c6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c8:	68e3      	ldr	r3, [r4, #12]
 80040ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80040cc:	6863      	ldr	r3, [r4, #4]
 80040ce:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80040d0:	6963      	ldr	r3, [r4, #20]
 80040d2:	6313      	str	r3, [r2, #48]	; 0x30
 80040d4:	e7e0      	b.n	8004098 <HAL_TIM_PWM_Init+0x70>
    return HAL_ERROR;
 80040d6:	2001      	movs	r0, #1
}
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40012c00 	.word	0x40012c00

080040e0 <HAL_TIM_PWM_Start>:
 80040e0:	2201      	movs	r2, #1
 80040e2:	6803      	ldr	r3, [r0, #0]
 80040e4:	f001 011f 	and.w	r1, r1, #31
 80040e8:	6a18      	ldr	r0, [r3, #32]
 80040ea:	fa02 f101 	lsl.w	r1, r2, r1
 80040ee:	ea20 0001 	bic.w	r0, r0, r1
 80040f2:	b410      	push	{r4}
 80040f4:	6218      	str	r0, [r3, #32]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	4c0a      	ldr	r4, [pc, #40]	; (8004124 <HAL_TIM_PWM_Start+0x44>)
 80040fa:	4311      	orrs	r1, r2
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	6219      	str	r1, [r3, #32]
 8004100:	d00b      	beq.n	800411a <HAL_TIM_PWM_Start+0x3a>
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	f002 0207 	and.w	r2, r2, #7
 8004108:	2a06      	cmp	r2, #6
 800410a:	d003      	beq.n	8004114 <HAL_TIM_PWM_Start+0x34>
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	2000      	movs	r0, #0
 8004116:	bc10      	pop	{r4}
 8004118:	4770      	bx	lr
 800411a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800411c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
 8004122:	e7ee      	b.n	8004102 <HAL_TIM_PWM_Start+0x22>
 8004124:	40012c00 	.word	0x40012c00

08004128 <HAL_TIM_Encoder_Start_IT>:
  switch (Channel)
 8004128:	b301      	cbz	r1, 800416c <HAL_TIM_Encoder_Start_IT+0x44>
 800412a:	2904      	cmp	r1, #4
 800412c:	d02c      	beq.n	8004188 <HAL_TIM_Encoder_Start_IT+0x60>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800412e:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004130:	6a1a      	ldr	r2, [r3, #32]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004138:	6a1a      	ldr	r2, [r3, #32]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8004140:	6a1a      	ldr	r2, [r3, #32]
 8004142:	f022 0210 	bic.w	r2, r2, #16
 8004146:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	f042 0210 	orr.w	r2, r2, #16
 800414e:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004150:	68da      	ldr	r2, [r3, #12]
 8004152:	f042 0202 	orr.w	r2, r2, #2
 8004156:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	f042 0204 	orr.w	r2, r2, #4
 800415e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8004160:	681a      	ldr	r2, [r3, #0]
}
 8004162:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	4770      	bx	lr
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800416c:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800416e:	6a1a      	ldr	r2, [r3, #32]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004176:	6a1a      	ldr	r2, [r3, #32]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	f042 0202 	orr.w	r2, r2, #2
 8004184:	60da      	str	r2, [r3, #12]
      break;
 8004186:	e7eb      	b.n	8004160 <HAL_TIM_Encoder_Start_IT+0x38>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004188:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~tmp;
 800418a:	6a1a      	ldr	r2, [r3, #32]
 800418c:	f022 0210 	bic.w	r2, r2, #16
 8004190:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	f042 0210 	orr.w	r2, r2, #16
 8004198:	621a      	str	r2, [r3, #32]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	f042 0204 	orr.w	r2, r2, #4
 80041a0:	60da      	str	r2, [r3, #12]
      break;
 80041a2:	e7dd      	b.n	8004160 <HAL_TIM_Encoder_Start_IT+0x38>

080041a4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80041a4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80041a8:	2a01      	cmp	r2, #1
 80041aa:	d075      	beq.n	8004298 <HAL_TIM_ConfigClockSource+0xf4>
{
 80041ac:	b430      	push	{r4, r5}
 80041ae:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80041b0:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80041b2:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80041b4:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 80041b6:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80041be:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80041c0:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80041c6:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 80041ca:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 80041cc:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80041ce:	d065      	beq.n	800429c <HAL_TIM_ConfigClockSource+0xf8>
 80041d0:	d831      	bhi.n	8004236 <HAL_TIM_ConfigClockSource+0x92>
 80041d2:	2a40      	cmp	r2, #64	; 0x40
 80041d4:	d048      	beq.n	8004268 <HAL_TIM_ConfigClockSource+0xc4>
 80041d6:	d921      	bls.n	800421c <HAL_TIM_ConfigClockSource+0x78>
 80041d8:	2a50      	cmp	r2, #80	; 0x50
 80041da:	d116      	bne.n	800420a <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041dc:	684c      	ldr	r4, [r1, #4]
 80041de:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80041e0:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041e2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80041e6:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e8:	6a04      	ldr	r4, [r0, #32]
 80041ea:	f024 0401 	bic.w	r4, r4, #1
 80041ee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f0:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041f6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80041fa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80041fc:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80041fe:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004200:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004204:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004208:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 800420a:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800420c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004212:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  return HAL_OK;
 8004216:	4610      	mov	r0, r2
}
 8004218:	bc30      	pop	{r4, r5}
 800421a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800421c:	2a20      	cmp	r2, #32
 800421e:	d002      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x82>
 8004220:	d91e      	bls.n	8004260 <HAL_TIM_ConfigClockSource+0xbc>
 8004222:	2a30      	cmp	r2, #48	; 0x30
 8004224:	d1f1      	bne.n	800420a <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 8004226:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004228:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800422c:	430a      	orrs	r2, r1
 800422e:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 8004232:	6082      	str	r2, [r0, #8]
}
 8004234:	e7e9      	b.n	800420a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8004236:	2a70      	cmp	r2, #112	; 0x70
 8004238:	d049      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x12a>
 800423a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800423e:	d1e4      	bne.n	800420a <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004240:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004244:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004246:	432a      	orrs	r2, r5
 8004248:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800424a:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800424e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004252:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8004254:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004256:	6882      	ldr	r2, [r0, #8]
 8004258:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800425c:	6082      	str	r2, [r0, #8]
      break;
 800425e:	e7d4      	b.n	800420a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8004260:	f032 0110 	bics.w	r1, r2, #16
 8004264:	d1d1      	bne.n	800420a <HAL_TIM_ConfigClockSource+0x66>
 8004266:	e7de      	b.n	8004226 <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004268:	684c      	ldr	r4, [r1, #4]
 800426a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800426c:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800426e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004272:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004274:	6a04      	ldr	r4, [r0, #32]
 8004276:	f024 0401 	bic.w	r4, r4, #1
 800427a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427c:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800427e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004282:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004286:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004288:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800428a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800428c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004290:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004294:	6082      	str	r2, [r0, #8]
}
 8004296:	e7b8      	b.n	800420a <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 8004298:	2002      	movs	r0, #2
}
 800429a:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800429c:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800429e:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042a0:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042a6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042a8:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042aa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ae:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 80042b2:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80042b4:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80042ba:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 80042be:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80042c0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042c6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80042ca:	6082      	str	r2, [r0, #8]
}
 80042cc:	e79d      	b.n	800420a <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042ce:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80042d2:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d4:	432a      	orrs	r2, r5
 80042d6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d8:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042dc:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80042e0:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80042e2:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 80042e4:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042e6:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80042ea:	6082      	str	r2, [r0, #8]
      break;
 80042ec:	e78d      	b.n	800420a <HAL_TIM_ConfigClockSource+0x66>
 80042ee:	bf00      	nop

080042f0 <HAL_TIM_OC_DelayElapsedCallback>:
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop

080042f4 <HAL_TIM_IC_CaptureCallback>:
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop

080042f8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop

080042fc <HAL_TIM_TriggerCallback>:
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop

08004300 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004300:	6803      	ldr	r3, [r0, #0]
{
 8004302:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004304:	691a      	ldr	r2, [r3, #16]
{
 8004306:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004308:	0791      	lsls	r1, r2, #30
 800430a:	d502      	bpl.n	8004312 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	0792      	lsls	r2, r2, #30
 8004310:	d45f      	bmi.n	80043d2 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	0750      	lsls	r0, r2, #29
 8004316:	d502      	bpl.n	800431e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	0751      	lsls	r1, r2, #29
 800431c:	d446      	bmi.n	80043ac <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	0712      	lsls	r2, r2, #28
 8004322:	d502      	bpl.n	800432a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	0710      	lsls	r0, r2, #28
 8004328:	d42e      	bmi.n	8004388 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	06d2      	lsls	r2, r2, #27
 800432e:	d502      	bpl.n	8004336 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	06d0      	lsls	r0, r2, #27
 8004334:	d418      	bmi.n	8004368 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	07d1      	lsls	r1, r2, #31
 800433a:	d502      	bpl.n	8004342 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	07d2      	lsls	r2, r2, #31
 8004340:	d45d      	bmi.n	80043fe <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	0610      	lsls	r0, r2, #24
 8004346:	d502      	bpl.n	800434e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	0611      	lsls	r1, r2, #24
 800434c:	d45f      	bmi.n	800440e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	0652      	lsls	r2, r2, #25
 8004352:	d502      	bpl.n	800435a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	0650      	lsls	r0, r2, #25
 8004358:	d461      	bmi.n	800441e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	0691      	lsls	r1, r2, #26
 800435e:	d502      	bpl.n	8004366 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	0692      	lsls	r2, r2, #26
 8004364:	d443      	bmi.n	80043ee <HAL_TIM_IRQHandler+0xee>
}
 8004366:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004368:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800436c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800436e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004370:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004372:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004374:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004376:	f413 7f40 	tst.w	r3, #768	; 0x300
 800437a:	d064      	beq.n	8004446 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800437c:	f7ff ffba 	bl	80042f4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004380:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004382:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004384:	7722      	strb	r2, [r4, #28]
 8004386:	e7d6      	b.n	8004336 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004388:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800438c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800438e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004390:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004392:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004394:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004396:	0799      	lsls	r1, r3, #30
 8004398:	d152      	bne.n	8004440 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	f7ff ffa9 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439e:	4620      	mov	r0, r4
 80043a0:	f7ff ffaa 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043a6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a8:	7722      	strb	r2, [r4, #28]
 80043aa:	e7be      	b.n	800432a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043ac:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b0:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043b2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043b4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b6:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80043b8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ba:	f413 7f40 	tst.w	r3, #768	; 0x300
 80043be:	d13c      	bne.n	800443a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c0:	f7ff ff96 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c4:	4620      	mov	r0, r4
 80043c6:	f7ff ff97 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ca:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043cc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	7722      	strb	r2, [r4, #28]
 80043d0:	e7a5      	b.n	800431e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043d2:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043d6:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043d8:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043da:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	079b      	lsls	r3, r3, #30
 80043e0:	d025      	beq.n	800442e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80043e2:	f7ff ff87 	bl	80042f4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043e8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	7722      	strb	r2, [r4, #28]
 80043ec:	e791      	b.n	8004312 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043ee:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80043f2:	4620      	mov	r0, r4
}
 80043f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80043fa:	f000 b983 	b.w	8004704 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043fe:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004402:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004404:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004406:	f7fd ff1f 	bl	8002248 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	e799      	b.n	8004342 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800440e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004412:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004414:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004416:	f000 f977 	bl	8004708 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	e797      	b.n	800434e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800441e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004422:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004424:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004426:	f7ff ff69 	bl	80042fc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	e795      	b.n	800435a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	f7ff ff5f 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004432:	4620      	mov	r0, r4
 8004434:	f7ff ff60 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004438:	e7d5      	b.n	80043e6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800443a:	f7ff ff5b 	bl	80042f4 <HAL_TIM_IC_CaptureCallback>
 800443e:	e7c4      	b.n	80043ca <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8004440:	f7ff ff58 	bl	80042f4 <HAL_TIM_IC_CaptureCallback>
 8004444:	e7ae      	b.n	80043a4 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004446:	f7ff ff53 	bl	80042f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444a:	4620      	mov	r0, r4
 800444c:	f7ff ff54 	bl	80042f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004450:	e796      	b.n	8004380 <HAL_TIM_IRQHandler+0x80>
 8004452:	bf00      	nop

08004454 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004454:	4a24      	ldr	r2, [pc, #144]	; (80044e8 <TIM_Base_SetConfig+0x94>)
{
 8004456:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004458:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 800445a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800445c:	d02c      	beq.n	80044b8 <TIM_Base_SetConfig+0x64>
 800445e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004462:	d014      	beq.n	800448e <TIM_Base_SetConfig+0x3a>
 8004464:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004468:	4290      	cmp	r0, r2
 800446a:	d010      	beq.n	800448e <TIM_Base_SetConfig+0x3a>
 800446c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004470:	4290      	cmp	r0, r2
 8004472:	d00c      	beq.n	800448e <TIM_Base_SetConfig+0x3a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004474:	694d      	ldr	r5, [r1, #20]
 8004476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800447a:	432b      	orrs	r3, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447c:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800447e:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8004480:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004482:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004484:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004486:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004488:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800448a:	6143      	str	r3, [r0, #20]
}
 800448c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800448e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004494:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8004496:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800449c:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800449e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a4:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a6:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80044a8:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80044aa:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80044ac:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ae:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044b0:	6282      	str	r2, [r0, #40]	; 0x28
}
 80044b2:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80044b4:	6143      	str	r3, [r0, #20]
}
 80044b6:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80044b8:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044be:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c0:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044c6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c8:	694a      	ldr	r2, [r1, #20]
 80044ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ce:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80044d0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d2:	688b      	ldr	r3, [r1, #8]
}
 80044d4:	bc30      	pop	{r4, r5}
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044d8:	680b      	ldr	r3, [r1, #0]
 80044da:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80044dc:	690b      	ldr	r3, [r1, #16]
 80044de:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80044e0:	2301      	movs	r3, #1
 80044e2:	6143      	str	r3, [r0, #20]
}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40012c00 	.word	0x40012c00

080044ec <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d04a      	beq.n	8004586 <HAL_TIM_Encoder_Init+0x9a>
{
 80044f0:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80044f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044f6:	4605      	mov	r5, r0
 80044f8:	460c      	mov	r4, r1
 80044fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d03c      	beq.n	800457c <HAL_TIM_Encoder_Init+0x90>
  htim->State = HAL_TIM_STATE_BUSY;
 8004502:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004504:	4629      	mov	r1, r5
  htim->State = HAL_TIM_STATE_BUSY;
 8004506:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800450a:	f851 0b04 	ldr.w	r0, [r1], #4
 800450e:	6883      	ldr	r3, [r0, #8]
 8004510:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004514:	f023 0307 	bic.w	r3, r3, #7
 8004518:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800451a:	f7ff ff9b 	bl	8004454 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800451e:	f04f 0c01 	mov.w	ip, #1
  tmpsmcr = htim->Instance->SMCR;
 8004522:	6829      	ldr	r1, [r5, #0]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004524:	68a6      	ldr	r6, [r4, #8]
  tmpsmcr = htim->Instance->SMCR;
 8004526:	6888      	ldr	r0, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8004528:	698a      	ldr	r2, [r1, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800452a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800452c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004530:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004534:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
 8004538:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800453a:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800453e:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004540:	69e6      	ldr	r6, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8004548:	68e6      	ldr	r6, [r4, #12]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800454a:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800454e:	4333      	orrs	r3, r6
  tmpccer = htim->Instance->CCER;
 8004550:	6a0e      	ldr	r6, [r1, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004552:	f026 0e22 	bic.w	lr, r6, #34	; 0x22
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004556:	6a26      	ldr	r6, [r4, #32]
 8004558:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 800455c:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800455e:	6966      	ldr	r6, [r4, #20]
 8004560:	6862      	ldr	r2, [r4, #4]
  tmpsmcr |= sConfig->EncoderMode;
 8004562:	6824      	ldr	r4, [r4, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004564:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 8004568:	4320      	orrs	r0, r4
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800456a:	ea42 020e 	orr.w	r2, r2, lr
  htim->Instance->SMCR = tmpsmcr;
 800456e:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8004570:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8004572:	620a      	str	r2, [r1, #32]
  htim->State = HAL_TIM_STATE_READY;
 8004574:	f885 c03d 	strb.w	ip, [r5, #61]	; 0x3d
  return HAL_OK;
 8004578:	2000      	movs	r0, #0
}
 800457a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800457c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8004580:	f7fc fea2 	bl	80012c8 <HAL_TIM_Encoder_MspInit>
 8004584:	e7bd      	b.n	8004502 <HAL_TIM_Encoder_Init+0x16>
    return HAL_ERROR;
 8004586:	2001      	movs	r0, #1
}
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop

0800458c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800458c:	6a03      	ldr	r3, [r0, #32]
{
 800458e:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004590:	f023 0310 	bic.w	r3, r3, #16
 8004594:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004596:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004598:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800459a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800459c:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800459e:	4d11      	ldr	r5, [pc, #68]	; (80045e4 <TIM_OC2_SetConfig+0x58>)
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045a0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045a4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045a8:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80045aa:	f023 0320 	bic.w	r3, r3, #32
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045ae:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045b0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045b4:	d006      	beq.n	80045c4 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 80045b6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80045b8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80045ba:	6182      	str	r2, [r0, #24]
}
 80045bc:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80045be:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80045c0:	6203      	str	r3, [r0, #32]
}
 80045c2:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045c4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80045c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045ca:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045ce:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045d2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80045d6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80045d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045dc:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80045e0:	e7e9      	b.n	80045b6 <TIM_OC2_SetConfig+0x2a>
 80045e2:	bf00      	nop
 80045e4:	40012c00 	.word	0x40012c00

080045e8 <HAL_TIM_PWM_ConfigChannel>:
{
 80045e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80045ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d063      	beq.n	80046ba <HAL_TIM_PWM_ConfigChannel+0xd2>
 80045f2:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80045f6:	2101      	movs	r1, #1
 80045f8:	4604      	mov	r4, r0
 80045fa:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80045fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8004602:	2a0c      	cmp	r2, #12
 8004604:	d819      	bhi.n	800463a <HAL_TIM_PWM_ConfigChannel+0x52>
 8004606:	e8df f002 	tbb	[pc, r2]
 800460a:	1807      	.short	0x1807
 800460c:	18331818 	.word	0x18331818
 8004610:	18461818 	.word	0x18461818
 8004614:	1818      	.short	0x1818
 8004616:	20          	.byte	0x20
 8004617:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004618:	4629      	mov	r1, r5
 800461a:	6800      	ldr	r0, [r0, #0]
 800461c:	f7ff fc16 	bl	8003e4c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004620:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004622:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004624:	6999      	ldr	r1, [r3, #24]
 8004626:	f041 0108 	orr.w	r1, r1, #8
 800462a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800462c:	6999      	ldr	r1, [r3, #24]
 800462e:	f021 0104 	bic.w	r1, r1, #4
 8004632:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	4302      	orrs	r2, r0
 8004638:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800463a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800463c:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800463e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004642:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  return HAL_OK;
 8004646:	4618      	mov	r0, r3
}
 8004648:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800464a:	4629      	mov	r1, r5
 800464c:	6800      	ldr	r0, [r0, #0]
 800464e:	f7ff fc53 	bl	8003ef8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004652:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004654:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004656:	69d9      	ldr	r1, [r3, #28]
 8004658:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800465c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800465e:	69d9      	ldr	r1, [r3, #28]
 8004660:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004664:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800466c:	61da      	str	r2, [r3, #28]
      break;
 800466e:	e7e4      	b.n	800463a <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004670:	4629      	mov	r1, r5
 8004672:	6800      	ldr	r0, [r0, #0]
 8004674:	f7ff ff8a 	bl	800458c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004678:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800467a:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800467c:	6999      	ldr	r1, [r3, #24]
 800467e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004682:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004684:	6999      	ldr	r1, [r3, #24]
 8004686:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800468a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004692:	619a      	str	r2, [r3, #24]
      break;
 8004694:	e7d1      	b.n	800463a <HAL_TIM_PWM_ConfigChannel+0x52>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004696:	4629      	mov	r1, r5
 8004698:	6800      	ldr	r0, [r0, #0]
 800469a:	f7ff fc01 	bl	8003ea0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800469e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046a0:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046a2:	69d9      	ldr	r1, [r3, #28]
 80046a4:	f041 0108 	orr.w	r1, r1, #8
 80046a8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046aa:	69d9      	ldr	r1, [r3, #28]
 80046ac:	f021 0104 	bic.w	r1, r1, #4
 80046b0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	4302      	orrs	r2, r0
 80046b6:	61da      	str	r2, [r3, #28]
      break;
 80046b8:	e7bf      	b.n	800463a <HAL_TIM_PWM_ConfigChannel+0x52>
  __HAL_LOCK(htim);
 80046ba:	2002      	movs	r0, #2
}
 80046bc:	bd38      	pop	{r3, r4, r5, pc}
 80046be:	bf00      	nop

080046c0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80046c4:	2a01      	cmp	r2, #1
 80046c6:	d01b      	beq.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	2202      	movs	r2, #2
{
 80046ca:	b530      	push	{r4, r5, lr}
 80046cc:	4603      	mov	r3, r0
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80046ce:	f04f 0c00 	mov.w	ip, #0
  htim->State = HAL_TIM_STATE_READY;
 80046d2:	f04f 0e01 	mov.w	lr, #1
  tmpcr2 = htim->Instance->CR2;
 80046d6:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80046dc:	6860      	ldr	r0, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 80046de:	68a2      	ldr	r2, [r4, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046e0:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e2:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e4:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80046e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ec:	4328      	orrs	r0, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ee:	430a      	orrs	r2, r1
  htim->Instance->CR2 = tmpcr2;
 80046f0:	6060      	str	r0, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 80046f2:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80046f4:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80046f8:	f883 c03c 	strb.w	ip, [r3, #60]	; 0x3c

  return HAL_OK;
 80046fc:	4660      	mov	r0, ip
}
 80046fe:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8004700:	2002      	movs	r0, #2
}
 8004702:	4770      	bx	lr

08004704 <HAL_TIMEx_CommutCallback>:
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop

08004708 <HAL_TIMEx_BreakCallback>:
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop

0800470c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004710:	6803      	ldr	r3, [r0, #0]
 8004712:	68c1      	ldr	r1, [r0, #12]
 8004714:	691a      	ldr	r2, [r3, #16]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004716:	4d1b      	ldr	r5, [pc, #108]	; (8004784 <UART_SetConfig+0x78>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004718:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800471c:	430a      	orrs	r2, r1
 800471e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004720:	6882      	ldr	r2, [r0, #8]
 8004722:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004724:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004726:	4302      	orrs	r2, r0
 8004728:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800472a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800472e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004732:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004734:	430a      	orrs	r2, r1
 8004736:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	69a1      	ldr	r1, [r4, #24]
 800473c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004740:	430a      	orrs	r2, r1
  if(huart->Instance == USART1)
 8004742:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004744:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8004746:	d01a      	beq.n	800477e <UART_SetConfig+0x72>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004748:	f7ff fa1a 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800474c:	6863      	ldr	r3, [r4, #4]
 800474e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004758:	fbb0 f0f3 	udiv	r0, r0, r3
 800475c:	6821      	ldr	r1, [r4, #0]
 800475e:	2464      	movs	r4, #100	; 0x64
 8004760:	4a09      	ldr	r2, [pc, #36]	; (8004788 <UART_SetConfig+0x7c>)
 8004762:	fba2 5300 	umull	r5, r3, r2, r0
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	fb04 0013 	mls	r0, r4, r3, r0
 800476c:	0100      	lsls	r0, r0, #4
 800476e:	3032      	adds	r0, #50	; 0x32
 8004770:	fba2 2000 	umull	r2, r0, r2, r0
 8004774:	011b      	lsls	r3, r3, #4
 8004776:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 800477a:	6088      	str	r0, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 800477c:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800477e:	f7ff fa0f 	bl	8003ba0 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004782:	e7e3      	b.n	800474c <UART_SetConfig+0x40>
 8004784:	40013800 	.word	0x40013800
 8004788:	51eb851f 	.word	0x51eb851f

0800478c <HAL_UART_Init>:
  if (huart == NULL)
 800478c:	b360      	cbz	r0, 80047e8 <HAL_UART_Init+0x5c>
{
 800478e:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004790:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004794:	4604      	mov	r4, r0
 8004796:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800479a:	b303      	cbz	r3, 80047de <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800479c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800479e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80047a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80047a4:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80047a6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80047a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ac:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80047ae:	f7ff ffad 	bl	800470c <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b2:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80047b4:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b6:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80047b8:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047c8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80047ca:	68da      	ldr	r2, [r3, #12]
 80047cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047d0:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d2:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80047d4:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80047d8:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 80047dc:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80047de:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80047e2:	f7fc fe19 	bl	8001418 <HAL_UART_MspInit>
 80047e6:	e7d9      	b.n	800479c <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80047e8:	2001      	movs	r0, #1
}
 80047ea:	4770      	bx	lr

080047ec <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80047ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
  uint8_t ncolor = (color == 0 ? 1 : 0);
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80047f0:	eb01 0803 	add.w	r8, r1, r3
{
 80047f4:	461c      	mov	r4, r3
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80047f6:	1c53      	adds	r3, r2, #1
{
 80047f8:	b083      	sub	sp, #12
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	fa5f f888 	uxtb.w	r8, r8
  uint8_t color = u8g2->draw_color;
 8004800:	f890 a086 	ldrb.w	sl, [r0, #134]	; 0x86
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	4643      	mov	r3, r8
{
 8004808:	4606      	mov	r6, r0
 800480a:	460d      	mov	r5, r1
 800480c:	4691      	mov	r9, r2
 800480e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8004810:	f000 fd0a 	bl	8005228 <u8g2_IsIntersection>
 8004814:	b378      	cbz	r0, 8004876 <u8g2_DrawHXBM+0x8a>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
  while(len > 0) {
 8004816:	b364      	cbz	r4, 8004872 <u8g2_DrawHXBM+0x86>
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8004818:	faba fb8a 	clz	fp, sl
  mask = 1;
 800481c:	2401      	movs	r4, #1
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800481e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8004822:	e00e      	b.n	8004842 <u8g2_DrawHXBM+0x56>
    if ( *b & mask ) {
      u8g2->draw_color = color;
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8004824:	f896 3085 	ldrb.w	r3, [r6, #133]	; 0x85
 8004828:	b1cb      	cbz	r3, 800485e <u8g2_DrawHXBM+0x72>
      u8g2->draw_color = ncolor;
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    }
    x++;
    mask <<= 1;
 800482a:	0064      	lsls	r4, r4, #1
    if ( mask == 0 )
 800482c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    {
      mask = 1;
 8004830:	bf08      	it	eq
 8004832:	2401      	moveq	r4, #1
    x++;
 8004834:	f105 0501 	add.w	r5, r5, #1
 8004838:	b2ed      	uxtb	r5, r5
      b++;
 800483a:	bf08      	it	eq
 800483c:	193f      	addeq	r7, r7, r4
  while(len > 0) {
 800483e:	45a8      	cmp	r8, r5
 8004840:	d017      	beq.n	8004872 <u8g2_DrawHXBM+0x86>
    if ( *b & mask ) {
 8004842:	783b      	ldrb	r3, [r7, #0]
 8004844:	421c      	tst	r4, r3
 8004846:	d0ed      	beq.n	8004824 <u8g2_DrawHXBM+0x38>
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8004848:	2200      	movs	r2, #0
      u8g2->draw_color = color;
 800484a:	f886 a086 	strb.w	sl, [r6, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800484e:	2301      	movs	r3, #1
 8004850:	9200      	str	r2, [sp, #0]
 8004852:	4629      	mov	r1, r5
 8004854:	464a      	mov	r2, r9
 8004856:	4630      	mov	r0, r6
 8004858:	f000 fc5c 	bl	8005114 <u8g2_DrawHVLine>
 800485c:	e7e5      	b.n	800482a <u8g2_DrawHXBM+0x3e>
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	4629      	mov	r1, r5
 8004862:	2301      	movs	r3, #1
 8004864:	464a      	mov	r2, r9
 8004866:	4630      	mov	r0, r6
      u8g2->draw_color = ncolor;
 8004868:	f886 b086 	strb.w	fp, [r6, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800486c:	f000 fc52 	bl	8005114 <u8g2_DrawHVLine>
 8004870:	e7db      	b.n	800482a <u8g2_DrawHXBM+0x3e>
    }
    len--;
  }
  u8g2->draw_color = color;
 8004872:	f886 a086 	strb.w	sl, [r6, #134]	; 0x86
}
 8004876:	b003      	add	sp, #12
 8004878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800487c <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 800487c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004880:	b082      	sub	sp, #8
 8004882:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 8004886:	461e      	mov	r6, r3
  u8g2_uint_t blen;
  blen = w;
  blen += 7;
  blen >>= 3;
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8004888:	eb02 070a 	add.w	r7, r2, sl
 800488c:	b2ff      	uxtb	r7, r7
 800488e:	440b      	add	r3, r1
 8004890:	9700      	str	r7, [sp, #0]
 8004892:	b2db      	uxtb	r3, r3
{
 8004894:	4681      	mov	r9, r0
 8004896:	4614      	mov	r4, r2
 8004898:	4688      	mov	r8, r1
 800489a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800489c:	f000 fcc4 	bl	8005228 <u8g2_IsIntersection>
 80048a0:	b190      	cbz	r0, 80048c8 <u8g2_DrawXBM+0x4c>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80048a2:	f1ba 0f00 	cmp.w	sl, #0
 80048a6:	d00f      	beq.n	80048c8 <u8g2_DrawXBM+0x4c>
  blen += 7;
 80048a8:	f106 0a07 	add.w	sl, r6, #7
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
    bitmap += blen;
 80048ac:	f3ca 0ac4 	ubfx	sl, sl, #3, #5
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80048b0:	4622      	mov	r2, r4
    y++;
 80048b2:	3401      	adds	r4, #1
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80048b4:	9500      	str	r5, [sp, #0]
 80048b6:	4633      	mov	r3, r6
 80048b8:	4641      	mov	r1, r8
 80048ba:	4648      	mov	r0, r9
    y++;
 80048bc:	b2e4      	uxtb	r4, r4
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 80048be:	f7ff ff95 	bl	80047ec <u8g2_DrawHXBM>
  while( h > 0 )
 80048c2:	42a7      	cmp	r7, r4
    bitmap += blen;
 80048c4:	4455      	add	r5, sl
  while( h > 0 )
 80048c6:	d1f3      	bne.n	80048b0 <u8g2_DrawXBM+0x34>
    h--;
  }
}
 80048c8:	b002      	add	sp, #8
 80048ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ce:	bf00      	nop

080048d0 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80048d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80048d4:	6803      	ldr	r3, [r0, #0]
 80048d6:	2500      	movs	r5, #0
{
 80048d8:	4606      	mov	r6, r0
  src_max = u8g2->tile_buf_height;
 80048da:	f890 703c 	ldrb.w	r7, [r0, #60]	; 0x3c
  dest_row = u8g2->tile_curr_row;
 80048de:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80048e2:	f893 8011 	ldrb.w	r8, [r3, #17]
{
 80048e6:	b082      	sub	sp, #8
 80048e8:	e002      	b.n	80048f0 <u8g2_send_buffer+0x20>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 80048ea:	45a0      	cmp	r8, r4
 80048ec:	d916      	bls.n	800491c <u8g2_send_buffer+0x4c>
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80048ee:	6833      	ldr	r3, [r6, #0]
 80048f0:	7c1b      	ldrb	r3, [r3, #16]
  ptr += offset;
 80048f2:	6bb0      	ldr	r0, [r6, #56]	; 0x38
  offset *= 8;
 80048f4:	fb03 fc05 	mul.w	ip, r3, r5
 80048f8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
  ptr += offset;
 80048fc:	fa1f fc8c 	uxth.w	ip, ip
 8004900:	4484      	add	ip, r0
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8004902:	4622      	mov	r2, r4
 8004904:	2100      	movs	r1, #0
 8004906:	4630      	mov	r0, r6
 8004908:	f8cd c000 	str.w	ip, [sp]
  } while( src_row < src_max && dest_row < dest_max );
 800490c:	3501      	adds	r5, #1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800490e:	f000 ffc1 	bl	8005894 <u8x8_DrawTile>
  } while( src_row < src_max && dest_row < dest_max );
 8004912:	b2eb      	uxtb	r3, r5
    dest_row++;
 8004914:	3401      	adds	r4, #1
  } while( src_row < src_max && dest_row < dest_max );
 8004916:	429f      	cmp	r7, r3
    dest_row++;
 8004918:	b2e4      	uxtb	r4, r4
  } while( src_row < src_max && dest_row < dest_max );
 800491a:	d8e6      	bhi.n	80048ea <u8g2_send_buffer+0x1a>
}
 800491c:	b002      	add	sp, #8
 800491e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004922:	bf00      	nop

08004924 <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8004924:	b510      	push	{r4, lr}
 8004926:	4604      	mov	r4, r0
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
 8004928:	6b43      	ldr	r3, [r0, #52]	; 0x34
  u8g2->tile_curr_row = row;
 800492a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8004932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004934:	4620      	mov	r0, r4
}
 8004936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2->cb->update_page_win(u8g2);
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4718      	bx	r3
 800493e:	bf00      	nop

08004940 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8004940:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
 8004942:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
{
 8004946:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
 8004948:	b92b      	cbnz	r3, 8004956 <u8g2_FirstPage+0x16>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800494a:	4620      	mov	r0, r4
}
 800494c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8004950:	2100      	movs	r1, #0
 8004952:	f7ff bfe7 	b.w	8004924 <u8g2_SetBufferCurrTileRow>
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8004956:	6802      	ldr	r2, [r0, #0]
  cnt *= u8g2->tile_buf_height;
 8004958:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800495c:	7c12      	ldrb	r2, [r2, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800495e:	2100      	movs	r1, #0
 8004960:	fb03 f202 	mul.w	r2, r3, r2
 8004964:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004966:	00d2      	lsls	r2, r2, #3
 8004968:	f002 feb2 	bl	80076d0 <memset>
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800496c:	4620      	mov	r0, r4
}
 800496e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8004972:	2100      	movs	r1, #0
 8004974:	f7ff bfd6 	b.w	8004924 <u8g2_SetBufferCurrTileRow>

08004978 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	4604      	mov	r4, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800497c:	f7ff ffa8 	bl	80048d0 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8004980:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  row += u8g2->tile_buf_height;
 8004984:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8004988:	6823      	ldr	r3, [r4, #0]
  row += u8g2->tile_buf_height;
 800498a:	4415      	add	r5, r2
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800498c:	7c59      	ldrb	r1, [r3, #17]
  row += u8g2->tile_buf_height;
 800498e:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8004990:	42a9      	cmp	r1, r5
 8004992:	d911      	bls.n	80049b8 <u8g2_NextPage+0x40>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
 8004994:	f894 1087 	ldrb.w	r1, [r4, #135]	; 0x87
 8004998:	b929      	cbnz	r1, 80049a6 <u8g2_NextPage+0x2e>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800499a:	4620      	mov	r0, r4
 800499c:	4629      	mov	r1, r5
 800499e:	f7ff ffc1 	bl	8004924 <u8g2_SetBufferCurrTileRow>
  return 1;
 80049a2:	2001      	movs	r0, #1
}
 80049a4:	bd38      	pop	{r3, r4, r5, pc}
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80049a6:	7c1b      	ldrb	r3, [r3, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80049a8:	2100      	movs	r1, #0
 80049aa:	fb03 f202 	mul.w	r2, r3, r2
 80049ae:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80049b0:	00d2      	lsls	r2, r2, #3
 80049b2:	f002 fe8d 	bl	80076d0 <memset>
}
 80049b6:	e7f0      	b.n	800499a <u8g2_NextPage+0x22>
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80049b8:	4620      	mov	r0, r4
 80049ba:	f000 ff95 	bl	80058e8 <u8x8_RefreshDisplay>
    return 0;
 80049be:	2000      	movs	r0, #0
}
 80049c0:	bd38      	pop	{r3, r4, r5, pc}
 80049c2:	bf00      	nop

080049c4 <u8g2_UpdateDisplay>:
}

/* same as sendBuffer, but does not send the ePaper refresh message */
void u8g2_UpdateDisplay(u8g2_t *u8g2)
{
  u8g2_send_buffer(u8g2);
 80049c4:	f7ff bf84 	b.w	80048d0 <u8g2_send_buffer>

080049c8 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80049c8:	b510      	push	{r4, lr}
 80049ca:	4604      	mov	r4, r0
  u8g2_FirstPage(u8g2);
 80049cc:	f7ff ffb8 	bl	8004940 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80049d0:	4620      	mov	r0, r4
 80049d2:	f7ff ffd1 	bl	8004978 <u8g2_NextPage>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d1fa      	bne.n	80049d0 <u8g2_ClearDisplay+0x8>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80049da:	4601      	mov	r1, r0
 80049dc:	4620      	mov	r0, r4
}
 80049de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80049e2:	f7ff bf9f 	b.w	8004924 <u8g2_SetBufferCurrTileRow>
 80049e6:	bf00      	nop

080049e8 <u8g2_m_16_8_f>:
  static uint8_t buf[256];
  *page_cnt = 2;
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 80049e8:	4603      	mov	r3, r0
  static uint8_t buf[1024];
  *page_cnt = 8;
 80049ea:	2208      	movs	r2, #8
  return buf;
}
 80049ec:	4801      	ldr	r0, [pc, #4]	; (80049f4 <u8g2_m_16_8_f+0xc>)
  *page_cnt = 8;
 80049ee:	701a      	strb	r2, [r3, #0]
}
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	200006e0 	.word	0x200006e0

080049f8 <u8g2_Setup_ssd1306_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80049f8:	b530      	push	{r4, r5, lr}
 80049fa:	4694      	mov	ip, r2
 80049fc:	461d      	mov	r5, r3
 80049fe:	b085      	sub	sp, #20
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8004a00:	4663      	mov	r3, ip
{
 8004a02:	460c      	mov	r4, r1
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8004a04:	4a09      	ldr	r2, [pc, #36]	; (8004a2c <u8g2_Setup_ssd1306_128x64_noname_f+0x34>)
 8004a06:	490a      	ldr	r1, [pc, #40]	; (8004a30 <u8g2_Setup_ssd1306_128x64_noname_f+0x38>)
 8004a08:	9500      	str	r5, [sp, #0]
{
 8004a0a:	4605      	mov	r5, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8004a0c:	f000 ff7a 	bl	8005904 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8004a10:	f10d 000f 	add.w	r0, sp, #15
 8004a14:	f7ff ffe8 	bl	80049e8 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <u8g2_Setup_ssd1306_128x64_noname_f+0x3c>)
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8004a1a:	4601      	mov	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8004a1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8004a20:	4628      	mov	r0, r5
 8004a22:	9400      	str	r4, [sp, #0]
 8004a24:	f000 fd8e 	bl	8005544 <u8g2_SetupBuffer>
}
 8004a28:	b005      	add	sp, #20
 8004a2a:	bd30      	pop	{r4, r5, pc}
 8004a2c:	080056b1 	.word	0x080056b1
 8004a30:	080057e5 	.word	0x080057e5
 8004a34:	08005389 	.word	0x08005389

08004a38 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8004a38:	1842      	adds	r2, r0, r1
    pos = u8x8_pgm_read( font );
 8004a3a:	5c43      	ldrb	r3, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 8004a3c:	7850      	ldrb	r0, [r2, #1]
 8004a3e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return pos;
}
 8004a42:	b280      	uxth	r0, r0
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop

08004a48 <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d005      	beq.n	8004a58 <u8g2_add_vector_y+0x10>
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d009      	beq.n	8004a64 <u8g2_add_vector_y+0x1c>
 8004a50:	b12b      	cbz	r3, 8004a5e <u8g2_add_vector_y+0x16>
      break;
    case 2:
      dy -= y;
      break;
    default:
      dy -= x;
 8004a52:	1a40      	subs	r0, r0, r1
 8004a54:	b2c0      	uxtb	r0, r0
      break;      
  }
  return dy;
}
 8004a56:	4770      	bx	lr
      dy += x;
 8004a58:	4408      	add	r0, r1
 8004a5a:	b2c0      	uxtb	r0, r0
      break;
 8004a5c:	4770      	bx	lr
      dy += y;
 8004a5e:	4410      	add	r0, r2
 8004a60:	b2c0      	uxtb	r0, r0
      break;
 8004a62:	4770      	bx	lr
      dy -= y;
 8004a64:	1a80      	subs	r0, r0, r2
 8004a66:	b2c0      	uxtb	r0, r0
      break;
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop

08004a6c <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d005      	beq.n	8004a7c <u8g2_add_vector_x+0x10>
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d009      	beq.n	8004a88 <u8g2_add_vector_x+0x1c>
 8004a74:	b12b      	cbz	r3, 8004a82 <u8g2_add_vector_x+0x16>
      break;
    case 2:
      dx -= x;
      break;
    default:
      dx += y;
 8004a76:	4410      	add	r0, r2
 8004a78:	b2c0      	uxtb	r0, r0
      break;      
  }
  return dx;
}
 8004a7a:	4770      	bx	lr
      dx -= y;
 8004a7c:	1a80      	subs	r0, r0, r2
 8004a7e:	b2c0      	uxtb	r0, r0
      break;
 8004a80:	4770      	bx	lr
      dx += x;
 8004a82:	4408      	add	r0, r1
 8004a84:	b2c0      	uxtb	r0, r0
      break;
 8004a86:	4770      	bx	lr
      dx -= x;
 8004a88:	1a40      	subs	r0, r0, r1
 8004a8a:	b2c0      	uxtb	r0, r0
      break;
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop

08004a90 <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 8004a90:	2000      	movs	r0, #0
 8004a92:	4770      	bx	lr

08004a94 <u8g2_read_font_info>:
{
 8004a94:	b538      	push	{r3, r4, r5, lr}
 8004a96:	460d      	mov	r5, r1
 8004a98:	4604      	mov	r4, r0
  return u8x8_pgm_read( font );  
 8004a9a:	782b      	ldrb	r3, [r5, #0]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8004a9c:	2111      	movs	r1, #17
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8004a9e:	7023      	strb	r3, [r4, #0]
  return u8x8_pgm_read( font );  
 8004aa0:	786b      	ldrb	r3, [r5, #1]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8004aa2:	4628      	mov	r0, r5
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8004aa4:	7063      	strb	r3, [r4, #1]
  return u8x8_pgm_read( font );  
 8004aa6:	78ab      	ldrb	r3, [r5, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8004aa8:	70a3      	strb	r3, [r4, #2]
  return u8x8_pgm_read( font );  
 8004aaa:	78eb      	ldrb	r3, [r5, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8004aac:	70e3      	strb	r3, [r4, #3]
  return u8x8_pgm_read( font );  
 8004aae:	792b      	ldrb	r3, [r5, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8004ab0:	7123      	strb	r3, [r4, #4]
  return u8x8_pgm_read( font );  
 8004ab2:	796b      	ldrb	r3, [r5, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8004ab4:	7163      	strb	r3, [r4, #5]
  return u8x8_pgm_read( font );  
 8004ab6:	79ab      	ldrb	r3, [r5, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8004ab8:	71a3      	strb	r3, [r4, #6]
  return u8x8_pgm_read( font );  
 8004aba:	79eb      	ldrb	r3, [r5, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8004abc:	71e3      	strb	r3, [r4, #7]
  return u8x8_pgm_read( font );  
 8004abe:	7a2b      	ldrb	r3, [r5, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8004ac0:	7223      	strb	r3, [r4, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8004ac2:	7a6b      	ldrb	r3, [r5, #9]
 8004ac4:	7263      	strb	r3, [r4, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8004ac6:	7aab      	ldrb	r3, [r5, #10]
 8004ac8:	72a3      	strb	r3, [r4, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8004aca:	7aeb      	ldrb	r3, [r5, #11]
 8004acc:	72e3      	strb	r3, [r4, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8004ace:	7b2b      	ldrb	r3, [r5, #12]
 8004ad0:	7323      	strb	r3, [r4, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8004ad2:	7b6b      	ldrb	r3, [r5, #13]
 8004ad4:	7363      	strb	r3, [r4, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8004ad6:	7bab      	ldrb	r3, [r5, #14]
 8004ad8:	73a3      	strb	r3, [r4, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8004ada:	7beb      	ldrb	r3, [r5, #15]
 8004adc:	73e3      	strb	r3, [r4, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8004ade:	7c2b      	ldrb	r3, [r5, #16]
 8004ae0:	7423      	strb	r3, [r4, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8004ae2:	f7ff ffa9 	bl	8004a38 <u8g2_font_get_word>
 8004ae6:	4603      	mov	r3, r0
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8004ae8:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8004aea:	8263      	strh	r3, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8004aec:	4628      	mov	r0, r5
 8004aee:	f7ff ffa3 	bl	8004a38 <u8g2_font_get_word>
 8004af2:	4603      	mov	r3, r0
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8004af4:	2115      	movs	r1, #21
 8004af6:	4628      	mov	r0, r5
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8004af8:	82a3      	strh	r3, [r4, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8004afa:	f7ff ff9d 	bl	8004a38 <u8g2_font_get_word>
 8004afe:	82e0      	strh	r0, [r4, #22]
}
 8004b00:	bd38      	pop	{r3, r4, r5, pc}
 8004b02:	bf00      	nop

08004b04 <u8g2_font_decode_len>:
{
 8004b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	460f      	mov	r7, r1
  lx = decode->x;
 8004b0e:	f890 805e 	ldrb.w	r8, [r0, #94]	; 0x5e
  ly = decode->y;
 8004b12:	f890 605f 	ldrb.w	r6, [r0, #95]	; 0x5f
{
 8004b16:	9203      	str	r2, [sp, #12]
 8004b18:	e010      	b.n	8004b3c <u8g2_font_decode_len+0x38>
    else if ( decode->is_transparent == 0 )    
 8004b1a:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
 8004b1e:	2900      	cmp	r1, #0
 8004b20:	d044      	beq.n	8004bac <u8g2_font_decode_len+0xa8>
    cnt -= rem;
 8004b22:	eb07 0308 	add.w	r3, r7, r8
    if ( cnt < rem )
 8004b26:	42af      	cmp	r7, r5
    cnt -= rem;
 8004b28:	eba3 030a 	sub.w	r3, r3, sl
    ly++;
 8004b2c:	f106 0601 	add.w	r6, r6, #1
    if ( cnt < rem )
 8004b30:	d334      	bcc.n	8004b9c <u8g2_font_decode_len+0x98>
    lx = 0;
 8004b32:	f04f 0800 	mov.w	r8, #0
    cnt -= rem;
 8004b36:	f003 07ff 	and.w	r7, r3, #255	; 0xff
    ly++;
 8004b3a:	b2f6      	uxtb	r6, r6
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8004b3c:	fa4f fb86 	sxtb.w	fp, r6
 8004b40:	465a      	mov	r2, fp
 8004b42:	fa4f f188 	sxtb.w	r1, r8
 8004b46:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8004b4a:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8004b4e:	f7ff ff8d 	bl	8004a6c <u8g2_add_vector_x>
    rem = decode->glyph_width;
 8004b52:	f894 a060 	ldrb.w	sl, [r4, #96]	; 0x60
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8004b56:	4681      	mov	r9, r0
    rem -= lx;
 8004b58:	ebaa 0508 	sub.w	r5, sl, r8
 8004b5c:	b2ed      	uxtb	r5, r5
    if ( cnt < rem )
 8004b5e:	42af      	cmp	r7, r5
 8004b60:	4638      	mov	r0, r7
 8004b62:	bf28      	it	cs
 8004b64:	4628      	movcs	r0, r5
 8004b66:	9002      	str	r0, [sp, #8]
    y = decode->target_y;
 8004b68:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8004b6c:	f7ff ff6c 	bl	8004a48 <u8g2_add_vector_y>
    if ( is_foreground )
 8004b70:	9903      	ldr	r1, [sp, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8004b72:	4602      	mov	r2, r0
    if ( is_foreground )
 8004b74:	2900      	cmp	r1, #0
 8004b76:	d0d0      	beq.n	8004b1a <u8g2_font_decode_len+0x16>
      u8g2_DrawHVLine(u8g2, 
 8004b78:	9300      	str	r3, [sp, #0]
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8004b7a:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
      u8g2_DrawHVLine(u8g2, 
 8004b7e:	9b02      	ldr	r3, [sp, #8]
 8004b80:	4649      	mov	r1, r9
 8004b82:	4620      	mov	r0, r4
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8004b84:	f884 c086 	strb.w	ip, [r4, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8004b88:	f000 fac4 	bl	8005114 <u8g2_DrawHVLine>
    cnt -= rem;
 8004b8c:	eb07 0308 	add.w	r3, r7, r8
    if ( cnt < rem )
 8004b90:	42af      	cmp	r7, r5
    cnt -= rem;
 8004b92:	eba3 030a 	sub.w	r3, r3, sl
    ly++;
 8004b96:	f106 0601 	add.w	r6, r6, #1
    if ( cnt < rem )
 8004b9a:	d2ca      	bcs.n	8004b32 <u8g2_font_decode_len+0x2e>
  lx += cnt;
 8004b9c:	4447      	add	r7, r8
  decode->x = lx;
 8004b9e:	f884 705e 	strb.w	r7, [r4, #94]	; 0x5e
  decode->y = ly;
 8004ba2:	f884 b05f 	strb.w	fp, [r4, #95]	; 0x5f
}
 8004ba6:	b005      	add	sp, #20
 8004ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      u8g2_DrawHVLine(u8g2, 
 8004bac:	9300      	str	r3, [sp, #0]
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8004bae:	f894 c065 	ldrb.w	ip, [r4, #101]	; 0x65
      u8g2_DrawHVLine(u8g2, 
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	9b02      	ldr	r3, [sp, #8]
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8004bb8:	f884 c086 	strb.w	ip, [r4, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8004bbc:	f000 faaa 	bl	8005114 <u8g2_DrawHVLine>
 8004bc0:	e7af      	b.n	8004b22 <u8g2_font_decode_len+0x1e>
 8004bc2:	bf00      	nop

08004bc4 <u8g2_font_decode_glyph>:
  decode->decode_bit_pos = 0;
 8004bc4:	2300      	movs	r3, #0
{
 8004bc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8004bca:	f890 806c 	ldrb.w	r8, [r0, #108]	; 0x6c
  decode->decode_ptr = glyph_data;
 8004bce:	6581      	str	r1, [r0, #88]	; 0x58
  decode->decode_bit_pos = 0;
 8004bd0:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
  if ( bit_pos_plus_cnt >= 8 )
 8004bd4:	f1b8 0f07 	cmp.w	r8, #7
{
 8004bd8:	4604      	mov	r4, r0
 8004bda:	b085      	sub	sp, #20
  val = u8x8_pgm_read( f->decode_ptr );  
 8004bdc:	7808      	ldrb	r0, [r1, #0]
  if ( bit_pos_plus_cnt >= 8 )
 8004bde:	f240 80fa 	bls.w	8004dd6 <u8g2_font_decode_glyph+0x212>
    f->decode_ptr++;
 8004be2:	3101      	adds	r1, #1
    bit_pos_plus_cnt -= 8;
 8004be4:	f1a8 0208 	sub.w	r2, r8, #8
    f->decode_ptr++;
 8004be8:	65a1      	str	r1, [r4, #88]	; 0x58
    bit_pos_plus_cnt -= 8;
 8004bea:	b2d2      	uxtb	r2, r2
  val &= (1U<<cnt)-1;
 8004bec:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf0:	fa03 f308 	lsl.w	r3, r3, r8
 8004bf4:	ea20 0803 	bic.w	r8, r0, r3
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8004bf8:	f894 506d 	ldrb.w	r5, [r4, #109]	; 0x6d
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8004bfc:	fa4f fa88 	sxtb.w	sl, r8
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004c00:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8004c04:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
  bit_pos_plus_cnt += cnt;
 8004c08:	18ab      	adds	r3, r5, r2
  val >>= bit_pos;
 8004c0a:	780e      	ldrb	r6, [r1, #0]
  bit_pos_plus_cnt += cnt;
 8004c0c:	b2d8      	uxtb	r0, r3
  if ( bit_pos_plus_cnt >= 8 )
 8004c0e:	2807      	cmp	r0, #7
  val >>= bit_pos;
 8004c10:	fa46 f702 	asr.w	r7, r6, r2
  if ( bit_pos_plus_cnt >= 8 )
 8004c14:	f200 80d0 	bhi.w	8004db8 <u8g2_font_decode_glyph+0x1f4>
  val >>= bit_pos;
 8004c18:	468e      	mov	lr, r1
 8004c1a:	b2fe      	uxtb	r6, r7
  val &= (1U<<cnt)-1;
 8004c1c:	f04f 32ff 	mov.w	r2, #4294967295
  decode->fg_color = u8g2->draw_color;
 8004c20:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
  val &= (1U<<cnt)-1;
 8004c24:	fa02 f505 	lsl.w	r5, r2, r5
  decode->fg_color = u8g2->draw_color;
 8004c28:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8004c2c:	fab3 f383 	clz	r3, r3
  val &= (1U<<cnt)-1;
 8004c30:	ea26 0605 	bic.w	r6, r6, r5
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8004c34:	f894 c06e 	ldrb.w	ip, [r4, #110]	; 0x6e
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8004c38:	095b      	lsrs	r3, r3, #5
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8004c3a:	b277      	sxtb	r7, r6
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8004c3c:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004c40:	f884 0062 	strb.w	r0, [r4, #98]	; 0x62
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8004c44:	f884 7061 	strb.w	r7, [r4, #97]	; 0x61
  bit_pos_plus_cnt += cnt;
 8004c48:	eb0c 0300 	add.w	r3, ip, r0
  val >>= bit_pos;
 8004c4c:	f89e 2000 	ldrb.w	r2, [lr]
  bit_pos_plus_cnt += cnt;
 8004c50:	b2dd      	uxtb	r5, r3
  if ( bit_pos_plus_cnt >= 8 )
 8004c52:	2d07      	cmp	r5, #7
  val >>= bit_pos;
 8004c54:	fa42 f200 	asr.w	r2, r2, r0
  if ( bit_pos_plus_cnt >= 8 )
 8004c58:	f200 809f 	bhi.w	8004d9a <u8g2_font_decode_glyph+0x1d6>
  val >>= bit_pos;
 8004c5c:	4671      	mov	r1, lr
 8004c5e:	b2d2      	uxtb	r2, r2
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8004c60:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004c64:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
  bit_pos_plus_cnt += cnt;
 8004c68:	eb00 0b05 	add.w	fp, r0, r5
  val >>= bit_pos;
 8004c6c:	f891 e000 	ldrb.w	lr, [r1]
  bit_pos_plus_cnt += cnt;
 8004c70:	fa5f fb8b 	uxtb.w	fp, fp
  if ( bit_pos_plus_cnt >= 8 )
 8004c74:	f1bb 0f07 	cmp.w	fp, #7
  val >>= bit_pos;
 8004c78:	fa4e fe05 	asr.w	lr, lr, r5
  if ( bit_pos_plus_cnt >= 8 )
 8004c7c:	d87a      	bhi.n	8004d74 <u8g2_font_decode_glyph+0x1b0>
  val >>= bit_pos;
 8004c7e:	4689      	mov	r9, r1
 8004c80:	fa5f fe8e 	uxtb.w	lr, lr
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8004c84:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004c88:	f884 b062 	strb.w	fp, [r4, #98]	; 0x62
  bit_pos_plus_cnt += cnt;
 8004c8c:	eb01 030b 	add.w	r3, r1, fp
  val >>= bit_pos;
 8004c90:	f899 5000 	ldrb.w	r5, [r9]
  bit_pos_plus_cnt += cnt;
 8004c94:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 8004c96:	2b07      	cmp	r3, #7
  val >>= bit_pos;
 8004c98:	fa45 f50b 	asr.w	r5, r5, fp
  if ( bit_pos_plus_cnt >= 8 )
 8004c9c:	d913      	bls.n	8004cc6 <u8g2_font_decode_glyph+0x102>
    s -= bit_pos;
 8004c9e:	f1cb 0b08 	rsb	fp, fp, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004ca2:	fa5f fb8b 	uxtb.w	fp, fp
 8004ca6:	f8cd b00c 	str.w	fp, [sp, #12]
    f->decode_ptr++;
 8004caa:	f109 0b01 	add.w	fp, r9, #1
 8004cae:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004cb2:	f899 9001 	ldrb.w	r9, [r9, #1]
 8004cb6:	f8dd b00c 	ldr.w	fp, [sp, #12]
    bit_pos_plus_cnt -= 8;
 8004cba:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004cbc:	fa09 f90b 	lsl.w	r9, r9, fp
    bit_pos_plus_cnt -= 8;
 8004cc0:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004cc2:	ea49 0505 	orr.w	r5, r9, r5
  val &= (1U<<cnt)-1;
 8004cc6:	f04f 39ff 	mov.w	r9, #4294967295
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004cca:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
  d <<= cnt;
 8004cce:	2301      	movs	r3, #1
  cnt--;
 8004cd0:	eb01 0b09 	add.w	fp, r1, r9
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004cd4:	b2ed      	uxtb	r5, r5
  d <<= cnt;
 8004cd6:	fa5f fb8b 	uxtb.w	fp, fp
  val &= (1U<<cnt)-1;
 8004cda:	fa09 f101 	lsl.w	r1, r9, r1
 8004cde:	ea25 0501 	bic.w	r5, r5, r1
  d <<= cnt;
 8004ce2:	fa03 fb0b 	lsl.w	fp, r3, fp
  v -= d;
 8004ce6:	eba5 050b 	sub.w	r5, r5, fp
  if ( decode->glyph_width > 0 )
 8004cea:	f1ba 0f00 	cmp.w	sl, #0
  v -= d;
 8004cee:	b26d      	sxtb	r5, r5
  if ( decode->glyph_width > 0 )
 8004cf0:	dd3c      	ble.n	8004d6c <u8g2_font_decode_glyph+0x1a8>
  cnt--;
 8004cf2:	eb00 0a09 	add.w	sl, r0, r9
  d <<= cnt;
 8004cf6:	fa5f fa8a 	uxtb.w	sl, sl
  val &= (1U<<cnt)-1;
 8004cfa:	fa09 f000 	lsl.w	r0, r9, r0
 8004cfe:	fa09 f90c 	lsl.w	r9, r9, ip
  cnt--;
 8004d02:	f10c 3cff 	add.w	ip, ip, #4294967295
  d <<= cnt;
 8004d06:	fa03 fa0a 	lsl.w	sl, r3, sl
 8004d0a:	fa5f fc8c 	uxtb.w	ip, ip
  val &= (1U<<cnt)-1;
 8004d0e:	ea22 0909 	bic.w	r9, r2, r9
 8004d12:	ea2e 0e00 	bic.w	lr, lr, r0
  d <<= cnt;
 8004d16:	fa03 fc0c 	lsl.w	ip, r3, ip
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004d1a:	ebaa 0a06 	sub.w	sl, sl, r6
  v -= d;
 8004d1e:	eba9 0c0c 	sub.w	ip, r9, ip
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004d22:	ebaa 0e0e 	sub.w	lr, sl, lr
 8004d26:	fa4f f28e 	sxtb.w	r2, lr
 8004d2a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8004d2e:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8004d32:	fa4f f18c 	sxtb.w	r1, ip
 8004d36:	f7ff fe99 	bl	8004a6c <u8g2_add_vector_x>
 8004d3a:	4681      	mov	r9, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8004d3c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8004d40:	f884 905c 	strb.w	r9, [r4, #92]	; 0x5c
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8004d44:	f7ff fe80 	bl	8004a48 <u8g2_add_vector_y>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      switch(decode->dir)
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	f200 80e5 	bhi.w	8004f1e <u8g2_font_decode_glyph+0x35a>
 8004d54:	e8df f003 	tbb	[pc, r3]
 8004d58:	41c4b9b3 	.word	0x41c4b9b3
      if ( decode->y >= h )
 8004d5c:	f994 205f 	ldrsb.w	r2, [r4, #95]	; 0x5f
 8004d60:	42ba      	cmp	r2, r7
 8004d62:	db51      	blt.n	8004e08 <u8g2_font_decode_glyph+0x244>
    u8g2->draw_color = decode->fg_color;
 8004d64:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8004d68:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
}
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	b005      	add	sp, #20
 8004d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f->decode_ptr++;
 8004d74:	f101 0901 	add.w	r9, r1, #1
 8004d78:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004d7c:	7849      	ldrb	r1, [r1, #1]
    s -= bit_pos;
 8004d7e:	f1c5 0308 	rsb	r3, r5, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	fa01 f303 	lsl.w	r3, r1, r3
    bit_pos_plus_cnt -= 8;
 8004d88:	f1ab 0b08 	sub.w	fp, fp, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004d8c:	ea43 0e0e 	orr.w	lr, r3, lr
    bit_pos_plus_cnt -= 8;
 8004d90:	fa5f fb8b 	uxtb.w	fp, fp
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004d94:	fa5f fe8e 	uxtb.w	lr, lr
    bit_pos_plus_cnt -= 8;
 8004d98:	e774      	b.n	8004c84 <u8g2_font_decode_glyph+0xc0>
    f->decode_ptr++;
 8004d9a:	f10e 0101 	add.w	r1, lr, #1
 8004d9e:	65a1      	str	r1, [r4, #88]	; 0x58
    s -= bit_pos;
 8004da0:	f1c0 0308 	rsb	r3, r0, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004da4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	fa00 f303 	lsl.w	r3, r0, r3
    bit_pos_plus_cnt -= 8;
 8004dae:	3d08      	subs	r5, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004db0:	431a      	orrs	r2, r3
    bit_pos_plus_cnt -= 8;
 8004db2:	b2ed      	uxtb	r5, r5
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004db4:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
 8004db6:	e753      	b.n	8004c60 <u8g2_font_decode_glyph+0x9c>
    f->decode_ptr++;
 8004db8:	f101 0e01 	add.w	lr, r1, #1
 8004dbc:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004dc0:	784e      	ldrb	r6, [r1, #1]
    s -= bit_pos;
 8004dc2:	f1c2 0208 	rsb	r2, r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	4096      	lsls	r6, r2
    bit_pos_plus_cnt -= 8;
 8004dca:	f1a0 0308 	sub.w	r3, r0, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004dce:	433e      	orrs	r6, r7
    bit_pos_plus_cnt -= 8;
 8004dd0:	b2d8      	uxtb	r0, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004dd2:	b2f6      	uxtb	r6, r6
    bit_pos_plus_cnt -= 8;
 8004dd4:	e722      	b.n	8004c1c <u8g2_font_decode_glyph+0x58>
 8004dd6:	4642      	mov	r2, r8
 8004dd8:	e708      	b.n	8004bec <u8g2_font_decode_glyph+0x28>
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004dda:	f1c8 0101 	rsb	r1, r8, #1
 8004dde:	4401      	add	r1, r0
	    y1++;
 8004de0:	3201      	adds	r2, #1
	    x1 += h;
 8004de2:	eb09 0306 	add.w	r3, r9, r6
	    y1++;
 8004de6:	b2d0      	uxtb	r0, r2
	    x1 += h;
 8004de8:	b2db      	uxtb	r3, r3
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004dea:	b2ca      	uxtb	r2, r1
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8004dec:	9000      	str	r0, [sp, #0]
 8004dee:	4649      	mov	r1, r9
 8004df0:	4620      	mov	r0, r4
 8004df2:	f000 fa19 	bl	8005228 <u8g2_IsIntersection>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d0b8      	beq.n	8004d6c <u8g2_font_decode_glyph+0x1a8>
    decode->x = 0;
 8004dfa:	2200      	movs	r2, #0
  val &= (1U<<cnt)-1;
 8004dfc:	f04f 39ff 	mov.w	r9, #4294967295
  uint8_t bit_pos = f->decode_bit_pos;
 8004e00:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
    decode->x = 0;
 8004e04:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8004e08:	f894 c06a 	ldrb.w	ip, [r4, #106]	; 0x6a
  val = u8x8_pgm_read( f->decode_ptr );  
 8004e0c:	6da6      	ldr	r6, [r4, #88]	; 0x58
  bit_pos_plus_cnt += cnt;
 8004e0e:	eb0c 0203 	add.w	r2, ip, r3
  val >>= bit_pos;
 8004e12:	f896 8000 	ldrb.w	r8, [r6]
  bit_pos_plus_cnt += cnt;
 8004e16:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 8004e18:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 8004e1a:	fa48 f003 	asr.w	r0, r8, r3
  if ( bit_pos_plus_cnt >= 8 )
 8004e1e:	d86e      	bhi.n	8004efe <u8g2_font_decode_glyph+0x33a>
  val >>= bit_pos;
 8004e20:	4631      	mov	r1, r6
 8004e22:	fa5f f880 	uxtb.w	r8, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8004e26:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004e2a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
  bit_pos_plus_cnt += cnt;
 8004e2e:	1883      	adds	r3, r0, r2
  val >>= bit_pos;
 8004e30:	780e      	ldrb	r6, [r1, #0]
  bit_pos_plus_cnt += cnt;
 8004e32:	b2db      	uxtb	r3, r3
  val &= (1U<<cnt)-1;
 8004e34:	fa09 fc0c 	lsl.w	ip, r9, ip
  if ( bit_pos_plus_cnt >= 8 )
 8004e38:	2b07      	cmp	r3, #7
  val &= (1U<<cnt)-1;
 8004e3a:	ea28 080c 	bic.w	r8, r8, ip
  val >>= bit_pos;
 8004e3e:	fa46 f602 	asr.w	r6, r6, r2
  if ( bit_pos_plus_cnt >= 8 )
 8004e42:	d90c      	bls.n	8004e5e <u8g2_font_decode_glyph+0x29a>
    f->decode_ptr++;
 8004e44:	f101 0c01 	add.w	ip, r1, #1
 8004e48:	f8c4 c058 	str.w	ip, [r4, #88]	; 0x58
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004e4c:	7849      	ldrb	r1, [r1, #1]
    s -= bit_pos;
 8004e4e:	f1c2 0208 	rsb	r2, r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004e52:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
 8004e54:	3b08      	subs	r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004e56:	fa01 f202 	lsl.w	r2, r1, r2
    bit_pos_plus_cnt -= 8;
 8004e5a:	b2db      	uxtb	r3, r3
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004e5c:	4316      	orrs	r6, r2
 8004e5e:	b2f6      	uxtb	r6, r6
  val &= (1U<<cnt)-1;
 8004e60:	fa09 f000 	lsl.w	r0, r9, r0
 8004e64:	ea26 0600 	bic.w	r6, r6, r0
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004e68:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
  return val;
 8004e6c:	e006      	b.n	8004e7c <u8g2_font_decode_glyph+0x2b8>
  val >>= bit_pos;
 8004e6e:	fa5f f28c 	uxtb.w	r2, ip
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8004e72:	07d2      	lsls	r2, r2, #31
  f->decode_bit_pos = bit_pos_plus_cnt;
 8004e74:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8004e78:	f57f af70 	bpl.w	8004d5c <u8g2_font_decode_glyph+0x198>
	u8g2_font_decode_len(u8g2, a, 0);
 8004e7c:	4641      	mov	r1, r8
 8004e7e:	4620      	mov	r0, r4
 8004e80:	2200      	movs	r2, #0
 8004e82:	f7ff fe3f 	bl	8004b04 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8004e86:	2201      	movs	r2, #1
 8004e88:	4631      	mov	r1, r6
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f7ff fe3a 	bl	8004b04 <u8g2_font_decode_len>
  uint8_t bit_pos = f->decode_bit_pos;
 8004e90:	f894 1062 	ldrb.w	r1, [r4, #98]	; 0x62
  val = u8x8_pgm_read( f->decode_ptr );  
 8004e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
  bit_pos_plus_cnt += cnt;
 8004e96:	1c4b      	adds	r3, r1, #1
  val >>= bit_pos;
 8004e98:	7802      	ldrb	r2, [r0, #0]
  bit_pos_plus_cnt += cnt;
 8004e9a:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 8004e9c:	2b07      	cmp	r3, #7
  val >>= bit_pos;
 8004e9e:	fa42 fc01 	asr.w	ip, r2, r1
  if ( bit_pos_plus_cnt >= 8 )
 8004ea2:	d9e4      	bls.n	8004e6e <u8g2_font_decode_glyph+0x2aa>
    f->decode_ptr++;
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	65a3      	str	r3, [r4, #88]	; 0x58
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004ea8:	7842      	ldrb	r2, [r0, #1]
    s -= bit_pos;
 8004eaa:	f1c1 0308 	rsb	r3, r1, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	409a      	lsls	r2, r3
 8004eb2:	ea42 020c 	orr.w	r2, r2, ip
    bit_pos_plus_cnt -= 8;
 8004eb6:	1fcb      	subs	r3, r1, #7
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004eb8:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	e7d9      	b.n	8004e72 <u8g2_font_decode_glyph+0x2ae>
	    x1 += decode->glyph_width;
 8004ebe:	eb09 0308 	add.w	r3, r9, r8
	    y1 += h;
 8004ec2:	4430      	add	r0, r6
	    x1 += decode->glyph_width;
 8004ec4:	b2db      	uxtb	r3, r3
	    y1 += h;
 8004ec6:	b2c0      	uxtb	r0, r0
	    break;
 8004ec8:	e790      	b.n	8004dec <u8g2_font_decode_glyph+0x228>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004eca:	f1c6 0101 	rsb	r1, r6, #1
	    x1++;
 8004ece:	f109 0301 	add.w	r3, r9, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004ed2:	4449      	add	r1, r9
	    y1 += decode->glyph_width;
 8004ed4:	4440      	add	r0, r8
	    x1++;
 8004ed6:	b2db      	uxtb	r3, r3
	    y1 += decode->glyph_width;
 8004ed8:	b2c0      	uxtb	r0, r0
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004eda:	fa5f f981 	uxtb.w	r9, r1
	    break;
 8004ede:	e785      	b.n	8004dec <u8g2_font_decode_glyph+0x228>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004ee0:	f1c8 0101 	rsb	r1, r8, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004ee4:	f1c6 0601 	rsb	r6, r6, #1
	    x1++;
 8004ee8:	f109 0301 	add.w	r3, r9, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004eec:	4406      	add	r6, r0
	    y1++;
 8004eee:	3201      	adds	r2, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004ef0:	4449      	add	r1, r9
	    y1++;
 8004ef2:	b2d0      	uxtb	r0, r2
	    x1++;
 8004ef4:	b2db      	uxtb	r3, r3
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004ef6:	b2f2      	uxtb	r2, r6
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8004ef8:	fa5f f981 	uxtb.w	r9, r1
	    break;	  
 8004efc:	e776      	b.n	8004dec <u8g2_font_decode_glyph+0x228>
    f->decode_ptr++;
 8004efe:	1c71      	adds	r1, r6, #1
 8004f00:	65a1      	str	r1, [r4, #88]	; 0x58
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004f02:	f896 8001 	ldrb.w	r8, [r6, #1]
    s -= bit_pos;
 8004f06:	f1c3 0308 	rsb	r3, r3, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	fa08 f803 	lsl.w	r8, r8, r3
    bit_pos_plus_cnt -= 8;
 8004f10:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004f12:	ea48 0800 	orr.w	r8, r8, r0
    bit_pos_plus_cnt -= 8;
 8004f16:	b2d2      	uxtb	r2, r2
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8004f18:	fa5f f888 	uxtb.w	r8, r8
    bit_pos_plus_cnt -= 8;
 8004f1c:	e783      	b.n	8004e26 <u8g2_font_decode_glyph+0x262>
      switch(decode->dir)
 8004f1e:	464b      	mov	r3, r9
 8004f20:	e764      	b.n	8004dec <u8g2_font_decode_glyph+0x228>
 8004f22:	bf00      	nop

08004f24 <u8g2_font_get_glyph_data>:
{
 8004f24:	b570      	push	{r4, r5, r6, lr}
  const uint8_t *font = u8g2->font;
 8004f26:	6d04      	ldr	r4, [r0, #80]	; 0x50
  if ( encoding <= 255 )
 8004f28:	29ff      	cmp	r1, #255	; 0xff
{
 8004f2a:	460d      	mov	r5, r1
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8004f2c:	f104 0417 	add.w	r4, r4, #23
  if ( encoding <= 255 )
 8004f30:	d80e      	bhi.n	8004f50 <u8g2_font_get_glyph_data+0x2c>
    if ( encoding >= 'a' )
 8004f32:	2960      	cmp	r1, #96	; 0x60
 8004f34:	d930      	bls.n	8004f98 <u8g2_font_get_glyph_data+0x74>
      font += u8g2->font_info.start_pos_lower_a;
 8004f36:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8004f3a:	441c      	add	r4, r3
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004f3c:	7860      	ldrb	r0, [r4, #1]
 8004f3e:	b130      	cbz	r0, 8004f4e <u8g2_font_get_glyph_data+0x2a>
      if ( u8x8_pgm_read( font ) == encoding )
 8004f40:	7823      	ldrb	r3, [r4, #0]
 8004f42:	42ab      	cmp	r3, r5
 8004f44:	d02e      	beq.n	8004fa4 <u8g2_font_get_glyph_data+0x80>
      font += u8x8_pgm_read( font + 1 );
 8004f46:	4404      	add	r4, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8004f48:	7860      	ldrb	r0, [r4, #1]
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d1f8      	bne.n	8004f40 <u8g2_font_get_glyph_data+0x1c>
}
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
    font += u8g2->font_info.start_pos_unicode;
 8004f50:	f8b0 007e 	ldrh.w	r0, [r0, #126]	; 0x7e
 8004f54:	4404      	add	r4, r0
    unicode_lookup_table = font; 
 8004f56:	4626      	mov	r6, r4
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8004f58:	2100      	movs	r1, #0
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	f7ff fd6c 	bl	8004a38 <u8g2_font_get_word>
 8004f60:	4603      	mov	r3, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8004f62:	2102      	movs	r1, #2
 8004f64:	4630      	mov	r0, r6
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8004f66:	441c      	add	r4, r3
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8004f68:	f7ff fd66 	bl	8004a38 <u8g2_font_get_word>
    } while( e < encoding );
 8004f6c:	4285      	cmp	r5, r0
      unicode_lookup_table+=4;
 8004f6e:	f106 0604 	add.w	r6, r6, #4
    } while( e < encoding );
 8004f72:	d8f1      	bhi.n	8004f58 <u8g2_font_get_glyph_data+0x34>
      e |= u8x8_pgm_read( font + 1 );
 8004f74:	8820      	ldrh	r0, [r4, #0]
 8004f76:	ba40      	rev16	r0, r0
 8004f78:	b280      	uxth	r0, r0
      if ( e == 0 )
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	d0e7      	beq.n	8004f4e <u8g2_font_get_glyph_data+0x2a>
      if ( e == encoding )
 8004f7e:	4285      	cmp	r5, r0
 8004f80:	d008      	beq.n	8004f94 <u8g2_font_get_glyph_data+0x70>
      font += u8x8_pgm_read( font + 2 );
 8004f82:	78a3      	ldrb	r3, [r4, #2]
 8004f84:	441c      	add	r4, r3
      e |= u8x8_pgm_read( font + 1 );
 8004f86:	8820      	ldrh	r0, [r4, #0]
 8004f88:	ba40      	rev16	r0, r0
 8004f8a:	b280      	uxth	r0, r0
      if ( e == 0 )
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d0de      	beq.n	8004f4e <u8g2_font_get_glyph_data+0x2a>
      if ( e == encoding )
 8004f90:	4285      	cmp	r5, r0
 8004f92:	d1f6      	bne.n	8004f82 <u8g2_font_get_glyph_data+0x5e>
	return font+3;	/* skip encoding and glyph size */
 8004f94:	1ce0      	adds	r0, r4, #3
}
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
    else if ( encoding >= 'A' )
 8004f98:	2940      	cmp	r1, #64	; 0x40
 8004f9a:	d9d5      	bls.n	8004f48 <u8g2_font_get_glyph_data+0x24>
      font += u8g2->font_info.start_pos_upper_A;
 8004f9c:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
 8004fa0:	441c      	add	r4, r3
 8004fa2:	e7d1      	b.n	8004f48 <u8g2_font_get_glyph_data+0x24>
	return font+2;	/* skip encoding and glyph size */
 8004fa4:	1ca0      	adds	r0, r4, #2
}
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}

08004fa8 <u8g2_DrawGlyph>:
{
 8004fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004faa:	461e      	mov	r6, r3
  switch(u8g2->font_decode.dir)
 8004fac:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
{
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	460f      	mov	r7, r1
 8004fb4:	4615      	mov	r5, r2
  switch(u8g2->font_decode.dir)
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d807      	bhi.n	8004fca <u8g2_DrawGlyph+0x22>
 8004fba:	e8df f003 	tbb	[pc, r3]
 8004fbe:	1a1f      	.short	0x1a1f
 8004fc0:	0215      	.short	0x0215
      x += u8g2->font_calc_vref(u8g2);
 8004fc2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004fc4:	4798      	blx	r3
 8004fc6:	4407      	add	r7, r0
 8004fc8:	b2ff      	uxtb	r7, r7
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4620      	mov	r0, r4
  u8g2->font_decode.target_x = x;
 8004fce:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8004fd2:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8004fd6:	f7ff ffa5 	bl	8004f24 <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
 8004fda:	b120      	cbz	r0, 8004fe6 <u8g2_DrawGlyph+0x3e>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8004fdc:	4601      	mov	r1, r0
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f7ff fdf0 	bl	8004bc4 <u8g2_font_decode_glyph>
 8004fe4:	b2c0      	uxtb	r0, r0
}
 8004fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      y -= u8g2->font_calc_vref(u8g2);
 8004fe8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004fea:	4798      	blx	r3
 8004fec:	1a2d      	subs	r5, r5, r0
 8004fee:	b2ed      	uxtb	r5, r5
      break;
 8004ff0:	e7eb      	b.n	8004fca <u8g2_DrawGlyph+0x22>
      x -= u8g2->font_calc_vref(u8g2);
 8004ff2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004ff4:	4798      	blx	r3
 8004ff6:	1a3f      	subs	r7, r7, r0
 8004ff8:	b2ff      	uxtb	r7, r7
      break;
 8004ffa:	e7e6      	b.n	8004fca <u8g2_DrawGlyph+0x22>
      y += u8g2->font_calc_vref(u8g2);
 8004ffc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004ffe:	4798      	blx	r3
 8005000:	4405      	add	r5, r0
 8005002:	b2ed      	uxtb	r5, r5
      break;
 8005004:	e7e1      	b.n	8004fca <u8g2_DrawGlyph+0x22>
 8005006:	bf00      	nop

08005008 <u8g2_draw_string>:
{
 8005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	461d      	mov	r5, r3
 800500e:	4604      	mov	r4, r0
 8005010:	460f      	mov	r7, r1
 8005012:	4616      	mov	r6, r2
  sum = 0;
 8005014:	f04f 0900 	mov.w	r9, #0
    if ( e == 0x0ffff )
 8005018:	f64f 78ff 	movw	r8, #65535	; 0xffff
    if ( e != 0x0fffe )
 800501c:	f64f 7afe 	movw	sl, #65534	; 0xfffe
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8005020:	f000 fac0 	bl	80055a4 <u8x8_utf8_init>
  sum = 0;
 8005024:	3d01      	subs	r5, #1
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8005026:	4620      	mov	r0, r4
 8005028:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	4798      	blx	r3
    if ( e == 0x0ffff )
 8005030:	4540      	cmp	r0, r8
 8005032:	d01e      	beq.n	8005072 <u8g2_draw_string+0x6a>
    if ( e != 0x0fffe )
 8005034:	4550      	cmp	r0, sl
 8005036:	d0f6      	beq.n	8005026 <u8g2_draw_string+0x1e>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8005038:	4603      	mov	r3, r0
 800503a:	4632      	mov	r2, r6
 800503c:	4639      	mov	r1, r7
 800503e:	4620      	mov	r0, r4
 8005040:	f7ff ffb2 	bl	8004fa8 <u8g2_DrawGlyph>
      switch(u8g2->font_decode.dir)
 8005044:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8005048:	2b03      	cmp	r3, #3
 800504a:	d805      	bhi.n	8005058 <u8g2_draw_string+0x50>
 800504c:	e8df f003 	tbb	[pc, r3]
 8005050:	020e080b 	.word	0x020e080b
	  y -= delta;
 8005054:	1a36      	subs	r6, r6, r0
 8005056:	b2f6      	uxtb	r6, r6
      sum += delta;    
 8005058:	4481      	add	r9, r0
 800505a:	fa5f f989 	uxtb.w	r9, r9
 800505e:	e7e2      	b.n	8005026 <u8g2_draw_string+0x1e>
	  y += delta;
 8005060:	4406      	add	r6, r0
 8005062:	b2f6      	uxtb	r6, r6
	  break;
 8005064:	e7f8      	b.n	8005058 <u8g2_draw_string+0x50>
	  x += delta;
 8005066:	4407      	add	r7, r0
 8005068:	b2ff      	uxtb	r7, r7
	  break;
 800506a:	e7f5      	b.n	8005058 <u8g2_draw_string+0x50>
	  x -= delta;
 800506c:	1a3f      	subs	r7, r7, r0
 800506e:	b2ff      	uxtb	r7, r7
	  break;
 8005070:	e7f2      	b.n	8005058 <u8g2_draw_string+0x50>
}
 8005072:	4648      	mov	r0, r9
 8005074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005078 <u8g2_DrawStr>:
{
 8005078:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800507a:	4c02      	ldr	r4, [pc, #8]	; (8005084 <u8g2_DrawStr+0xc>)
 800507c:	6044      	str	r4, [r0, #4]
}
 800507e:	bc10      	pop	{r4}
  return u8g2_draw_string(u8g2, x, y, str);
 8005080:	f7ff bfc2 	b.w	8005008 <u8g2_draw_string>
 8005084:	08005595 	.word	0x08005595

08005088 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8005088:	4b01      	ldr	r3, [pc, #4]	; (8005090 <u8g2_SetFontPosBaseline+0x8>)
 800508a:	6543      	str	r3, [r0, #84]	; 0x54
}
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	08004a91 	.word	0x08004a91

08005094 <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
 8005094:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005096:	428a      	cmp	r2, r1
 8005098:	d022      	beq.n	80050e0 <u8g2_SetFont+0x4c>
{
 800509a:	b510      	push	{r4, lr}
 800509c:	4604      	mov	r4, r0
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800509e:	6501      	str	r1, [r0, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 80050a0:	3068      	adds	r0, #104	; 0x68
 80050a2:	f7ff fcf7 	bl	8004a94 <u8g2_read_font_info>
  if ( u8g2->font == NULL )
 80050a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80050a8:	b1cb      	cbz	r3, 80050de <u8g2_SetFont+0x4a>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80050aa:	f994 1075 	ldrsb.w	r1, [r4, #117]	; 0x75
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80050ae:	f994 2076 	ldrsb.w	r2, [r4, #118]	; 0x76
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80050b2:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80050b6:	f884 1082 	strb.w	r1, [r4, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80050ba:	f884 2083 	strb.w	r2, [r4, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80050be:	b173      	cbz	r3, 80050de <u8g2_SetFont+0x4a>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d00e      	beq.n	80050e2 <u8g2_SetFont+0x4e>
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80050c4:	f994 0074 	ldrsb.w	r0, [r4, #116]	; 0x74
 80050c8:	f994 3072 	ldrsb.w	r3, [r4, #114]	; 0x72
 80050cc:	4403      	add	r3, r0
 80050ce:	4299      	cmp	r1, r3
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 80050d0:	bfb8      	it	lt
 80050d2:	f884 3082 	strblt.w	r3, [r4, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 80050d6:	4282      	cmp	r2, r0
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80050d8:	bfc8      	it	gt
 80050da:	f884 0083 	strbgt.w	r0, [r4, #131]	; 0x83
    u8g2_UpdateRefHeight(u8g2);
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80050de:	bd10      	pop	{r4, pc}
 80050e0:	4770      	bx	lr
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80050e2:	f994 3077 	ldrsb.w	r3, [r4, #119]	; 0x77
 80050e6:	4299      	cmp	r1, r3
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80050e8:	bfb8      	it	lt
 80050ea:	f884 3082 	strblt.w	r3, [r4, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80050ee:	f994 3078 	ldrsb.w	r3, [r4, #120]	; 0x78
 80050f2:	429a      	cmp	r2, r3
 80050f4:	ddf3      	ble.n	80050de <u8g2_SetFont+0x4a>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80050f6:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
}
 80050fa:	bd10      	pop	{r4, pc}

080050fc <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80050fc:	b410      	push	{r4}
 80050fe:	f89d 4004 	ldrb.w	r4, [sp, #4]
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8005102:	9401      	str	r4, [sp, #4]
  y -= u8g2->pixel_curr_row;
 8005104:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8005108:	1b12      	subs	r2, r2, r4
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800510a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	46a4      	mov	ip, r4
}
 8005110:	bc10      	pop	{r4}
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8005112:	4760      	bx	ip

08005114 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8005114:	b430      	push	{r4, r5}
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8005116:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
{
 800511a:	f89d c008 	ldrb.w	ip, [sp, #8]
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800511e:	b19c      	cbz	r4, 8005148 <u8g2_DrawHVLine+0x34>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8005120:	b193      	cbz	r3, 8005148 <u8g2_DrawHVLine+0x34>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8005122:	2b01      	cmp	r3, #1
 8005124:	d005      	beq.n	8005132 <u8g2_DrawHVLine+0x1e>
      {
	if ( dir == 2 )
 8005126:	f1bc 0f02 	cmp.w	ip, #2
 800512a:	d00f      	beq.n	800514c <u8g2_DrawHVLine+0x38>
	{
	  x -= len;
	  x++;
	}
	else if ( dir == 3 )
 800512c:	f1bc 0f03 	cmp.w	ip, #3
 8005130:	d052      	beq.n	80051d8 <u8g2_DrawHVLine+0xc4>
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
 8005132:	f01c 0f01 	tst.w	ip, #1
 8005136:	d00c      	beq.n	8005152 <u8g2_DrawHVLine+0x3e>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8005138:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800513c:	428c      	cmp	r4, r1
 800513e:	d803      	bhi.n	8005148 <u8g2_DrawHVLine+0x34>
	  return;
	if ( x >= u8g2->user_x1 )
 8005140:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
 8005144:	428c      	cmp	r4, r1
 8005146:	d82c      	bhi.n	80051a2 <u8g2_DrawHVLine+0x8e>
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
}
 8005148:	bc30      	pop	{r4, r5}
 800514a:	4770      	bx	lr
	  x++;
 800514c:	3101      	adds	r1, #1
 800514e:	1ac9      	subs	r1, r1, r3
 8005150:	b2c9      	uxtb	r1, r1
	if ( y < u8g2->user_y0 )
 8005152:	f890 4047 	ldrb.w	r4, [r0, #71]	; 0x47
 8005156:	4294      	cmp	r4, r2
 8005158:	d8f6      	bhi.n	8005148 <u8g2_DrawHVLine+0x34>
	if ( y >= u8g2->user_y1 )
 800515a:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
 800515e:	4294      	cmp	r4, r2
 8005160:	d9f2      	bls.n	8005148 <u8g2_DrawHVLine+0x34>
  b += *len;
 8005162:	440b      	add	r3, r1
 8005164:	b2db      	uxtb	r3, r3
  if ( a > b )
 8005166:	4299      	cmp	r1, r3
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8005168:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800516c:	f890 c046 	ldrb.w	ip, [r0, #70]	; 0x46
  if ( a > b )
 8005170:	d93b      	bls.n	80051ea <u8g2_DrawHVLine+0xd6>
    if ( a < d )
 8005172:	458c      	cmp	ip, r1
 8005174:	d938      	bls.n	80051e8 <u8g2_DrawHVLine+0xd4>
      b--;
 8005176:	f10c 33ff 	add.w	r3, ip, #4294967295
 800517a:	b2db      	uxtb	r3, r3
  if ( b <= c )
 800517c:	429c      	cmp	r4, r3
 800517e:	d2e3      	bcs.n	8005148 <u8g2_DrawHVLine+0x34>
  if ( a < c )		
 8005180:	42a1      	cmp	r1, r4
 8005182:	bf38      	it	cc
 8005184:	4621      	movcc	r1, r4
  b -= a;
 8005186:	459c      	cmp	ip, r3
 8005188:	bf94      	ite	ls
 800518a:	ebc1 040c 	rsbls	r4, r1, ip
 800518e:	ebc1 0403 	rsbhi	r4, r1, r3
 8005192:	2500      	movs	r5, #0
 8005194:	b2e3      	uxtb	r3, r4
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8005196:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005198:	9502      	str	r5, [sp, #8]
 800519a:	68a4      	ldr	r4, [r4, #8]
 800519c:	46a4      	mov	ip, r4
}
 800519e:	bc30      	pop	{r4, r5}
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 80051a0:	4760      	bx	ip
  b += *len;
 80051a2:	4413      	add	r3, r2
 80051a4:	b2db      	uxtb	r3, r3
  if ( a > b )
 80051a6:	4293      	cmp	r3, r2
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80051a8:	f890 4047 	ldrb.w	r4, [r0, #71]	; 0x47
 80051ac:	f890 c048 	ldrb.w	ip, [r0, #72]	; 0x48
  if ( a > b )
 80051b0:	d217      	bcs.n	80051e2 <u8g2_DrawHVLine+0xce>
    if ( a < d )
 80051b2:	4594      	cmp	ip, r2
 80051b4:	d914      	bls.n	80051e0 <u8g2_DrawHVLine+0xcc>
      b--;
 80051b6:	f10c 33ff 	add.w	r3, ip, #4294967295
 80051ba:	b2db      	uxtb	r3, r3
  if ( b <= c )
 80051bc:	429c      	cmp	r4, r3
 80051be:	d2c3      	bcs.n	8005148 <u8g2_DrawHVLine+0x34>
  if ( a < c )		
 80051c0:	42a2      	cmp	r2, r4
 80051c2:	bf38      	it	cc
 80051c4:	4622      	movcc	r2, r4
  b -= a;
 80051c6:	459c      	cmp	ip, r3
 80051c8:	bf94      	ite	ls
 80051ca:	ebc2 040c 	rsbls	r4, r2, ip
 80051ce:	ebc2 0403 	rsbhi	r4, r2, r3
 80051d2:	2501      	movs	r5, #1
 80051d4:	b2e3      	uxtb	r3, r4
  return 1;
 80051d6:	e7de      	b.n	8005196 <u8g2_DrawHVLine+0x82>
	  y++;
 80051d8:	3201      	adds	r2, #1
 80051da:	1ad2      	subs	r2, r2, r3
 80051dc:	b2d2      	uxtb	r2, r2
      if ( dir == 0 )
 80051de:	e7ab      	b.n	8005138 <u8g2_DrawHVLine+0x24>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80051e0:	4622      	mov	r2, r4
  if ( a >= d )
 80051e2:	4594      	cmp	ip, r2
 80051e4:	d8ea      	bhi.n	80051bc <u8g2_DrawHVLine+0xa8>
 80051e6:	e7af      	b.n	8005148 <u8g2_DrawHVLine+0x34>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80051e8:	4621      	mov	r1, r4
  if ( a >= d )
 80051ea:	458c      	cmp	ip, r1
 80051ec:	d8c6      	bhi.n	800517c <u8g2_DrawHVLine+0x68>
 80051ee:	e7ab      	b.n	8005148 <u8g2_DrawHVLine+0x34>

080051f0 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 80051f0:	b510      	push	{r4, lr}
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 80051f2:	f890 4047 	ldrb.w	r4, [r0, #71]	; 0x47
{
 80051f6:	b082      	sub	sp, #8
  if ( y < u8g2->user_y0 )
 80051f8:	4294      	cmp	r4, r2
 80051fa:	d80c      	bhi.n	8005216 <u8g2_DrawPixel+0x26>
    return;
  if ( y >= u8g2->user_y1 )
 80051fc:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
 8005200:	4294      	cmp	r4, r2
 8005202:	d908      	bls.n	8005216 <u8g2_DrawPixel+0x26>
    return;
  if ( x < u8g2->user_x0 )
 8005204:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8005208:	468e      	mov	lr, r1
 800520a:	428c      	cmp	r4, r1
 800520c:	d803      	bhi.n	8005216 <u8g2_DrawPixel+0x26>
    return;
  if ( x >= u8g2->user_x1 )
 800520e:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8005212:	428b      	cmp	r3, r1
 8005214:	d801      	bhi.n	800521a <u8g2_DrawPixel+0x2a>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
}
 8005216:	b002      	add	sp, #8
 8005218:	bd10      	pop	{r4, pc}
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 800521a:	2400      	movs	r4, #0
 800521c:	2301      	movs	r3, #1
 800521e:	9400      	str	r4, [sp, #0]
 8005220:	f7ff ff78 	bl	8005114 <u8g2_DrawHVLine>
}
 8005224:	b002      	add	sp, #8
 8005226:	bd10      	pop	{r4, pc}

08005228 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8005228:	b510      	push	{r4, lr}
  if ( v0 < a1 )		// v0 <= a1
 800522a:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
{
 800522e:	f89d c008 	ldrb.w	ip, [sp, #8]
  if ( v0 < a1 )		// v0 <= a1
 8005232:	4294      	cmp	r4, r2
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8005234:	f890 e047 	ldrb.w	lr, [r0, #71]	; 0x47
  if ( v0 < a1 )		// v0 <= a1
 8005238:	d910      	bls.n	800525c <u8g2_IsIntersection+0x34>
    if ( v1 > a0 )	// v1 >= a0
 800523a:	45e6      	cmp	lr, ip
 800523c:	d301      	bcc.n	8005242 <u8g2_IsIntersection+0x1a>
      if ( v0 > v1 )	// v0 > v1
 800523e:	4562      	cmp	r2, ip
 8005240:	d90e      	bls.n	8005260 <u8g2_IsIntersection+0x38>
  if ( v0 < a1 )		// v0 <= a1
 8005242:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8005246:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
  if ( v0 < a1 )		// v0 <= a1
 800524a:	428c      	cmp	r4, r1
 800524c:	d90a      	bls.n	8005264 <u8g2_IsIntersection+0x3c>
    if ( v1 > a0 )	// v1 >= a0
 800524e:	429a      	cmp	r2, r3
 8005250:	d30f      	bcc.n	8005272 <u8g2_IsIntersection+0x4a>
    return 0; 
 8005252:	4299      	cmp	r1, r3
 8005254:	bf94      	ite	ls
 8005256:	2000      	movls	r0, #0
 8005258:	2001      	movhi	r0, #1
}
 800525a:	bd10      	pop	{r4, pc}
    if ( v1 > a0 )	// v1 >= a0
 800525c:	45e6      	cmp	lr, ip
 800525e:	d3ee      	bcc.n	800523e <u8g2_IsIntersection+0x16>
    return 0; 
 8005260:	2000      	movs	r0, #0
}
 8005262:	bd10      	pop	{r4, pc}
    if ( v1 > a0 )	// v1 >= a0
 8005264:	429a      	cmp	r2, r3
 8005266:	d2fb      	bcs.n	8005260 <u8g2_IsIntersection+0x38>
    return 0; 
 8005268:	4299      	cmp	r1, r3
 800526a:	bf94      	ite	ls
 800526c:	2000      	movls	r0, #0
 800526e:	2001      	movhi	r0, #1
 8005270:	e7f3      	b.n	800525a <u8g2_IsIntersection+0x32>
      return 1;
 8005272:	2001      	movs	r0, #1
}
 8005274:	bd10      	pop	{r4, pc}
 8005276:	bf00      	nop

08005278 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 8005278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527c:	b083      	sub	sp, #12
 800527e:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30

  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8005282:	4299      	cmp	r1, r3
 8005284:	bf8c      	ite	hi
 8005286:	eba1 0803 	subhi.w	r8, r1, r3
 800528a:	eba3 0801 	subls.w	r8, r3, r1
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800528e:	454a      	cmp	r2, r9
{
 8005290:	460c      	mov	r4, r1
 8005292:	4682      	mov	sl, r0
 8005294:	4616      	mov	r6, r2
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 8005296:	fa5f f888 	uxtb.w	r8, r8
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800529a:	d90e      	bls.n	80052ba <u8g2_DrawLine+0x42>
 800529c:	eba2 0b09 	sub.w	fp, r2, r9
 80052a0:	fa5f fb8b 	uxtb.w	fp, fp

  if ( dy > dx ) 
 80052a4:	45d8      	cmp	r8, fp
 80052a6:	d259      	bcs.n	800535c <u8g2_DrawLine+0xe4>
 80052a8:	4611      	mov	r1, r2
 80052aa:	461e      	mov	r6, r3
 80052ac:	4622      	mov	r2, r4
  {
    swapxy = 1;
 80052ae:	2301      	movs	r3, #1
  if ( dy > dx ) 
 80052b0:	464c      	mov	r4, r9
    swapxy = 1;
 80052b2:	9301      	str	r3, [sp, #4]
  if ( dy > dx ) 
 80052b4:	4691      	mov	r9, r2
 80052b6:	460b      	mov	r3, r1
 80052b8:	e025      	b.n	8005306 <u8g2_DrawLine+0x8e>
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 80052ba:	eba9 0b02 	sub.w	fp, r9, r2
 80052be:	fa5f fb8b 	uxtb.w	fp, fp
  if ( dy > dx ) 
 80052c2:	45d8      	cmp	r8, fp
 80052c4:	d317      	bcc.n	80052f6 <u8g2_DrawLine+0x7e>
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
 80052c6:	4299      	cmp	r1, r3
 80052c8:	d94a      	bls.n	8005360 <u8g2_DrawLine+0xe8>
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
 80052ca:	4621      	mov	r1, r4
 80052cc:	461c      	mov	r4, r3
  uint8_t swapxy = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	9301      	str	r3, [sp, #4]
  err = dx >> 1;
 80052d2:	460b      	mov	r3, r1
 80052d4:	2bfe      	cmp	r3, #254	; 0xfe
 80052d6:	bf28      	it	cs
 80052d8:	23fe      	movcs	r3, #254	; 0xfe
 80052da:	4642      	mov	r2, r8
 80052dc:	b2df      	uxtb	r7, r3
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 80052de:	42bc      	cmp	r4, r7
  err = dx >> 1;
 80052e0:	464e      	mov	r6, r9
 80052e2:	f348 0547 	sbfx	r5, r8, #1, #8
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 80052e6:	f04f 39ff 	mov.w	r9, #4294967295
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 80052ea:	46d8      	mov	r8, fp
  err = dx >> 1;
 80052ec:	4693      	mov	fp, r2
  for( x = x1; x <= x2; x++ )
 80052ee:	d92c      	bls.n	800534a <u8g2_DrawLine+0xd2>
    {
      y += (u8g2_uint_t)ystep;
      err += (u8g2_uint_t)dx;
    }
  }
}
 80052f0:	b003      	add	sp, #12
 80052f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ( dy > dx ) 
 80052f6:	4619      	mov	r1, r3
 80052f8:	4622      	mov	r2, r4
    swapxy = 1;
 80052fa:	2001      	movs	r0, #1
  if ( dy > dx ) 
 80052fc:	464b      	mov	r3, r9
 80052fe:	4634      	mov	r4, r6
 8005300:	4689      	mov	r9, r1
 8005302:	4616      	mov	r6, r2
    swapxy = 1;
 8005304:	9001      	str	r0, [sp, #4]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 8005306:	454e      	cmp	r6, r9
 8005308:	bf34      	ite	cc
 800530a:	f04f 0901 	movcc.w	r9, #1
 800530e:	f04f 39ff 	movcs.w	r9, #4294967295
  err = dx >> 1;
 8005312:	f34b 0547 	sbfx	r5, fp, #1, #8
  if ( x2 == 255 )
 8005316:	2bfe      	cmp	r3, #254	; 0xfe
 8005318:	bf28      	it	cs
 800531a:	23fe      	movcs	r3, #254	; 0xfe
 800531c:	b2df      	uxtb	r7, r3
  for( x = x1; x <= x2; x++ )
 800531e:	42bc      	cmp	r4, r7
 8005320:	d913      	bls.n	800534a <u8g2_DrawLine+0xd2>
 8005322:	e7e5      	b.n	80052f0 <u8g2_DrawLine+0x78>
      u8g2_DrawPixel(u8g2, x, y); 
 8005324:	4632      	mov	r2, r6
 8005326:	4621      	mov	r1, r4
 8005328:	4650      	mov	r0, sl
 800532a:	f7ff ff61 	bl	80051f0 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 800532e:	eba5 0308 	sub.w	r3, r5, r8
 8005332:	b25d      	sxtb	r5, r3
  for( x = x1; x <= x2; x++ )
 8005334:	3401      	adds	r4, #1
    if ( err < 0 ) 
 8005336:	2d00      	cmp	r5, #0
  for( x = x1; x <= x2; x++ )
 8005338:	b2e4      	uxtb	r4, r4
    err -= (uint8_t)dy;
 800533a:	b2db      	uxtb	r3, r3
    if ( err < 0 ) 
 800533c:	da03      	bge.n	8005346 <u8g2_DrawLine+0xce>
      err += (u8g2_uint_t)dx;
 800533e:	445b      	add	r3, fp
      y += (u8g2_uint_t)ystep;
 8005340:	444e      	add	r6, r9
      err += (u8g2_uint_t)dx;
 8005342:	b25d      	sxtb	r5, r3
      y += (u8g2_uint_t)ystep;
 8005344:	b2f6      	uxtb	r6, r6
  for( x = x1; x <= x2; x++ )
 8005346:	42a7      	cmp	r7, r4
 8005348:	d3d2      	bcc.n	80052f0 <u8g2_DrawLine+0x78>
    if ( swapxy == 0 ) 
 800534a:	9b01      	ldr	r3, [sp, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0e9      	beq.n	8005324 <u8g2_DrawLine+0xac>
      u8g2_DrawPixel(u8g2, y, x); 
 8005350:	4622      	mov	r2, r4
 8005352:	4631      	mov	r1, r6
 8005354:	4650      	mov	r0, sl
 8005356:	f7ff ff4b 	bl	80051f0 <u8g2_DrawPixel>
 800535a:	e7e8      	b.n	800532e <u8g2_DrawLine+0xb6>
  if ( x1 > x2 ) 
 800535c:	4299      	cmp	r1, r3
 800535e:	d805      	bhi.n	800536c <u8g2_DrawLine+0xf4>
 8005360:	465a      	mov	r2, fp
  uint8_t swapxy = 0;
 8005362:	2100      	movs	r1, #0
  if ( x1 > x2 ) 
 8005364:	46c3      	mov	fp, r8
  uint8_t swapxy = 0;
 8005366:	9101      	str	r1, [sp, #4]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 8005368:	4690      	mov	r8, r2
 800536a:	e7cc      	b.n	8005306 <u8g2_DrawLine+0x8e>
  err = dx >> 1;
 800536c:	4621      	mov	r1, r4
 800536e:	4642      	mov	r2, r8
 8005370:	461c      	mov	r4, r3
  uint8_t swapxy = 0;
 8005372:	2300      	movs	r3, #0
  err = dx >> 1;
 8005374:	464e      	mov	r6, r9
 8005376:	f348 0547 	sbfx	r5, r8, #1, #8
  uint8_t swapxy = 0;
 800537a:	9301      	str	r3, [sp, #4]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 800537c:	46d8      	mov	r8, fp
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 800537e:	f04f 0901 	mov.w	r9, #1
  err = dx >> 1;
 8005382:	460b      	mov	r3, r1
 8005384:	4693      	mov	fp, r2
 8005386:	e7c6      	b.n	8005316 <u8g2_DrawLine+0x9e>

08005388 <u8g2_ll_hvline_vertical_top_lsb>:
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
 8005388:	f04f 0c01 	mov.w	ip, #1
{
 800538c:	b570      	push	{r4, r5, r6, lr}

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 800538e:	f890 5086 	ldrb.w	r5, [r0, #134]	; 0x86
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8005392:	f002 0407 	and.w	r4, r2, #7
  mask <<= bit_pos;
 8005396:	fa0c fc04 	lsl.w	ip, ip, r4
  if ( u8g2->draw_color <= 1 )
 800539a:	2d01      	cmp	r5, #1
{
 800539c:	f89d 6010 	ldrb.w	r6, [sp, #16]
  mask <<= bit_pos;
 80053a0:	fa5f fc8c 	uxtb.w	ip, ip
  if ( u8g2->draw_color <= 1 )
 80053a4:	d93f      	bls.n	8005426 <u8g2_ll_hvline_vertical_top_lsb+0x9e>
  or_mask = 0;
 80053a6:	f04f 0e00 	mov.w	lr, #0
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80053aa:	6805      	ldr	r5, [r0, #0]
  offset &= ~7;
 80053ac:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80053b0:	7c2d      	ldrb	r5, [r5, #16]
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
 80053b2:	fb05 1202 	mla	r2, r5, r2, r1
  ptr = u8g2->tile_buf_ptr;
 80053b6:	6b81      	ldr	r1, [r0, #56]	; 0x38
  ptr += x;
 80053b8:	440a      	add	r2, r1
  
  if ( dir == 0 )
 80053ba:	b99e      	cbnz	r6, 80053e4 <u8g2_ll_hvline_vertical_top_lsb+0x5c>
 80053bc:	1e59      	subs	r1, r3, #1
 80053be:	b2c9      	uxtb	r1, r1
 80053c0:	3101      	adds	r1, #1
 80053c2:	4411      	add	r1, r2
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80053c4:	7813      	ldrb	r3, [r2, #0]
 80053c6:	ea4e 0303 	orr.w	r3, lr, r3
	*ptr ^= xor_mask;
 80053ca:	ea8c 0303 	eor.w	r3, ip, r3
 80053ce:	f802 3b01 	strb.w	r3, [r2], #1
	ptr++;
	len--;
      } while( len != 0 );
 80053d2:	428a      	cmp	r2, r1
 80053d4:	d1f6      	bne.n	80053c4 <u8g2_ll_hvline_vertical_top_lsb+0x3c>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
	or_mask <<= 1;
 80053d8:	fa5f fe85 	uxtb.w	lr, r5
	xor_mask <<= 1;
 80053dc:	fa5f fc81 	uxtb.w	ip, r1
    } while( len != 0 );
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f8      	beq.n	80053d6 <u8g2_ll_hvline_vertical_top_lsb+0x4e>
      *ptr |= or_mask;
 80053e4:	7811      	ldrb	r1, [r2, #0]
      bit_pos++;
 80053e6:	3401      	adds	r4, #1
      *ptr |= or_mask;
 80053e8:	ea4e 0101 	orr.w	r1, lr, r1
      *ptr ^= xor_mask;
 80053ec:	ea8c 0101 	eor.w	r1, ip, r1
      len--;
 80053f0:	3b01      	subs	r3, #1
      if ( bit_pos == 0 )
 80053f2:	f014 0407 	ands.w	r4, r4, #7
      *ptr ^= xor_mask;
 80053f6:	7011      	strb	r1, [r2, #0]
      len--;
 80053f8:	b2db      	uxtb	r3, r3
	or_mask <<= 1;
 80053fa:	ea4f 054e 	mov.w	r5, lr, lsl #1
	xor_mask <<= 1;
 80053fe:	ea4f 014c 	mov.w	r1, ip, lsl #1
      if ( bit_pos == 0 )
 8005402:	d1e9      	bne.n	80053d8 <u8g2_ll_hvline_vertical_top_lsb+0x50>
	if ( u8g2->draw_color <= 1 )
 8005404:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8005408:	f890 503e 	ldrb.w	r5, [r0, #62]	; 0x3e
	if ( u8g2->draw_color <= 1 )
 800540c:	2901      	cmp	r1, #1
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800540e:	442a      	add	r2, r5
	if ( u8g2->draw_color <= 1 )
 8005410:	d904      	bls.n	800541c <u8g2_ll_hvline_vertical_top_lsb+0x94>
	  xor_mask = 1;
 8005412:	f04f 0c01 	mov.w	ip, #1
    } while( len != 0 );
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e4      	bne.n	80053e4 <u8g2_ll_hvline_vertical_top_lsb+0x5c>
 800541a:	e7dc      	b.n	80053d6 <u8g2_ll_hvline_vertical_top_lsb+0x4e>
	if ( u8g2->draw_color != 1 )
 800541c:	d108      	bne.n	8005430 <u8g2_ll_hvline_vertical_top_lsb+0xa8>
	  or_mask  = 1;
 800541e:	468e      	mov	lr, r1
    } while( len != 0 );
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1df      	bne.n	80053e4 <u8g2_ll_hvline_vertical_top_lsb+0x5c>
 8005424:	e7d7      	b.n	80053d6 <u8g2_ll_hvline_vertical_top_lsb+0x4e>
    or_mask  = mask;
 8005426:	46e6      	mov	lr, ip
  if ( u8g2->draw_color != 1 )
 8005428:	d1bf      	bne.n	80053aa <u8g2_ll_hvline_vertical_top_lsb+0x22>
  xor_mask = 0;
 800542a:	f04f 0c00 	mov.w	ip, #0
 800542e:	e7bc      	b.n	80053aa <u8g2_ll_hvline_vertical_top_lsb+0x22>
	  xor_mask = 1;
 8005430:	f04f 0c01 	mov.w	ip, #1
	  or_mask  = 1;
 8005434:	46e6      	mov	lr, ip
    } while( len != 0 );
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1d4      	bne.n	80053e4 <u8g2_ll_hvline_vertical_top_lsb+0x5c>
 800543a:	e7cc      	b.n	80053d6 <u8g2_ll_hvline_vertical_top_lsb+0x4e>

0800543c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800543c:	b410      	push	{r4}
 800543e:	f89d 4004 	ldrb.w	r4, [sp, #4]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8005442:	9401      	str	r4, [sp, #4]
}
 8005444:	bc10      	pop	{r4}
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8005446:	f7ff be59 	b.w	80050fc <u8g2_draw_hv_line_2dir>
 800544a:	bf00      	nop

0800544c <u8g2_apply_clip_window>:
{
 800544c:	b510      	push	{r4, lr}
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800544e:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
{
 8005452:	b082      	sub	sp, #8
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005454:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 8005458:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 800545c:	9100      	str	r1, [sp, #0]
 800545e:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
{
 8005462:	4604      	mov	r4, r0
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8005464:	f7ff fee0 	bl	8005228 <u8g2_IsIntersection>
 8005468:	b918      	cbnz	r0, 8005472 <u8g2_apply_clip_window+0x26>
    u8g2->is_page_clip_window_intersection = 0;
 800546a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800546e:	b002      	add	sp, #8
 8005470:	bd10      	pop	{r4, pc}
    u8g2->is_page_clip_window_intersection = 1;
 8005472:	2101      	movs	r1, #1
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005474:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8005478:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    u8g2->is_page_clip_window_intersection = 1;
 800547c:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8005480:	429a      	cmp	r2, r3
      u8g2->user_x0 = u8g2->clip_x0;
 8005482:	bf38      	it	cc
 8005484:	f884 3045 	strbcc.w	r3, [r4, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8005488:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800548c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8005490:	429a      	cmp	r2, r3
      u8g2->user_x1 = u8g2->clip_x1;
 8005492:	bf88      	it	hi
 8005494:	f884 3046 	strbhi.w	r3, [r4, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8005498:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800549c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80054a0:	429a      	cmp	r2, r3
      u8g2->user_y0 = u8g2->clip_y0;
 80054a2:	bf38      	it	cc
 80054a4:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80054a8:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80054ac:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80054b0:	429a      	cmp	r2, r3
      u8g2->user_y1 = u8g2->clip_y1;
 80054b2:	bf88      	it	hi
 80054b4:	f884 3048 	strbhi.w	r3, [r4, #72]	; 0x48
}
 80054b8:	b002      	add	sp, #8
 80054ba:	bd10      	pop	{r4, pc}

080054bc <u8g2_update_page_win_r0>:
  u8g2->user_x0 = 0;
 80054bc:	f04f 0c00 	mov.w	ip, #0
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80054c0:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
  u8g2->user_y0 = u8g2->buf_y0;
 80054c4:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80054c8:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
  u8g2->user_y1 = u8g2->buf_y1;
 80054cc:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
  u8g2->user_x0 = 0;
 80054d0:	f880 c045 	strb.w	ip, [r0, #69]	; 0x45
  u8g2->user_y0 = u8g2->buf_y0;
 80054d4:	f880 1047 	strb.w	r1, [r0, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 80054d8:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  u8g2_apply_clip_window(u8g2);
 80054dc:	f7ff bfb6 	b.w	800544c <u8g2_apply_clip_window>

080054e0 <u8g2_update_dimension_r0>:
{
 80054e0:	b510      	push	{r4, lr}
  t = u8g2->tile_buf_height;
 80054e2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80054e6:	6804      	ldr	r4, [r0, #0]
  t *= 8;
 80054e8:	00d3      	lsls	r3, r2, #3
 80054ea:	b2db      	uxtb	r3, r3
  u8g2->pixel_buf_height = t;
 80054ec:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
  t = display_info->tile_width;
 80054f0:	7c21      	ldrb	r1, [r4, #16]
  t = u8g2->tile_curr_row;
 80054f2:	f890 e03d 	ldrb.w	lr, [r0, #61]	; 0x3d
 80054f6:	291f      	cmp	r1, #31
 80054f8:	bf28      	it	cs
 80054fa:	211f      	movcs	r1, #31
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80054fc:	eb02 0c0e 	add.w	ip, r2, lr
  t *= 8;
 8005500:	ea4f 02ce 	mov.w	r2, lr, lsl #3
  t *= 8;
 8005504:	00c9      	lsls	r1, r1, #3
  t *= 8;
 8005506:	b2d2      	uxtb	r2, r2
  u8g2->pixel_curr_row = t;
 8005508:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  u8g2->pixel_buf_width = t;
 800550c:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8005510:	7c61      	ldrb	r1, [r4, #17]
 8005512:	458c      	cmp	ip, r1
 8005514:	dd03      	ble.n	800551e <u8g2_update_dimension_r0+0x3e>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8005516:	eba1 030e 	sub.w	r3, r1, lr
  t *= 8;
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	b2db      	uxtb	r3, r3
  u8g2->width = 240;
 800551e:	21f0      	movs	r1, #240	; 0xf0
  u8g2->buf_y1 += t;
 8005520:	4413      	add	r3, r2
  u8g2->width = 240;
 8005522:	f880 1043 	strb.w	r1, [r0, #67]	; 0x43
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8005526:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  u8g2->buf_y1 += t;
 800552a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if ( display_info->pixel_width <= 240 )
 800552e:	8aa3      	ldrh	r3, [r4, #20]
    u8g2->width = display_info->pixel_width;
 8005530:	428b      	cmp	r3, r1
 8005532:	bf98      	it	ls
 8005534:	4619      	movls	r1, r3
 8005536:	f880 1043 	strb.w	r1, [r0, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800553a:	8ae3      	ldrh	r3, [r4, #22]
 800553c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
}
 8005540:	bd10      	pop	{r4, pc}
 8005542:	bf00      	nop

08005544 <u8g2_SetupBuffer>:
{
 8005544:	b570      	push	{r4, r5, r6, lr}
  u8g2->draw_color = 1;
 8005546:	f240 1c01 	movw	ip, #257	; 0x101
  u8g2->font = NULL;
 800554a:	2500      	movs	r5, #0
{
 800554c:	9e04      	ldr	r6, [sp, #16]
  u8g2->draw_color = 1;
 800554e:	f8a0 c086 	strh.w	ip, [r0, #134]	; 0x86
  u8g2->tile_buf_height = tile_buf_height;
 8005552:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  u8g2->tile_curr_row = 0;
 8005556:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800555a:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 800555e:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
{
 8005562:	4604      	mov	r4, r0
  u8g2->cb = u8g2_cb;
 8005564:	e9c0 610d 	strd	r6, r1, [r0, #52]	; 0x34
  u8g2->ll_hvline = ll_hvline_cb;
 8005568:	6303      	str	r3, [r0, #48]	; 0x30
  u8g2->font = NULL;
 800556a:	6505      	str	r5, [r0, #80]	; 0x50
  u8g2->cb->update_dimension(u8g2);
 800556c:	6833      	ldr	r3, [r6, #0]
 800556e:	4798      	blx	r3
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005570:	23ff      	movs	r3, #255	; 0xff
  u8g2->cb->update_page_win(u8g2);
 8005572:	6b62      	ldr	r2, [r4, #52]	; 0x34
  u8g2->clip_x0 = 0;
 8005574:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8005578:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800557c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  u8g2->cb->update_page_win(u8g2);
 8005580:	4620      	mov	r0, r4
 8005582:	6853      	ldr	r3, [r2, #4]
 8005584:	4798      	blx	r3
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8005586:	4620      	mov	r0, r4
 8005588:	f7ff fd7e 	bl	8005088 <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 800558c:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
}
 8005590:	bd70      	pop	{r4, r5, r6, pc}
 8005592:	bf00      	nop

08005594 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8005594:	b119      	cbz	r1, 800559e <u8x8_ascii_next+0xa>
 8005596:	290a      	cmp	r1, #10
 8005598:	d001      	beq.n	800559e <u8x8_ascii_next+0xa>
    return 0x0ffff;	/* end of string detected*/
  return b;
 800559a:	b288      	uxth	r0, r1
 800559c:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected*/
 800559e:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80055a2:	4770      	bx	lr

080055a4 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80055a4:	2300      	movs	r3, #0
 80055a6:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
}
 80055aa:	4770      	bx	lr

080055ac <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80055ac:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80055ae:	6904      	ldr	r4, [r0, #16]
{
 80055b0:	460a      	mov	r2, r1
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80055b2:	46a4      	mov	ip, r4
 80055b4:	2300      	movs	r3, #0
 80055b6:	2120      	movs	r1, #32
}
 80055b8:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80055ba:	4760      	bx	ip

080055bc <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80055bc:	b410      	push	{r4}
 80055be:	460c      	mov	r4, r1
 80055c0:	4613      	mov	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80055c2:	4622      	mov	r2, r4
 80055c4:	6904      	ldr	r4, [r0, #16]
 80055c6:	2117      	movs	r1, #23
 80055c8:	46a4      	mov	ip, r4
}
 80055ca:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80055cc:	4760      	bx	ip
 80055ce:	bf00      	nop

080055d0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80055d0:	460b      	mov	r3, r1
 80055d2:	b500      	push	{lr}
 80055d4:	b083      	sub	sp, #12
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80055d6:	2101      	movs	r1, #1
 80055d8:	f10d 0207 	add.w	r2, sp, #7
{
 80055dc:	f88d 3007 	strb.w	r3, [sp, #7]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80055e0:	f7ff ffec 	bl	80055bc <u8x8_byte_SendBytes>
}
 80055e4:	b003      	add	sp, #12
 80055e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80055ea:	bf00      	nop

080055ec <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80055ec:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80055ee:	68c4      	ldr	r4, [r0, #12]
{
 80055f0:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80055f2:	46a4      	mov	ip, r4
 80055f4:	2300      	movs	r3, #0
 80055f6:	2115      	movs	r1, #21
}
 80055f8:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80055fa:	4760      	bx	ip

080055fc <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80055fc:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80055fe:	68c4      	ldr	r4, [r0, #12]
{
 8005600:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8005602:	46a4      	mov	ip, r4
 8005604:	2300      	movs	r3, #0
 8005606:	2116      	movs	r1, #22
}
 8005608:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800560a:	4760      	bx	ip

0800560c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800560c:	b410      	push	{r4}
 800560e:	460c      	mov	r4, r1
 8005610:	4613      	mov	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8005612:	4622      	mov	r2, r4
 8005614:	68c4      	ldr	r4, [r0, #12]
 8005616:	2117      	movs	r1, #23
 8005618:	46a4      	mov	ip, r4
}
 800561a:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800561c:	4760      	bx	ip
 800561e:	bf00      	nop

08005620 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005620:	2300      	movs	r3, #0
{
 8005622:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8005624:	68c4      	ldr	r4, [r0, #12]
 8005626:	2118      	movs	r1, #24
 8005628:	46a4      	mov	ip, r4
 800562a:	461a      	mov	r2, r3
}
 800562c:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800562e:	4760      	bx	ip

08005630 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005630:	2300      	movs	r3, #0
{
 8005632:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8005634:	68c4      	ldr	r4, [r0, #12]
 8005636:	2119      	movs	r1, #25
 8005638:	46a4      	mov	ip, r4
 800563a:	461a      	mov	r2, r3
}
 800563c:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800563e:	4760      	bx	ip

08005640 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8005640:	b530      	push	{r4, r5, lr}
 8005642:	4605      	mov	r5, r0
 8005644:	460c      	mov	r4, r1
 8005646:	b083      	sub	sp, #12
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8005648:	7821      	ldrb	r1, [r4, #0]
    data++;
    switch( cmd )
 800564a:	2919      	cmp	r1, #25
 800564c:	d80f      	bhi.n	800566e <u8x8_cad_SendSequence+0x2e>
 800564e:	2917      	cmp	r1, #23
 8005650:	d826      	bhi.n	80056a0 <u8x8_cad_SendSequence+0x60>
 8005652:	d117      	bne.n	8005684 <u8x8_cad_SendSequence+0x44>
	  v = *data;
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
 8005654:	7863      	ldrb	r3, [r4, #1]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8005656:	2101      	movs	r1, #1
 8005658:	4628      	mov	r0, r5
 800565a:	f10d 0207 	add.w	r2, sp, #7
	  data++;
 800565e:	3402      	adds	r4, #2
	  v = *data;
 8005660:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8005664:	f7ff ffd2 	bl	800560c <u8x8_cad_SendData>
    cmd = *data;
 8005668:	7821      	ldrb	r1, [r4, #0]
    switch( cmd )
 800566a:	2919      	cmp	r1, #25
 800566c:	d9ef      	bls.n	800564e <u8x8_cad_SendSequence+0xe>
 800566e:	29fe      	cmp	r1, #254	; 0xfe
 8005670:	d10a      	bne.n	8005688 <u8x8_cad_SendSequence+0x48>
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
 8005672:	7862      	ldrb	r2, [r4, #1]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8005674:	2129      	movs	r1, #41	; 0x29
 8005676:	4628      	mov	r0, r5
	  v = *data;
 8005678:	f88d 2007 	strb.w	r2, [sp, #7]
	  data++;
 800567c:	3402      	adds	r4, #2
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800567e:	f000 f93b 	bl	80058f8 <u8x8_gpio_call>
	  break;
 8005682:	e7e1      	b.n	8005648 <u8x8_cad_SendSequence+0x8>
    switch( cmd )
 8005684:	2914      	cmp	r1, #20
 8005686:	d801      	bhi.n	800568c <u8x8_cad_SendSequence+0x4c>
      default:
	return;
    }
  }
}
 8005688:	b003      	add	sp, #12
 800568a:	bd30      	pop	{r4, r5, pc}
	  v = *data;
 800568c:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800568e:	2300      	movs	r3, #0
 8005690:	4628      	mov	r0, r5
 8005692:	f8d5 c00c 	ldr.w	ip, [r5, #12]
	  v = *data;
 8005696:	f88d 2007 	strb.w	r2, [sp, #7]
	  data++;
 800569a:	3402      	adds	r4, #2
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800569c:	47e0      	blx	ip
	  break;
 800569e:	e7d3      	b.n	8005648 <u8x8_cad_SendSequence+0x8>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80056a0:	2300      	movs	r3, #0
 80056a2:	4628      	mov	r0, r5
 80056a4:	461a      	mov	r2, r3
 80056a6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
    data++;
 80056aa:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80056ac:	47e0      	blx	ip
	  break;
 80056ae:	e7cb      	b.n	8005648 <u8x8_cad_SendSequence+0x8>

080056b0 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80056b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b4:	4616      	mov	r6, r2
  switch(msg)
 80056b6:	f1a1 0214 	sub.w	r2, r1, #20
{
 80056ba:	460d      	mov	r5, r1
 80056bc:	4604      	mov	r4, r0
 80056be:	461f      	mov	r7, r3
  switch(msg)
 80056c0:	2a05      	cmp	r2, #5
 80056c2:	d81a      	bhi.n	80056fa <u8x8_cad_001+0x4a>
 80056c4:	e8df f002 	tbb	[pc, r2]
 80056c8:	030f0f06 	.word	0x030f0f06
 80056cc:	0606      	.short	0x0606
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 80056ce:	2101      	movs	r1, #1
 80056d0:	f7ff ff6c 	bl	80055ac <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80056d4:	4629      	mov	r1, r5
 80056d6:	6925      	ldr	r5, [r4, #16]
 80056d8:	463b      	mov	r3, r7
 80056da:	4632      	mov	r2, r6
 80056dc:	4620      	mov	r0, r4
 80056de:	46ac      	mov	ip, r5
    default:
      return 0;
  }
  return 1;
}
 80056e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80056e4:	4760      	bx	ip
      u8x8_byte_SetDC(u8x8, 0);
 80056e6:	2100      	movs	r1, #0
 80056e8:	f7ff ff60 	bl	80055ac <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 80056ec:	4631      	mov	r1, r6
 80056ee:	4620      	mov	r0, r4
 80056f0:	f7ff ff6e 	bl	80055d0 <u8x8_byte_SendByte>
  return 1;
 80056f4:	2001      	movs	r0, #1
}
 80056f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch(msg)
 80056fa:	2000      	movs	r0, #0
 80056fc:	e7fb      	b.n	80056f6 <u8x8_cad_001+0x46>
 80056fe:	bf00      	nop

08005700 <u8x8_d_ssd1306_sh1106_generic>:

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8005700:	390b      	subs	r1, #11
{
 8005702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005704:	4606      	mov	r6, r0
 8005706:	4615      	mov	r5, r2
 8005708:	461c      	mov	r4, r3
  switch(msg)
 800570a:	2904      	cmp	r1, #4
 800570c:	d852      	bhi.n	80057b4 <u8x8_d_ssd1306_sh1106_generic+0xb4>
 800570e:	e8df f001 	tbb	[pc, r1]
 8005712:	5141      	.short	0x5141
 8005714:	3247      	.short	0x3247
 8005716:	03          	.byte	0x03
 8005717:	00          	.byte	0x00
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8005718:	f7ff ff82 	bl	8005620 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 800571c:	7963      	ldrb	r3, [r4, #5]
      x *= 8;
      x += u8x8->x_offset;
 800571e:	f896 7022 	ldrb.w	r7, [r6, #34]	; 0x22
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8005722:	2140      	movs	r1, #64	; 0x40
      x += u8x8->x_offset;
 8005724:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8005728:	f007 07ff 	and.w	r7, r7, #255	; 0xff
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800572c:	4630      	mov	r0, r6
 800572e:	f7ff ff5d 	bl	80055ec <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8005732:	0939      	lsrs	r1, r7, #4
 8005734:	f041 0110 	orr.w	r1, r1, #16
 8005738:	4630      	mov	r0, r6
 800573a:	f7ff ff57 	bl	80055ec <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 800573e:	f007 010f 	and.w	r1, r7, #15
 8005742:	4630      	mov	r0, r6
 8005744:	f7ff ff5a 	bl	80055fc <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8005748:	79a1      	ldrb	r1, [r4, #6]
 800574a:	4630      	mov	r0, r6
 800574c:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 8005750:	f7ff ff54 	bl	80055fc <u8x8_cad_SendArg>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8005754:	7921      	ldrb	r1, [r4, #4]
 8005756:	6822      	ldr	r2, [r4, #0]
 8005758:	00c9      	lsls	r1, r1, #3
 800575a:	4630      	mov	r0, r6
 800575c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8005760:	f7ff ff54 	bl	800560c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8005764:	1e6a      	subs	r2, r5, #1
      } while( arg_int > 0 );
 8005766:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 800576a:	d1f3      	bne.n	8005754 <u8x8_d_ssd1306_sh1106_generic+0x54>
      
      u8x8_cad_EndTransfer(u8x8);
 800576c:	4630      	mov	r0, r6
 800576e:	f7ff ff5f 	bl	8005630 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
 8005772:	2001      	movs	r0, #1
}
 8005774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8_cad_StartTransfer(u8x8);
 8005776:	f7ff ff53 	bl	8005620 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 800577a:	2181      	movs	r1, #129	; 0x81
 800577c:	4630      	mov	r0, r6
 800577e:	f7ff ff35 	bl	80055ec <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8005782:	4629      	mov	r1, r5
 8005784:	4630      	mov	r0, r6
 8005786:	f7ff ff39 	bl	80055fc <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 800578a:	4630      	mov	r0, r6
 800578c:	f7ff ff50 	bl	8005630 <u8x8_cad_EndTransfer>
  return 1;
 8005790:	2001      	movs	r0, #1
}
 8005792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( arg_int == 0 )
 8005794:	b9ca      	cbnz	r2, 80057ca <u8x8_d_ssd1306_sh1106_generic+0xca>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8005796:	490f      	ldr	r1, [pc, #60]	; (80057d4 <u8x8_d_ssd1306_sh1106_generic+0xd4>)
 8005798:	f7ff ff52 	bl	8005640 <u8x8_cad_SendSequence>
  return 1;
 800579c:	2001      	movs	r0, #1
}
 800579e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( arg_int == 0 )
 80057a0:	b952      	cbnz	r2, 80057b8 <u8x8_d_ssd1306_sh1106_generic+0xb8>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 80057a2:	490d      	ldr	r1, [pc, #52]	; (80057d8 <u8x8_d_ssd1306_sh1106_generic+0xd8>)
 80057a4:	f7ff ff4c 	bl	8005640 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80057a8:	6833      	ldr	r3, [r6, #0]
  return 1;
 80057aa:	2001      	movs	r0, #1
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80057ac:	7c9b      	ldrb	r3, [r3, #18]
 80057ae:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
}
 80057b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch(msg)
 80057b4:	2000      	movs	r0, #0
}
 80057b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80057b8:	4908      	ldr	r1, [pc, #32]	; (80057dc <u8x8_d_ssd1306_sh1106_generic+0xdc>)
 80057ba:	f7ff ff41 	bl	8005640 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80057be:	6833      	ldr	r3, [r6, #0]
  return 1;
 80057c0:	2001      	movs	r0, #1
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80057c2:	7cdb      	ldrb	r3, [r3, #19]
 80057c4:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
}
 80057c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 80057ca:	4905      	ldr	r1, [pc, #20]	; (80057e0 <u8x8_d_ssd1306_sh1106_generic+0xe0>)
 80057cc:	f7ff ff38 	bl	8005640 <u8x8_cad_SendSequence>
  return 1;
 80057d0:	2001      	movs	r0, #1
}
 80057d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057d4:	0800a694 	.word	0x0800a694
 80057d8:	0800a64c 	.word	0x0800a64c
 80057dc:	0800a654 	.word	0x0800a654
 80057e0:	0800a69c 	.word	0x0800a69c

080057e4 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4605      	mov	r5, r0
 80057e8:	460c      	mov	r4, r1
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80057ea:	f7ff ff89 	bl	8005700 <u8x8_d_ssd1306_sh1106_generic>
 80057ee:	b998      	cbnz	r0, 8005818 <u8x8_d_ssd1306_128x64_noname+0x34>
    return 1;
  
  switch(msg)
 80057f0:	2c09      	cmp	r4, #9
 80057f2:	d00b      	beq.n	800580c <u8x8_d_ssd1306_128x64_noname+0x28>
 80057f4:	2c0a      	cmp	r4, #10
 80057f6:	d000      	beq.n	80057fa <u8x8_d_ssd1306_128x64_noname+0x16>
      break;
    default:
      return 0;
  }
  return 1;
}
 80057f8:	bd38      	pop	{r3, r4, r5, pc}
      u8x8_d_helper_display_init(u8x8);
 80057fa:	4628      	mov	r0, r5
 80057fc:	f000 f818 	bl	8005830 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8005800:	4628      	mov	r0, r5
 8005802:	4906      	ldr	r1, [pc, #24]	; (800581c <u8x8_d_ssd1306_128x64_noname+0x38>)
 8005804:	f7ff ff1c 	bl	8005640 <u8x8_cad_SendSequence>
  return 1;
 8005808:	2001      	movs	r0, #1
}
 800580a:	bd38      	pop	{r3, r4, r5, pc}
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 800580c:	4628      	mov	r0, r5
 800580e:	4904      	ldr	r1, [pc, #16]	; (8005820 <u8x8_d_ssd1306_128x64_noname+0x3c>)
 8005810:	f000 f808 	bl	8005824 <u8x8_d_helper_display_setup_memory>
  return 1;
 8005814:	2001      	movs	r0, #1
}
 8005816:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 8005818:	2001      	movs	r0, #1
}
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	0800a65c 	.word	0x0800a65c
 8005820:	0800a6a4 	.word	0x0800a6a4

08005824 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8005824:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8005826:	7c8b      	ldrb	r3, [r1, #18]
 8005828:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop

08005830 <u8x8_d_helper_display_init>:
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8005830:	2300      	movs	r3, #0
{
 8005832:	b510      	push	{r4, lr}
      u8x8_gpio_Init(u8x8);
 8005834:	461a      	mov	r2, r3
 8005836:	2128      	movs	r1, #40	; 0x28
 8005838:	f8d0 c014 	ldr.w	ip, [r0, #20]
{
 800583c:	4604      	mov	r4, r0
      u8x8_gpio_Init(u8x8);
 800583e:	47e0      	blx	ip
      u8x8_cad_Init(u8x8);
 8005840:	2300      	movs	r3, #0
 8005842:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8005846:	461a      	mov	r2, r3
 8005848:	2114      	movs	r1, #20
 800584a:	4620      	mov	r0, r4
 800584c:	47e0      	blx	ip

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800584e:	4620      	mov	r0, r4
 8005850:	2201      	movs	r2, #1
 8005852:	214b      	movs	r1, #75	; 0x4b
 8005854:	f000 f850 	bl	80058f8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	4620      	mov	r0, r4
 800585c:	791a      	ldrb	r2, [r3, #4]
 800585e:	2129      	movs	r1, #41	; 0x29
 8005860:	f000 f84a 	bl	80058f8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8005864:	4620      	mov	r0, r4
 8005866:	2200      	movs	r2, #0
 8005868:	214b      	movs	r1, #75	; 0x4b
 800586a:	f000 f845 	bl	80058f8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	4620      	mov	r0, r4
 8005872:	791a      	ldrb	r2, [r3, #4]
 8005874:	2129      	movs	r1, #41	; 0x29
 8005876:	f000 f83f 	bl	80058f8 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 800587a:	4620      	mov	r0, r4
 800587c:	2201      	movs	r2, #1
 800587e:	214b      	movs	r1, #75	; 0x4b
 8005880:	f000 f83a 	bl	80058f8 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	4620      	mov	r0, r4
}    
 8005888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800588c:	2129      	movs	r1, #41	; 0x29
 800588e:	795a      	ldrb	r2, [r3, #5]
 8005890:	f000 b832 	b.w	80058f8 <u8x8_gpio_call>

08005894 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8005894:	b510      	push	{r4, lr}
 8005896:	4614      	mov	r4, r2
 8005898:	b082      	sub	sp, #8
  u8x8_tile_t tile;
  tile.x_pos = x;
 800589a:	f88d 1005 	strb.w	r1, [sp, #5]
{
 800589e:	9904      	ldr	r1, [sp, #16]
  tile.y_pos = y;
 80058a0:	f88d 4006 	strb.w	r4, [sp, #6]
  tile.cnt = cnt;
 80058a4:	f88d 3004 	strb.w	r3, [sp, #4]
  tile.tile_ptr = tile_ptr;
 80058a8:	9100      	str	r1, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80058aa:	2201      	movs	r2, #1
 80058ac:	466b      	mov	r3, sp
 80058ae:	210f      	movs	r1, #15
 80058b0:	6884      	ldr	r4, [r0, #8]
 80058b2:	47a0      	blx	r4
}
 80058b4:	b002      	add	sp, #8
 80058b6:	bd10      	pop	{r4, pc}

080058b8 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80058b8:	2300      	movs	r3, #0
{
 80058ba:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80058bc:	6884      	ldr	r4, [r0, #8]
 80058be:	2109      	movs	r1, #9
 80058c0:	46a4      	mov	ip, r4
 80058c2:	461a      	mov	r2, r3
}
 80058c4:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80058c6:	4760      	bx	ip

080058c8 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80058c8:	2300      	movs	r3, #0
{
 80058ca:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80058cc:	6884      	ldr	r4, [r0, #8]
 80058ce:	210a      	movs	r1, #10
 80058d0:	46a4      	mov	ip, r4
 80058d2:	461a      	mov	r2, r3
}
 80058d4:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80058d6:	4760      	bx	ip

080058d8 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80058d8:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80058da:	6884      	ldr	r4, [r0, #8]
{
 80058dc:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80058de:	46a4      	mov	ip, r4
 80058e0:	2300      	movs	r3, #0
 80058e2:	210b      	movs	r1, #11
}
 80058e4:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80058e6:	4760      	bx	ip

080058e8 <u8x8_RefreshDisplay>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80058e8:	2300      	movs	r3, #0
{
 80058ea:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80058ec:	6884      	ldr	r4, [r0, #8]
 80058ee:	2110      	movs	r1, #16
 80058f0:	46a4      	mov	ip, r4
 80058f2:	461a      	mov	r2, r3
}
 80058f4:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80058f6:	4760      	bx	ip

080058f8 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80058f8:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80058fa:	6944      	ldr	r4, [r0, #20]
 80058fc:	2300      	movs	r3, #0
 80058fe:	46a4      	mov	ip, r4
}
 8005900:	bc10      	pop	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8005902:	4760      	bx	ip

08005904 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8005904:	b510      	push	{r4, lr}
    u8x8->display_info = NULL;
 8005906:	2400      	movs	r4, #0
    u8x8->i2c_address = 255;
 8005908:	f04f 0eff 	mov.w	lr, #255	; 0xff
  u8x8_SetupDefaults(u8x8);

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
 800590c:	6103      	str	r3, [r0, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800590e:	9b02      	ldr	r3, [sp, #8]
    u8x8->display_info = NULL;
 8005910:	6004      	str	r4, [r0, #0]
    u8x8->is_font_inverse_mode = 0;
 8005912:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
    u8x8->device_address = 0;
 8005916:	84c4      	strh	r4, [r0, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8005918:	6184      	str	r4, [r0, #24]
    u8x8->i2c_address = 255;
 800591a:	f880 e024 	strb.w	lr, [r0, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800591e:	f880 e029 	strb.w	lr, [r0, #41]	; 0x29
  u8x8->cad_cb = cad_cb;
 8005922:	e9c0 1202 	strd	r1, r2, [r0, #8]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
}
 8005926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800592a:	6143      	str	r3, [r0, #20]
  u8x8_SetupMemory(u8x8);
 800592c:	f7ff bfc4 	b.w	80058b8 <u8x8_SetupMemory>

08005930 <bt_receive>:
 *  	status:		0 - no error
 *  				1 - BT not initialized
 *  				2 - Timeout
 */
uint8_t bt_receive(char* buf, uint8_t maxlen)
{
 8005930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t c,i;
	uint16_t timeout;

	if (bt_initialized == BT_NOT_INITIALIZED)
 8005934:	4b1a      	ldr	r3, [pc, #104]	; (80059a0 <bt_receive+0x70>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	b35b      	cbz	r3, 8005992 <bt_receive+0x62>
		return 1;
		}

	c=0;
	i=0;
	buf[0]=0;
 800593a:	2300      	movs	r3, #0
 800593c:	4606      	mov	r6, r0

	while(c!='\n')
	{
		timeout = 1000;  // Wait max 1 sec
 800593e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	i=0;
 8005942:	461d      	mov	r5, r3
			buf[0]=0;
			return 2;
			}
		buf[i]=c;
		if (i<(maxlen-1)) i++;
		buf[i]=0;
 8005944:	4698      	mov	r8, r3
		if (i<(maxlen-1)) i++;
 8005946:	1e4f      	subs	r7, r1, #1
	buf[0]=0;
 8005948:	7003      	strb	r3, [r0, #0]
			c=uart2_getc();
 800594a:	f001 f80f 	bl	800696c <uart2_getc>
		buf[i]=c;
 800594e:	1973      	adds	r3, r6, r5
			if (c==UART_EMPTY)
 8005950:	b188      	cbz	r0, 8005976 <bt_receive+0x46>
		if (i<(maxlen-1)) i++;
 8005952:	42bd      	cmp	r5, r7
 8005954:	f105 0201 	add.w	r2, r5, #1
		buf[i]=c;
 8005958:	5570      	strb	r0, [r6, r5]
		if (i<(maxlen-1)) i++;
 800595a:	bfbc      	itt	lt
 800595c:	b2d5      	uxtblt	r5, r2
		buf[i]=0;
 800595e:	1973      	addlt	r3, r6, r5
	while(c!='\n')
 8005960:	280a      	cmp	r0, #10
		buf[i]=0;
 8005962:	f883 8000 	strb.w	r8, [r3]
	while(c!='\n')
 8005966:	d011      	beq.n	800598c <bt_receive+0x5c>
			c=uart2_getc();
 8005968:	f001 f800 	bl	800696c <uart2_getc>
		timeout = 1000;  // Wait max 1 sec
 800596c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		buf[i]=c;
 8005970:	1973      	adds	r3, r6, r5
			if (c==UART_EMPTY)
 8005972:	2800      	cmp	r0, #0
 8005974:	d1ed      	bne.n	8005952 <bt_receive+0x22>
				timeout--;
 8005976:	3c01      	subs	r4, #1
 8005978:	b2a4      	uxth	r4, r4
				HAL_Delay(5);
 800597a:	2005      	movs	r0, #5
 800597c:	f7fc fce6 	bl	800234c <HAL_Delay>
		while ((c==UART_EMPTY) && (timeout!=0) );
 8005980:	2c00      	cmp	r4, #0
 8005982:	d1e2      	bne.n	800594a <bt_receive+0x1a>
			buf[0]=0;
 8005984:	7034      	strb	r4, [r6, #0]
			return 2;
 8005986:	2002      	movs	r0, #2
	}
	return 0;
}
 8005988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return 0;
 800598c:	2000      	movs	r0, #0
}
 800598e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		printf("ERROR: BT not initialized ...\r\n");
 8005992:	4804      	ldr	r0, [pc, #16]	; (80059a4 <bt_receive+0x74>)
 8005994:	f001 ff2a 	bl	80077ec <puts>
		return 1;
 8005998:	2001      	movs	r0, #1
}
 800599a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800599e:	bf00      	nop
 80059a0:	20000ae0 	.word	0x20000ae0
 80059a4:	0800a6bc 	.word	0x0800a6bc

080059a8 <bt_program>:
 *  @return
 *  	status: 	0 - success
 *  				1 - fail
 */
uint8_t bt_program(char *newname)
{
 80059a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#ifdef BT_DEBUG
	printf("   ... bluetooth needs parameter update\r\n");
#endif

	// Power down module to enter command mode
	HAL_GPIO_WritePin(BT_PWR_GPIO_Port, BT_PWR_Pin, GPIO_PIN_RESET);
 80059aa:	2200      	movs	r2, #0
{
 80059ac:	b08b      	sub	sp, #44	; 0x2c
	HAL_GPIO_WritePin(BT_PWR_GPIO_Port, BT_PWR_Pin, GPIO_PIN_RESET);
 80059ae:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 80059b2:	4607      	mov	r7, r0
	HAL_GPIO_WritePin(BT_PWR_GPIO_Port, BT_PWR_Pin, GPIO_PIN_RESET);
 80059b4:	4863      	ldr	r0, [pc, #396]	; (8005b44 <bt_program+0x19c>)
 80059b6:	f7fc ff2b 	bl	8002810 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80059ba:	20c8      	movs	r0, #200	; 0xc8
 80059bc:	f7fc fcc6 	bl	800234c <HAL_Delay>
	// Power up BT Module in Command mode
	// i.e. BT_Key=High
	HAL_GPIO_WritePin(BT_KEY_GPIO_Port, BT_KEY_Pin, GPIO_PIN_SET);
 80059c0:	2201      	movs	r2, #1
 80059c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059c6:	485f      	ldr	r0, [pc, #380]	; (8005b44 <bt_program+0x19c>)
 80059c8:	f7fc ff22 	bl	8002810 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80059cc:	2064      	movs	r0, #100	; 0x64
 80059ce:	f7fc fcbd 	bl	800234c <HAL_Delay>
	HAL_GPIO_WritePin(BT_PWR_GPIO_Port, BT_PWR_Pin, GPIO_PIN_SET);
 80059d2:	2201      	movs	r2, #1
 80059d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059d8:	485a      	ldr	r0, [pc, #360]	; (8005b44 <bt_program+0x19c>)
 80059da:	f7fc ff19 	bl	8002810 <HAL_GPIO_WritePin>
	if (bt_initialized == BT_NOT_INITIALIZED)
 80059de:	4e5a      	ldr	r6, [pc, #360]	; (8005b48 <bt_program+0x1a0>)

	uart2_baudrate(38400);	// This is the Baudrate in Command mode
 80059e0:	f44f 4016 	mov.w	r0, #38400	; 0x9600
 80059e4:	f001 f89a 	bl	8006b1c <uart2_baudrate>

	HAL_Delay(1000);		// Wait until BT Module boots up
 80059e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059ec:	f7fc fcae 	bl	800234c <HAL_Delay>
	if (bt_initialized == BT_NOT_INITIALIZED)
 80059f0:	7833      	ldrb	r3, [r6, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d076      	beq.n	8005ae4 <bt_program+0x13c>
		uart2_putc(buf[i]);
 80059f6:	4c55      	ldr	r4, [pc, #340]	; (8005b4c <bt_program+0x1a4>)
 80059f8:	2041      	movs	r0, #65	; 0x41
 80059fa:	f000 ff91 	bl	8006920 <uart2_putc>
	while ((buf[i]) && (i<255))
 80059fe:	f104 05fe 	add.w	r5, r4, #254	; 0xfe
 8005a02:	2054      	movs	r0, #84	; 0x54
 8005a04:	e001      	b.n	8005a0a <bt_program+0x62>
 8005a06:	42ac      	cmp	r4, r5
 8005a08:	d005      	beq.n	8005a16 <bt_program+0x6e>
		uart2_putc(buf[i]);
 8005a0a:	f000 ff89 	bl	8006920 <uart2_putc>
	while ((buf[i]) && (i<255))
 8005a0e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8005a12:	2800      	cmp	r0, #0
 8005a14:	d1f7      	bne.n	8005a06 <bt_program+0x5e>

	// Check if Module responds
	bt_send("AT\r\n");
	HAL_Delay(100);
 8005a16:	2064      	movs	r0, #100	; 0x64
 8005a18:	f7fc fc98 	bl	800234c <HAL_Delay>
	bt_receive(buf,sizeof(buf));
 8005a1c:	2128      	movs	r1, #40	; 0x28
 8005a1e:	4668      	mov	r0, sp
 8005a20:	f7ff ff86 	bl	8005930 <bt_receive>
	if (strncmp(buf,"OK",2))
 8005a24:	f644 334f 	movw	r3, #19279	; 0x4b4f
 8005a28:	f8bd 2000 	ldrh.w	r2, [sp]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d005      	beq.n	8005a3c <bt_program+0x94>
	{
		printf("ERROR - Bluetooth module not responding\r\n");
 8005a30:	4847      	ldr	r0, [pc, #284]	; (8005b50 <bt_program+0x1a8>)
 8005a32:	f001 fedb 	bl	80077ec <puts>
	    return 1;
 8005a36:	2001      	movs	r0, #1
	uart2_baudrate(BT_BAUDRATE);		// This is the baudrate in Normal mode

	HAL_Delay(1000);		// Wait until BT Module boots up

	return 0;
}
 8005a38:	b00b      	add	sp, #44	; 0x2c
 8005a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sprintf(bt_name,"%s_%s",newname,BT_SUFFIX);
 8005a3c:	4b45      	ldr	r3, [pc, #276]	; (8005b54 <bt_program+0x1ac>)
 8005a3e:	463a      	mov	r2, r7
 8005a40:	4945      	ldr	r1, [pc, #276]	; (8005b58 <bt_program+0x1b0>)
 8005a42:	4846      	ldr	r0, [pc, #280]	; (8005b5c <bt_program+0x1b4>)
 8005a44:	f001 feda 	bl	80077fc <siprintf>
	sprintf(buf,"AT+NAME=%s\r\n",bt_name);
 8005a48:	4668      	mov	r0, sp
 8005a4a:	4a44      	ldr	r2, [pc, #272]	; (8005b5c <bt_program+0x1b4>)
 8005a4c:	4944      	ldr	r1, [pc, #272]	; (8005b60 <bt_program+0x1b8>)
 8005a4e:	f001 fed5 	bl	80077fc <siprintf>
	if (bt_initialized == BT_NOT_INITIALIZED)
 8005a52:	7833      	ldrb	r3, [r6, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d070      	beq.n	8005b3a <bt_program+0x192>
	while ((buf[i]) && (i<255))
 8005a58:	f89d 0000 	ldrb.w	r0, [sp]
 8005a5c:	b158      	cbz	r0, 8005a76 <bt_program+0xce>
 8005a5e:	466c      	mov	r4, sp
 8005a60:	f10d 05ff 	add.w	r5, sp, #255	; 0xff
 8005a64:	e001      	b.n	8005a6a <bt_program+0xc2>
 8005a66:	42ac      	cmp	r4, r5
 8005a68:	d005      	beq.n	8005a76 <bt_program+0xce>
		uart2_putc(buf[i]);
 8005a6a:	f000 ff59 	bl	8006920 <uart2_putc>
	while ((buf[i]) && (i<255))
 8005a6e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d1f7      	bne.n	8005a66 <bt_program+0xbe>
	bt_receive(buf,sizeof(buf));
 8005a76:	2128      	movs	r1, #40	; 0x28
 8005a78:	4668      	mov	r0, sp
 8005a7a:	f7ff ff59 	bl	8005930 <bt_receive>
	if (strncmp(buf,"OK",2))
 8005a7e:	f644 334f 	movw	r3, #19279	; 0x4b4f
 8005a82:	f8bd 2000 	ldrh.w	r2, [sp]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d005      	beq.n	8005a96 <bt_program+0xee>
		printf("ERROR - Setting bluetooth name failed\r\n");
 8005a8a:	4836      	ldr	r0, [pc, #216]	; (8005b64 <bt_program+0x1bc>)
 8005a8c:	f001 feae 	bl	80077ec <puts>
	    return 1;
 8005a90:	2001      	movs	r0, #1
}
 8005a92:	b00b      	add	sp, #44	; 0x2c
 8005a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sprintf(buf,"AT+UART=%i,0,0\r\n",BT_BAUDRATE);
 8005a96:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005a9a:	4668      	mov	r0, sp
 8005a9c:	4932      	ldr	r1, [pc, #200]	; (8005b68 <bt_program+0x1c0>)
 8005a9e:	f001 fead 	bl	80077fc <siprintf>
	if (bt_initialized == BT_NOT_INITIALIZED)
 8005aa2:	7833      	ldrb	r3, [r6, #0]
 8005aa4:	b313      	cbz	r3, 8005aec <bt_program+0x144>
	while ((buf[i]) && (i<255))
 8005aa6:	f89d 0000 	ldrb.w	r0, [sp]
 8005aaa:	b158      	cbz	r0, 8005ac4 <bt_program+0x11c>
 8005aac:	466c      	mov	r4, sp
 8005aae:	f10d 05ff 	add.w	r5, sp, #255	; 0xff
 8005ab2:	e001      	b.n	8005ab8 <bt_program+0x110>
 8005ab4:	42a5      	cmp	r5, r4
 8005ab6:	d005      	beq.n	8005ac4 <bt_program+0x11c>
		uart2_putc(buf[i]);
 8005ab8:	f000 ff32 	bl	8006920 <uart2_putc>
	while ((buf[i]) && (i<255))
 8005abc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d1f7      	bne.n	8005ab4 <bt_program+0x10c>
	bt_receive(buf,sizeof(buf));
 8005ac4:	2128      	movs	r1, #40	; 0x28
 8005ac6:	4668      	mov	r0, sp
 8005ac8:	f7ff ff32 	bl	8005930 <bt_receive>
	if (strncmp(buf,"OK",2))
 8005acc:	f644 334f 	movw	r3, #19279	; 0x4b4f
 8005ad0:	f8bd 2000 	ldrh.w	r2, [sp]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d00d      	beq.n	8005af4 <bt_program+0x14c>
		printf("ERROR - Setting bluetooth baudrate\r\n");
 8005ad8:	4824      	ldr	r0, [pc, #144]	; (8005b6c <bt_program+0x1c4>)
 8005ada:	f001 fe87 	bl	80077ec <puts>
	    return 1;
 8005ade:	2001      	movs	r0, #1
}
 8005ae0:	b00b      	add	sp, #44	; 0x2c
 8005ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("ERROR: BT not initialized ...\r\n");
 8005ae4:	4822      	ldr	r0, [pc, #136]	; (8005b70 <bt_program+0x1c8>)
 8005ae6:	f001 fe81 	bl	80077ec <puts>
		return 1;
 8005aea:	e794      	b.n	8005a16 <bt_program+0x6e>
		printf("ERROR: BT not initialized ...\r\n");
 8005aec:	4820      	ldr	r0, [pc, #128]	; (8005b70 <bt_program+0x1c8>)
 8005aee:	f001 fe7d 	bl	80077ec <puts>
		return 1;
 8005af2:	e7e7      	b.n	8005ac4 <bt_program+0x11c>
	HAL_GPIO_WritePin(BT_PWR_GPIO_Port, BT_PWR_Pin, GPIO_PIN_RESET);
 8005af4:	2200      	movs	r2, #0
 8005af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005afa:	4812      	ldr	r0, [pc, #72]	; (8005b44 <bt_program+0x19c>)
 8005afc:	f7fc fe88 	bl	8002810 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8005b00:	20c8      	movs	r0, #200	; 0xc8
 8005b02:	f7fc fc23 	bl	800234c <HAL_Delay>
	HAL_GPIO_WritePin(BT_KEY_GPIO_Port, BT_KEY_Pin, GPIO_PIN_RESET);
 8005b06:	2200      	movs	r2, #0
 8005b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b0c:	480d      	ldr	r0, [pc, #52]	; (8005b44 <bt_program+0x19c>)
 8005b0e:	f7fc fe7f 	bl	8002810 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005b12:	2064      	movs	r0, #100	; 0x64
 8005b14:	f7fc fc1a 	bl	800234c <HAL_Delay>
	HAL_GPIO_WritePin(BT_PWR_GPIO_Port, BT_PWR_Pin, GPIO_PIN_SET);
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b1e:	4809      	ldr	r0, [pc, #36]	; (8005b44 <bt_program+0x19c>)
 8005b20:	f7fc fe76 	bl	8002810 <HAL_GPIO_WritePin>
	uart2_baudrate(BT_BAUDRATE);		// This is the baudrate in Normal mode
 8005b24:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8005b28:	f000 fff8 	bl	8006b1c <uart2_baudrate>
	HAL_Delay(1000);		// Wait until BT Module boots up
 8005b2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b30:	f7fc fc0c 	bl	800234c <HAL_Delay>
	return 0;
 8005b34:	2000      	movs	r0, #0
}
 8005b36:	b00b      	add	sp, #44	; 0x2c
 8005b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("ERROR: BT not initialized ...\r\n");
 8005b3a:	480d      	ldr	r0, [pc, #52]	; (8005b70 <bt_program+0x1c8>)
 8005b3c:	f001 fe56 	bl	80077ec <puts>
		return 1;
 8005b40:	e799      	b.n	8005a76 <bt_program+0xce>
 8005b42:	bf00      	nop
 8005b44:	40011000 	.word	0x40011000
 8005b48:	20000ae0 	.word	0x20000ae0
 8005b4c:	0800a78d 	.word	0x0800a78d
 8005b50:	0800a6e0 	.word	0x0800a6e0
 8005b54:	0800a70c 	.word	0x0800a70c
 8005b58:	0800a714 	.word	0x0800a714
 8005b5c:	20000ae4 	.word	0x20000ae4
 8005b60:	0800a71c 	.word	0x0800a71c
 8005b64:	0800a72c 	.word	0x0800a72c
 8005b68:	0800a754 	.word	0x0800a754
 8005b6c:	0800a768 	.word	0x0800a768
 8005b70:	0800a6bc 	.word	0x0800a6bc

08005b74 <bt_init>:
	bt_initialized = BT_INIT_ONGOING;
 8005b74:	2302      	movs	r3, #2
{
 8005b76:	b570      	push	{r4, r5, r6, lr}
	bt_initialized = BT_INIT_ONGOING;
 8005b78:	4e52      	ldr	r6, [pc, #328]	; (8005cc4 <bt_init+0x150>)
{
 8005b7a:	b088      	sub	sp, #32
	HAL_GPIO_WritePin(BT_KEY_GPIO_Port, BT_KEY_Pin, GPIO_PIN_RESET);
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b82:	4851      	ldr	r0, [pc, #324]	; (8005cc8 <bt_init+0x154>)
	bt_initialized = BT_INIT_ONGOING;
 8005b84:	7033      	strb	r3, [r6, #0]
	HAL_GPIO_WritePin(BT_KEY_GPIO_Port, BT_KEY_Pin, GPIO_PIN_RESET);
 8005b86:	f7fc fe43 	bl	8002810 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005b8a:	2064      	movs	r0, #100	; 0x64
 8005b8c:	f7fc fbde 	bl	800234c <HAL_Delay>
	HAL_GPIO_WritePin(BT_PWR_GPIO_Port, BT_PWR_Pin, GPIO_PIN_SET);
 8005b90:	2201      	movs	r2, #1
 8005b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b96:	484c      	ldr	r0, [pc, #304]	; (8005cc8 <bt_init+0x154>)
 8005b98:	f7fc fe3a 	bl	8002810 <HAL_GPIO_WritePin>
	uart2_baudrate(BT_BAUDRATE);
 8005b9c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8005ba0:	f000 ffbc 	bl	8006b1c <uart2_baudrate>
	HAL_Delay(1000);
 8005ba4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ba8:	f7fc fbd0 	bl	800234c <HAL_Delay>
	HAL_GPIO_WritePin(BT_KEY_GPIO_Port, BT_KEY_Pin, GPIO_PIN_SET);
 8005bac:	2201      	movs	r2, #1
 8005bae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bb2:	4845      	ldr	r0, [pc, #276]	; (8005cc8 <bt_init+0x154>)
 8005bb4:	f7fc fe2c 	bl	8002810 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005bb8:	2064      	movs	r0, #100	; 0x64
 8005bba:	f7fc fbc7 	bl	800234c <HAL_Delay>
	if (bt_initialized == BT_NOT_INITIALIZED)
 8005bbe:	7833      	ldrb	r3, [r6, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d077      	beq.n	8005cb4 <bt_init+0x140>
		uart2_putc(buf[i]);
 8005bc4:	4c41      	ldr	r4, [pc, #260]	; (8005ccc <bt_init+0x158>)
 8005bc6:	2041      	movs	r0, #65	; 0x41
 8005bc8:	f000 feaa 	bl	8006920 <uart2_putc>
	while ((buf[i]) && (i<255))
 8005bcc:	f104 05fe 	add.w	r5, r4, #254	; 0xfe
 8005bd0:	2054      	movs	r0, #84	; 0x54
 8005bd2:	e001      	b.n	8005bd8 <bt_init+0x64>
 8005bd4:	42ac      	cmp	r4, r5
 8005bd6:	d005      	beq.n	8005be4 <bt_init+0x70>
		uart2_putc(buf[i]);
 8005bd8:	f000 fea2 	bl	8006920 <uart2_putc>
	while ((buf[i]) && (i<255))
 8005bdc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d1f7      	bne.n	8005bd4 <bt_init+0x60>
	HAL_Delay(100);
 8005be4:	2064      	movs	r0, #100	; 0x64
 8005be6:	f7fc fbb1 	bl	800234c <HAL_Delay>
	while (!uart2_tx_done());
 8005bea:	f000 feb7 	bl	800695c <uart2_tx_done>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d0fb      	beq.n	8005bea <bt_init+0x76>
	status = bt_receive(recbuf,sizeof(recbuf));
 8005bf2:	211e      	movs	r1, #30
 8005bf4:	4668      	mov	r0, sp
 8005bf6:	f7ff fe9b 	bl	8005930 <bt_receive>
	if (status==0)  // bt_receive was ok
 8005bfa:	2800      	cmp	r0, #0
 8005bfc:	d148      	bne.n	8005c90 <bt_init+0x11c>
		len_recv = strlen(recbuf);
 8005bfe:	4668      	mov	r0, sp
 8005c00:	f7fa faa6 	bl	8000150 <strlen>
		if (len_recv < (len_sufx+5))	// Wrong length of answer
 8005c04:	2808      	cmp	r0, #8
		len_recv = strlen(recbuf);
 8005c06:	4604      	mov	r4, r0
		if (len_recv < (len_sufx+5))	// Wrong length of answer
 8005c08:	d942      	bls.n	8005c90 <bt_init+0x11c>
			status = (strncmp(&recbuf[len_recv-len_sufx-2],BT_SUFFIX,len_sufx)!=0);
 8005c0a:	3806      	subs	r0, #6
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	4930      	ldr	r1, [pc, #192]	; (8005cd0 <bt_init+0x15c>)
 8005c10:	4468      	add	r0, sp
 8005c12:	f001 fe13 	bl	800783c <strncmp>
	if (status!=0)
 8005c16:	4603      	mov	r3, r0
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d139      	bne.n	8005c90 <bt_init+0x11c>
		recbuf[len_recv-2]=0;
 8005c1c:	f104 0120 	add.w	r1, r4, #32
		for (i=6;(recbuf[i]!='\0')&&(i<22);i++)
 8005c20:	f89d 2006 	ldrb.w	r2, [sp, #6]
		recbuf[len_recv-2]=0;
 8005c24:	eb0d 0401 	add.w	r4, sp, r1
 8005c28:	f804 0c22 	strb.w	r0, [r4, #-34]
		for (i=6;(recbuf[i]!='\0')&&(i<22);i++)
 8005c2c:	4c29      	ldr	r4, [pc, #164]	; (8005cd4 <bt_init+0x160>)
 8005c2e:	b16a      	cbz	r2, 8005c4c <bt_init+0xd8>
 8005c30:	4621      	mov	r1, r4
 8005c32:	2307      	movs	r3, #7
 8005c34:	f10d 0006 	add.w	r0, sp, #6
			bt_name[i-6]=recbuf[i];
 8005c38:	f801 2b01 	strb.w	r2, [r1], #1
		for (i=6;(recbuf[i]!='\0')&&(i<22);i++)
 8005c3c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	d03b      	beq.n	8005cbc <bt_init+0x148>
 8005c44:	3301      	adds	r3, #1
 8005c46:	2b17      	cmp	r3, #23
 8005c48:	d1f6      	bne.n	8005c38 <bt_init+0xc4>
 8005c4a:	2310      	movs	r3, #16
		bt_name[i-6]='\0';
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	54e2      	strb	r2, [r4, r3]
	printf("   ... bluetooth name: %s\r\n   ... baudrate: %i,8,N,1\r\n",
 8005c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c54:	491f      	ldr	r1, [pc, #124]	; (8005cd4 <bt_init+0x160>)
 8005c56:	4820      	ldr	r0, [pc, #128]	; (8005cd8 <bt_init+0x164>)
 8005c58:	f001 fd42 	bl	80076e0 <iprintf>
	HAL_GPIO_WritePin(BT_KEY_GPIO_Port, BT_PWR_Pin, GPIO_PIN_RESET);
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c62:	4819      	ldr	r0, [pc, #100]	; (8005cc8 <bt_init+0x154>)
 8005c64:	f7fc fdd4 	bl	8002810 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BT_KEY_GPIO_Port, BT_KEY_Pin, GPIO_PIN_RESET);
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c6e:	4816      	ldr	r0, [pc, #88]	; (8005cc8 <bt_init+0x154>)
 8005c70:	f7fc fdce 	bl	8002810 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8005c74:	20c8      	movs	r0, #200	; 0xc8
 8005c76:	f7fc fb69 	bl	800234c <HAL_Delay>
	HAL_GPIO_WritePin(BT_KEY_GPIO_Port, BT_PWR_Pin, GPIO_PIN_SET);
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c80:	4811      	ldr	r0, [pc, #68]	; (8005cc8 <bt_init+0x154>)
 8005c82:	f7fc fdc5 	bl	8002810 <HAL_GPIO_WritePin>
	bt_initialized = BT_INITIALIZED;
 8005c86:	2301      	movs	r3, #1
	return 0;
 8005c88:	2000      	movs	r0, #0
	bt_initialized = BT_INITIALIZED;
 8005c8a:	7033      	strb	r3, [r6, #0]
}
 8005c8c:	b008      	add	sp, #32
 8005c8e:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(bt_name,"UNNAMD");
 8005c90:	4a12      	ldr	r2, [pc, #72]	; (8005cdc <bt_init+0x168>)
 8005c92:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <bt_init+0x160>)
 8005c94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c98:	0c0a      	lsrs	r2, r1, #16
 8005c9a:	6018      	str	r0, [r3, #0]
 8005c9c:	8099      	strh	r1, [r3, #4]
		if (bt_program(bt_name))	// Reprogramming of BT module needed
 8005c9e:	4618      	mov	r0, r3
		sprintf(bt_name,"UNNAMD");
 8005ca0:	719a      	strb	r2, [r3, #6]
		if (bt_program(bt_name))	// Reprogramming of BT module needed
 8005ca2:	f7ff fe81 	bl	80059a8 <bt_program>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d0d2      	beq.n	8005c50 <bt_init+0xdc>
			bt_initialized = BT_NOT_INITIALIZED;
 8005caa:	2300      	movs	r3, #0
			return 1;
 8005cac:	2001      	movs	r0, #1
			bt_initialized = BT_NOT_INITIALIZED;
 8005cae:	7033      	strb	r3, [r6, #0]
}
 8005cb0:	b008      	add	sp, #32
 8005cb2:	bd70      	pop	{r4, r5, r6, pc}
		printf("ERROR: BT not initialized ...\r\n");
 8005cb4:	480a      	ldr	r0, [pc, #40]	; (8005ce0 <bt_init+0x16c>)
 8005cb6:	f001 fd99 	bl	80077ec <puts>
		return 1;
 8005cba:	e793      	b.n	8005be4 <bt_init+0x70>
		bt_name[i-6]='\0';
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	3b06      	subs	r3, #6
 8005cc0:	54e2      	strb	r2, [r4, r3]
 8005cc2:	e7c5      	b.n	8005c50 <bt_init+0xdc>
 8005cc4:	20000ae0 	.word	0x20000ae0
 8005cc8:	40011000 	.word	0x40011000
 8005ccc:	0800a7d5 	.word	0x0800a7d5
 8005cd0:	0800a70c 	.word	0x0800a70c
 8005cd4:	20000ae4 	.word	0x20000ae4
 8005cd8:	0800a79c 	.word	0x0800a79c
 8005cdc:	0800a794 	.word	0x0800a794
 8005ce0:	0800a6bc 	.word	0x0800a6bc

08005ce4 <bt_getname>:
 *  	name: 	char* pointing to name
 */
char* bt_getname()
{
	return bt_name;
}
 8005ce4:	4800      	ldr	r0, [pc, #0]	; (8005ce8 <bt_getname+0x4>)
 8005ce6:	4770      	bx	lr
 8005ce8:	20000ae4 	.word	0x20000ae4

08005cec <bno055_setOperationModeNDOF>:

void bno055_setOperationModeConfig() {
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
}

void bno055_setOperationModeNDOF() {
 8005cec:	b508      	push	{r3, lr}
  bno055_writeData(BNO055_OPR_MODE, mode);
 8005cee:	203d      	movs	r0, #61	; 0x3d
 8005cf0:	210c      	movs	r1, #12
 8005cf2:	f000 f961 	bl	8005fb8 <bno055_writeData>
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
}
 8005cf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  bno055_delay(30);
 8005cfa:	201e      	movs	r0, #30
 8005cfc:	f000 b8a6 	b.w	8005e4c <bno055_delay>

08005d00 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

uint8_t bno055_setup() {
 8005d00:	b510      	push	{r4, lr}
  bno055_reset();

  uint8_t id = 0;
 8005d02:	2400      	movs	r4, #0
uint8_t bno055_setup() {
 8005d04:	b082      	sub	sp, #8
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8005d06:	2120      	movs	r1, #32
 8005d08:	203f      	movs	r0, #63	; 0x3f
 8005d0a:	f000 f955 	bl	8005fb8 <bno055_writeData>
  bno055_delay(700);
 8005d0e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8005d12:	f000 f89b 	bl	8005e4c <bno055_delay>
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8005d16:	f10d 0107 	add.w	r1, sp, #7
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	4620      	mov	r0, r4
  uint8_t id = 0;
 8005d1e:	f88d 4007 	strb.w	r4, [sp, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8005d22:	f000 f963 	bl	8005fec <bno055_readData>
  if (id != BNO055_ID) {
 8005d26:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005d2a:	29a0      	cmp	r1, #160	; 0xa0
 8005d2c:	d007      	beq.n	8005d3e <bno055_setup+0x3e>
#ifdef BNO_DEBUG
	  printf("BNO ERROR: Received CHIP_ID 0x%02x instead of 0x%02x\r\n",id,BNO055_ID);
 8005d2e:	22a0      	movs	r2, #160	; 0xa0
 8005d30:	480d      	ldr	r0, [pc, #52]	; (8005d68 <bno055_setup+0x68>)
 8005d32:	f001 fcd5 	bl	80076e0 <iprintf>
#endif
	  return id;
 8005d36:	f89d 0007 	ldrb.w	r0, [sp, #7]

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
  bno055_delay(10);
  return 0;
}
 8005d3a:	b002      	add	sp, #8
 8005d3c:	bd10      	pop	{r4, pc}
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8005d3e:	4621      	mov	r1, r4
 8005d40:	2007      	movs	r0, #7
 8005d42:	f000 f939 	bl	8005fb8 <bno055_writeData>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8005d46:	4621      	mov	r1, r4
 8005d48:	203f      	movs	r0, #63	; 0x3f
 8005d4a:	f000 f935 	bl	8005fb8 <bno055_writeData>
  bno055_writeData(BNO055_OPR_MODE, mode);
 8005d4e:	4621      	mov	r1, r4
 8005d50:	203d      	movs	r0, #61	; 0x3d
 8005d52:	f000 f931 	bl	8005fb8 <bno055_writeData>
  bno055_delay(30);
 8005d56:	201e      	movs	r0, #30
 8005d58:	f000 f878 	bl	8005e4c <bno055_delay>
  bno055_delay(10);
 8005d5c:	200a      	movs	r0, #10
 8005d5e:	f000 f875 	bl	8005e4c <bno055_delay>
  return 0;
 8005d62:	4620      	mov	r0, r4
}
 8005d64:	b002      	add	sp, #8
 8005d66:	bd10      	pop	{r4, pc}
 8005d68:	0800a7e0 	.word	0x0800a7e0

08005d6c <bno055_getVector>:
  cal.accel = (calData >> 2) & 0x03;
  cal.mag = calData & 0x03;
  return cal;
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8005d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	460c      	mov	r4, r1
 8005d72:	b082      	sub	sp, #8
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8005d74:	2100      	movs	r1, #0
bno055_vector_t bno055_getVector(uint8_t vec) {
 8005d76:	4682      	mov	sl, r0
void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8005d78:	2007      	movs	r0, #7
 8005d7a:	f000 f91d 	bl	8005fb8 <bno055_writeData>
  bno055_setPage(0);
  uint8_t buffer[6];

  bno055_readData(vec, buffer, 6);
 8005d7e:	2206      	movs	r2, #6
 8005d80:	4669      	mov	r1, sp
 8005d82:	4620      	mov	r0, r4
 8005d84:	f000 f932 	bl	8005fec <bno055_readData>

  double scale = 1;

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8005d88:	2c0e      	cmp	r4, #14
 8005d8a:	d038      	beq.n	8005dfe <bno055_getVector+0x92>
    scale = magScale;
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8005d8c:	f004 03df 	and.w	r3, r4, #223	; 0xdf
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d008      	beq.n	8005da6 <bno055_getVector+0x3a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8005d94:	2c2e      	cmp	r4, #46	; 0x2e
 8005d96:	d006      	beq.n	8005da6 <bno055_getVector+0x3a>
    scale = accelScale;
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8005d98:	2c14      	cmp	r4, #20
 8005d9a:	d037      	beq.n	8005e0c <bno055_getVector+0xa0>
    scale = angularRateScale;
  } else if (vec == BNO055_VECTOR_EULER) {
 8005d9c:	2c1a      	cmp	r4, #26
 8005d9e:	d03c      	beq.n	8005e1a <bno055_getVector+0xae>
  double scale = 1;
 8005da0:	2400      	movs	r4, #0
 8005da2:	4d21      	ldr	r5, [pc, #132]	; (8005e28 <bno055_getVector+0xbc>)
 8005da4:	e005      	b.n	8005db2 <bno055_getVector+0x46>
    scale = accelScale;
 8005da6:	4b21      	ldr	r3, [pc, #132]	; (8005e2c <bno055_getVector+0xc0>)
 8005da8:	8818      	ldrh	r0, [r3, #0]
 8005daa:	f7fa fbcf 	bl	800054c <__aeabi_ui2d>
 8005dae:	4604      	mov	r4, r0
 8005db0:	460d      	mov	r5, r1
    scale = eulerScale;
  }

  bno055_vector_t xyz = {.x = 0, .y = 0, .z = 0};
  xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
  xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8005db2:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
 8005db6:	f7fa fbd9 	bl	800056c <__aeabi_i2d>
 8005dba:	4622      	mov	r2, r4
 8005dbc:	462b      	mov	r3, r5
 8005dbe:	f7fa fd69 	bl	8000894 <__aeabi_ddiv>
 8005dc2:	4680      	mov	r8, r0
  xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8005dc4:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
  xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8005dc8:	4689      	mov	r9, r1
  xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8005dca:	f7fa fbcf 	bl	800056c <__aeabi_i2d>
 8005dce:	4622      	mov	r2, r4
 8005dd0:	462b      	mov	r3, r5
 8005dd2:	f7fa fd5f 	bl	8000894 <__aeabi_ddiv>
 8005dd6:	4606      	mov	r6, r0
  xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8005dd8:	f9bd 0000 	ldrsh.w	r0, [sp]
  xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8005ddc:	460f      	mov	r7, r1
  xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8005dde:	f7fa fbc5 	bl	800056c <__aeabi_i2d>
 8005de2:	4622      	mov	r2, r4
 8005de4:	462b      	mov	r3, r5
 8005de6:	f7fa fd55 	bl	8000894 <__aeabi_ddiv>

  return xyz;
 8005dea:	e9ca 0100 	strd	r0, r1, [sl]
}
 8005dee:	4650      	mov	r0, sl
  return xyz;
 8005df0:	e9ca 8902 	strd	r8, r9, [sl, #8]
 8005df4:	e9ca 6704 	strd	r6, r7, [sl, #16]
}
 8005df8:	b002      	add	sp, #8
 8005dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    scale = magScale;
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <bno055_getVector+0xc4>)
 8005e00:	8818      	ldrh	r0, [r3, #0]
 8005e02:	f7fa fba3 	bl	800054c <__aeabi_ui2d>
 8005e06:	4604      	mov	r4, r0
 8005e08:	460d      	mov	r5, r1
 8005e0a:	e7d2      	b.n	8005db2 <bno055_getVector+0x46>
    scale = angularRateScale;
 8005e0c:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <bno055_getVector+0xc8>)
 8005e0e:	8818      	ldrh	r0, [r3, #0]
 8005e10:	f7fa fb9c 	bl	800054c <__aeabi_ui2d>
 8005e14:	4604      	mov	r4, r0
 8005e16:	460d      	mov	r5, r1
 8005e18:	e7cb      	b.n	8005db2 <bno055_getVector+0x46>
    scale = eulerScale;
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <bno055_getVector+0xcc>)
 8005e1c:	8818      	ldrh	r0, [r3, #0]
 8005e1e:	f7fa fb95 	bl	800054c <__aeabi_ui2d>
 8005e22:	4604      	mov	r4, r0
 8005e24:	460d      	mov	r5, r1
 8005e26:	e7c4      	b.n	8005db2 <bno055_getVector+0x46>
 8005e28:	3ff00000 	.word	0x3ff00000
 8005e2c:	2000000c 	.word	0x2000000c
 8005e30:	20000012 	.word	0x20000012
 8005e34:	2000000e 	.word	0x2000000e
 8005e38:	20000010 	.word	0x20000010

08005e3c <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	4604      	mov	r4, r0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8005e40:	211a      	movs	r1, #26
 8005e42:	f7ff ff93 	bl	8005d6c <bno055_getVector>
}
 8005e46:	4620      	mov	r0, r4
 8005e48:	bd10      	pop	{r4, pc}
 8005e4a:	bf00      	nop

08005e4c <bno055_delay>:

void bno055_delay(int time) {
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8005e4c:	f7fc ba7e 	b.w	800234c <HAL_Delay>

08005e50 <bno_i2c_error>:
void bno_i2c_error(uint8_t status)
{
	  uint32_t error;
	  HAL_I2C_StateTypeDef state;

	  if (status == HAL_ERROR) {
 8005e50:	2801      	cmp	r0, #1
{
 8005e52:	b508      	push	{r3, lr}
	  if (status == HAL_ERROR) {
 8005e54:	d039      	beq.n	8005eca <bno_i2c_error+0x7a>
	    printf("BNO_I2C: HAL_I2C_Master_Transmit HAL_ERROR\r\n");
	  } else if (status == HAL_TIMEOUT) {
 8005e56:	2803      	cmp	r0, #3
 8005e58:	d03b      	beq.n	8005ed2 <bno_i2c_error+0x82>
		  printf("BNO_I2C: HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
	  } else if (status == HAL_BUSY) {
 8005e5a:	2802      	cmp	r0, #2
 8005e5c:	d02c      	beq.n	8005eb8 <bno_i2c_error+0x68>
		  printf("BNO_I2C: HAL_I2C_Master_Transmit HAL_BUSY\r\n");
	  } else {
		  printf("BNO_I2C: Unknown status data %d", status);
 8005e5e:	4601      	mov	r1, r0
 8005e60:	4840      	ldr	r0, [pc, #256]	; (8005f64 <bno_i2c_error+0x114>)
 8005e62:	f001 fc3d 	bl	80076e0 <iprintf>
	  }

	  error = HAL_I2C_GetError(&hi2c1);
 8005e66:	4840      	ldr	r0, [pc, #256]	; (8005f68 <bno_i2c_error+0x118>)
 8005e68:	f7fd fbbc 	bl	80035e4 <HAL_I2C_GetError>
	  if (error == HAL_I2C_ERROR_NONE) {
 8005e6c:	b318      	cbz	r0, 8005eb6 <bno_i2c_error+0x66>
	    return;
	  } else if (error == HAL_I2C_ERROR_BERR) {
 8005e6e:	2801      	cmp	r0, #1
 8005e70:	d033      	beq.n	8005eda <bno_i2c_error+0x8a>
		  printf("BNO_I2C: HAL_I2C_ERROR_BERR\r\n");
	  } else if (error == HAL_I2C_ERROR_ARLO) {
 8005e72:	2802      	cmp	r0, #2
 8005e74:	d035      	beq.n	8005ee2 <bno_i2c_error+0x92>
		  printf("BNO_I2C: HAL_I2C_ERROR_ARLO\r\n");
	  } else if (error == HAL_I2C_ERROR_AF) {
 8005e76:	2804      	cmp	r0, #4
 8005e78:	d037      	beq.n	8005eea <bno_i2c_error+0x9a>
		  printf("BNO_I2C: HAL_I2C_ERROR_AF\r\n");
	  } else if (error == HAL_I2C_ERROR_OVR) {
 8005e7a:	2808      	cmp	r0, #8
 8005e7c:	d03e      	beq.n	8005efc <bno_i2c_error+0xac>
		  printf("BNO_I2C: HAL_I2C_ERROR_OVR\r\n");
	  } else if (error == HAL_I2C_ERROR_DMA) {
 8005e7e:	2810      	cmp	r0, #16
 8005e80:	d045      	beq.n	8005f0e <bno_i2c_error+0xbe>
		  printf("BNO_I2C: HAL_I2C_ERROR_DMA\r\n");
	  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8005e82:	2820      	cmp	r0, #32
 8005e84:	d04c      	beq.n	8005f20 <bno_i2c_error+0xd0>
		  printf("BNO_I2C: HAL_I2C_ERROR_TIMEOUT\r\n");
	  }

	  state = HAL_I2C_GetState(&hi2c1);
 8005e86:	4838      	ldr	r0, [pc, #224]	; (8005f68 <bno_i2c_error+0x118>)
 8005e88:	f7fd fba8 	bl	80035dc <HAL_I2C_GetState>
	  if (state == HAL_I2C_STATE_RESET) {
 8005e8c:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8005e90:	d016      	beq.n	8005ec0 <bno_i2c_error+0x70>
		  printf("BNO_I2C: HAL_I2C_STATE_RESET\r\n");
	  } else if (state == HAL_I2C_STATE_READY) {
		  printf("BNO_I2C: HAL_I2C_STATE_RESET\r\n");
	  } else if (state == HAL_I2C_STATE_BUSY) {
 8005e92:	2824      	cmp	r0, #36	; 0x24
 8005e94:	d02d      	beq.n	8005ef2 <bno_i2c_error+0xa2>
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY\r\n");
	  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8005e96:	2821      	cmp	r0, #33	; 0x21
 8005e98:	d034      	beq.n	8005f04 <bno_i2c_error+0xb4>
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY_TX\r\n");
	  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8005e9a:	2822      	cmp	r0, #34	; 0x22
 8005e9c:	d03b      	beq.n	8005f16 <bno_i2c_error+0xc6>
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY_RX\r\n");
	  } else if (state == HAL_I2C_STATE_LISTEN) {
 8005e9e:	2828      	cmp	r0, #40	; 0x28
 8005ea0:	d047      	beq.n	8005f32 <bno_i2c_error+0xe2>
		  printf("BNO_I2C: HAL_I2C_STATE_LISTEN\r\n");
	  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8005ea2:	2829      	cmp	r0, #41	; 0x29
 8005ea4:	d04a      	beq.n	8005f3c <bno_i2c_error+0xec>
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
	  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8005ea6:	282a      	cmp	r0, #42	; 0x2a
 8005ea8:	d04d      	beq.n	8005f46 <bno_i2c_error+0xf6>
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
	  } else if (state == HAL_I2C_STATE_ABORT) {
 8005eaa:	2860      	cmp	r0, #96	; 0x60
 8005eac:	d050      	beq.n	8005f50 <bno_i2c_error+0x100>
		  printf("BNO_I2C: HAL_I2C_STATE_ABORT\r\n");
	  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8005eae:	28a0      	cmp	r0, #160	; 0xa0
 8005eb0:	d053      	beq.n	8005f5a <bno_i2c_error+0x10a>
		  printf("BNO_I2C: HAL_I2C_STATE_TIMEOUT\r\n");
	  } else if (state == HAL_I2C_STATE_ERROR) {
 8005eb2:	28e0      	cmp	r0, #224	; 0xe0
 8005eb4:	d038      	beq.n	8005f28 <bno_i2c_error+0xd8>
		  printf("BNO_I2C: HAL_I2C_STATE_ERROR\r\n");
	  }

}
 8005eb6:	bd08      	pop	{r3, pc}
		  printf("BNO_I2C: HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8005eb8:	482c      	ldr	r0, [pc, #176]	; (8005f6c <bno_i2c_error+0x11c>)
 8005eba:	f001 fc97 	bl	80077ec <puts>
 8005ebe:	e7d2      	b.n	8005e66 <bno_i2c_error+0x16>
		  printf("BNO_I2C: HAL_I2C_STATE_RESET\r\n");
 8005ec0:	482b      	ldr	r0, [pc, #172]	; (8005f70 <bno_i2c_error+0x120>)
}
 8005ec2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  printf("BNO_I2C: HAL_I2C_STATE_RESET\r\n");
 8005ec6:	f001 bc91 	b.w	80077ec <puts>
	    printf("BNO_I2C: HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8005eca:	482a      	ldr	r0, [pc, #168]	; (8005f74 <bno_i2c_error+0x124>)
 8005ecc:	f001 fc8e 	bl	80077ec <puts>
 8005ed0:	e7c9      	b.n	8005e66 <bno_i2c_error+0x16>
		  printf("BNO_I2C: HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8005ed2:	4829      	ldr	r0, [pc, #164]	; (8005f78 <bno_i2c_error+0x128>)
 8005ed4:	f001 fc8a 	bl	80077ec <puts>
 8005ed8:	e7c5      	b.n	8005e66 <bno_i2c_error+0x16>
		  printf("BNO_I2C: HAL_I2C_ERROR_BERR\r\n");
 8005eda:	4828      	ldr	r0, [pc, #160]	; (8005f7c <bno_i2c_error+0x12c>)
 8005edc:	f001 fc86 	bl	80077ec <puts>
 8005ee0:	e7d1      	b.n	8005e86 <bno_i2c_error+0x36>
		  printf("BNO_I2C: HAL_I2C_ERROR_ARLO\r\n");
 8005ee2:	4827      	ldr	r0, [pc, #156]	; (8005f80 <bno_i2c_error+0x130>)
 8005ee4:	f001 fc82 	bl	80077ec <puts>
 8005ee8:	e7cd      	b.n	8005e86 <bno_i2c_error+0x36>
		  printf("BNO_I2C: HAL_I2C_ERROR_AF\r\n");
 8005eea:	4826      	ldr	r0, [pc, #152]	; (8005f84 <bno_i2c_error+0x134>)
 8005eec:	f001 fc7e 	bl	80077ec <puts>
 8005ef0:	e7c9      	b.n	8005e86 <bno_i2c_error+0x36>
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY\r\n");
 8005ef2:	4825      	ldr	r0, [pc, #148]	; (8005f88 <bno_i2c_error+0x138>)
}
 8005ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY\r\n");
 8005ef8:	f001 bc78 	b.w	80077ec <puts>
		  printf("BNO_I2C: HAL_I2C_ERROR_OVR\r\n");
 8005efc:	4823      	ldr	r0, [pc, #140]	; (8005f8c <bno_i2c_error+0x13c>)
 8005efe:	f001 fc75 	bl	80077ec <puts>
 8005f02:	e7c0      	b.n	8005e86 <bno_i2c_error+0x36>
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY_TX\r\n");
 8005f04:	4822      	ldr	r0, [pc, #136]	; (8005f90 <bno_i2c_error+0x140>)
}
 8005f06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY_TX\r\n");
 8005f0a:	f001 bc6f 	b.w	80077ec <puts>
		  printf("BNO_I2C: HAL_I2C_ERROR_DMA\r\n");
 8005f0e:	4821      	ldr	r0, [pc, #132]	; (8005f94 <bno_i2c_error+0x144>)
 8005f10:	f001 fc6c 	bl	80077ec <puts>
 8005f14:	e7b7      	b.n	8005e86 <bno_i2c_error+0x36>
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY_RX\r\n");
 8005f16:	4820      	ldr	r0, [pc, #128]	; (8005f98 <bno_i2c_error+0x148>)
}
 8005f18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY_RX\r\n");
 8005f1c:	f001 bc66 	b.w	80077ec <puts>
		  printf("BNO_I2C: HAL_I2C_ERROR_TIMEOUT\r\n");
 8005f20:	481e      	ldr	r0, [pc, #120]	; (8005f9c <bno_i2c_error+0x14c>)
 8005f22:	f001 fc63 	bl	80077ec <puts>
 8005f26:	e7ae      	b.n	8005e86 <bno_i2c_error+0x36>
		  printf("BNO_I2C: HAL_I2C_STATE_ERROR\r\n");
 8005f28:	481d      	ldr	r0, [pc, #116]	; (8005fa0 <bno_i2c_error+0x150>)
}
 8005f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  printf("BNO_I2C: HAL_I2C_STATE_ERROR\r\n");
 8005f2e:	f001 bc5d 	b.w	80077ec <puts>
		  printf("BNO_I2C: HAL_I2C_STATE_LISTEN\r\n");
 8005f32:	481c      	ldr	r0, [pc, #112]	; (8005fa4 <bno_i2c_error+0x154>)
}
 8005f34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  printf("BNO_I2C: HAL_I2C_STATE_LISTEN\r\n");
 8005f38:	f001 bc58 	b.w	80077ec <puts>
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8005f3c:	481a      	ldr	r0, [pc, #104]	; (8005fa8 <bno_i2c_error+0x158>)
}
 8005f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8005f42:	f001 bc53 	b.w	80077ec <puts>
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8005f46:	4819      	ldr	r0, [pc, #100]	; (8005fac <bno_i2c_error+0x15c>)
}
 8005f48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  printf("BNO_I2C: HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8005f4c:	f001 bc4e 	b.w	80077ec <puts>
		  printf("BNO_I2C: HAL_I2C_STATE_ABORT\r\n");
 8005f50:	4817      	ldr	r0, [pc, #92]	; (8005fb0 <bno_i2c_error+0x160>)
}
 8005f52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  printf("BNO_I2C: HAL_I2C_STATE_ABORT\r\n");
 8005f56:	f001 bc49 	b.w	80077ec <puts>
		  printf("BNO_I2C: HAL_I2C_STATE_TIMEOUT\r\n");
 8005f5a:	4816      	ldr	r0, [pc, #88]	; (8005fb4 <bno_i2c_error+0x164>)
}
 8005f5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		  printf("BNO_I2C: HAL_I2C_STATE_TIMEOUT\r\n");
 8005f60:	f001 bc44 	b.w	80077ec <puts>
 8005f64:	0800a8a0 	.word	0x0800a8a0
 8005f68:	200004e4 	.word	0x200004e4
 8005f6c:	0800a874 	.word	0x0800a874
 8005f70:	0800a974 	.word	0x0800a974
 8005f74:	0800a818 	.word	0x0800a818
 8005f78:	0800a844 	.word	0x0800a844
 8005f7c:	0800a8c0 	.word	0x0800a8c0
 8005f80:	0800a8e0 	.word	0x0800a8e0
 8005f84:	0800a900 	.word	0x0800a900
 8005f88:	0800a994 	.word	0x0800a994
 8005f8c:	0800a91c 	.word	0x0800a91c
 8005f90:	0800a9b4 	.word	0x0800a9b4
 8005f94:	0800a938 	.word	0x0800a938
 8005f98:	0800a9d4 	.word	0x0800a9d4
 8005f9c:	0800a954 	.word	0x0800a954
 8005fa0:	0800aaa4 	.word	0x0800aaa4
 8005fa4:	0800a9f4 	.word	0x0800a9f4
 8005fa8:	0800aa14 	.word	0x0800aa14
 8005fac:	0800aa3c 	.word	0x0800aa3c
 8005fb0:	0800aa64 	.word	0x0800aa64
 8005fb4:	0800aa84 	.word	0x0800aa84

08005fb8 <bno055_writeData>:
#endif

void bno055_writeData(uint8_t reg, uint8_t data) {
 8005fb8:	b510      	push	{r4, lr}
  uint8_t txdata[2] = {reg, data};
  uint8_t status;
  status = HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR << 1, txdata, sizeof(txdata), 10);
 8005fba:	240a      	movs	r4, #10
void bno055_writeData(uint8_t reg, uint8_t data) {
 8005fbc:	4686      	mov	lr, r0
 8005fbe:	468c      	mov	ip, r1
 8005fc0:	b084      	sub	sp, #16
  status = HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR << 1, txdata, sizeof(txdata), 10);
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	2150      	movs	r1, #80	; 0x50
 8005fc6:	4808      	ldr	r0, [pc, #32]	; (8005fe8 <bno055_writeData+0x30>)
 8005fc8:	aa03      	add	r2, sp, #12
 8005fca:	9400      	str	r4, [sp, #0]
  uint8_t txdata[2] = {reg, data};
 8005fcc:	f88d e00c 	strb.w	lr, [sp, #12]
 8005fd0:	f88d c00d 	strb.w	ip, [sp, #13]
  status = HAL_I2C_Master_Transmit(&hi2c1, BNO055_I2C_ADDR << 1, txdata, sizeof(txdata), 10);
 8005fd4:	f7fc fed4 	bl	8002d80 <HAL_I2C_Master_Transmit>
  if (status != HAL_OK) {
 8005fd8:	b908      	cbnz	r0, 8005fde <bno055_writeData+0x26>
	  bno_i2c_error(status);
#endif
	  return;
  }

}
 8005fda:	b004      	add	sp, #16
 8005fdc:	bd10      	pop	{r4, pc}
	  bno_i2c_error(status);
 8005fde:	f7ff ff37 	bl	8005e50 <bno_i2c_error>
}
 8005fe2:	b004      	add	sp, #16
 8005fe4:	bd10      	pop	{r4, pc}
 8005fe6:	bf00      	nop
 8005fe8:	200004e4 	.word	0x200004e4

08005fec <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8005fec:	b570      	push	{r4, r5, r6, lr}
 8005fee:	4684      	mov	ip, r0
 8005ff0:	460e      	mov	r6, r1
 8005ff2:	4615      	mov	r5, r2

  HAL_I2C_Master_Receive(hi2c1, BNO055_I2C_ADDR << 1, data, len,  100);
  printf("Master Receive \r\n");
  if (status) bno_i2c_error(status);
*/
  status =  HAL_I2C_Mem_Read(&hi2c1, BNO055_I2C_ADDR<<1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 8005ff4:	2464      	movs	r4, #100	; 0x64
void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8005ff6:	b084      	sub	sp, #16
  status =  HAL_I2C_Mem_Read(&hi2c1, BNO055_I2C_ADDR<<1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	2150      	movs	r1, #80	; 0x50
 8005ffc:	4662      	mov	r2, ip
 8005ffe:	e9cd 6500 	strd	r6, r5, [sp]
 8006002:	4806      	ldr	r0, [pc, #24]	; (800601c <bno055_readData+0x30>)
 8006004:	9402      	str	r4, [sp, #8]
 8006006:	f7fd f87f 	bl	8003108 <HAL_I2C_Mem_Read>
  //printf("MemREAD reg 0x%02x len=%i data[0]=0x%02x\r\n",reg,len,data[0]);
  if (status) bno_i2c_error(status);
 800600a:	b908      	cbnz	r0, 8006010 <bno055_readData+0x24>

}
 800600c:	b004      	add	sp, #16
 800600e:	bd70      	pop	{r4, r5, r6, pc}
 8006010:	b004      	add	sp, #16
 8006012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (status) bno_i2c_error(status);
 8006016:	f7ff bf1b 	b.w	8005e50 <bno_i2c_error>
 800601a:	bf00      	nop
 800601c:	200004e4 	.word	0x200004e4

08006020 <u8x8_byte_4wire_hw_spi>:
	return 1;
}

static uint8_t u8x8_byte_4wire_hw_spi (u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,	void *arg_ptr)
{
	switch (msg)
 8006020:	f1a1 0014 	sub.w	r0, r1, #20
{
 8006024:	b510      	push	{r4, lr}
 8006026:	4619      	mov	r1, r3
	switch (msg)
 8006028:	280c      	cmp	r0, #12
 800602a:	d808      	bhi.n	800603e <u8x8_byte_4wire_hw_spi+0x1e>
 800602c:	e8df f000 	tbb	[pc, r0]
 8006030:	09070712 	.word	0x09070712
 8006034:	0707211a 	.word	0x0707211a
 8006038:	07070707 	.word	0x07070707
 800603c:	14          	.byte	0x14
 800603d:	00          	.byte	0x00
		case U8X8_MSG_BYTE_END_TRANSFER:
				//while (!DMAcompleted);	// Wait for DMA to complete transmission
				HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, 1);
				break;
		default:
			return 0;
 800603e:	2000      	movs	r0, #0
	}
	return 1;
}
 8006040:	bd10      	pop	{r4, pc}
				DMAcompleted = 0;		// lock for new transmission
 8006042:	f04f 0c00 	mov.w	ip, #0
 8006046:	4c0e      	ldr	r4, [pc, #56]	; (8006080 <u8x8_byte_4wire_hw_spi+0x60>)
				HAL_SPI_Transmit(&hspi1, (uint8_t *) arg_ptr, arg_int,100);
 8006048:	2364      	movs	r3, #100	; 0x64
 800604a:	480e      	ldr	r0, [pc, #56]	; (8006084 <u8x8_byte_4wire_hw_spi+0x64>)
				DMAcompleted = 0;		// lock for new transmission
 800604c:	f884 c000 	strb.w	ip, [r4]
				HAL_SPI_Transmit(&hspi1, (uint8_t *) arg_ptr, arg_int,100);
 8006050:	f7fd fe38 	bl	8003cc4 <HAL_SPI_Transmit>
	return 1;
 8006054:	2001      	movs	r0, #1
}
 8006056:	bd10      	pop	{r4, pc}
				HAL_GPIO_WritePin(DISP_DC_GPIO_Port, DISP_DC_Pin, arg_int);
 8006058:	2120      	movs	r1, #32
 800605a:	480b      	ldr	r0, [pc, #44]	; (8006088 <u8x8_byte_4wire_hw_spi+0x68>)
 800605c:	f7fc fbd8 	bl	8002810 <HAL_GPIO_WritePin>
	return 1;
 8006060:	2001      	movs	r0, #1
}
 8006062:	bd10      	pop	{r4, pc}
				HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, 0);
 8006064:	2200      	movs	r2, #0
 8006066:	2110      	movs	r1, #16
 8006068:	4808      	ldr	r0, [pc, #32]	; (800608c <u8x8_byte_4wire_hw_spi+0x6c>)
 800606a:	f7fc fbd1 	bl	8002810 <HAL_GPIO_WritePin>
	return 1;
 800606e:	2001      	movs	r0, #1
}
 8006070:	bd10      	pop	{r4, pc}
				HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, 1);
 8006072:	2201      	movs	r2, #1
 8006074:	2110      	movs	r1, #16
 8006076:	4805      	ldr	r0, [pc, #20]	; (800608c <u8x8_byte_4wire_hw_spi+0x6c>)
 8006078:	f7fc fbca 	bl	8002810 <HAL_GPIO_WritePin>
	return 1;
 800607c:	2001      	movs	r0, #1
}
 800607e:	bd10      	pop	{r4, pc}
 8006080:	20000014 	.word	0x20000014
 8006084:	20000538 	.word	0x20000538
 8006088:	40011000 	.word	0x40011000
 800608c:	40010800 	.word	0x40010800

08006090 <u8x8_stm32_gpio_and_delay>:
	switch (msg)
 8006090:	294a      	cmp	r1, #74	; 0x4a
{
 8006092:	b508      	push	{r3, lr}
	switch (msg)
 8006094:	d016      	beq.n	80060c4 <u8x8_stm32_gpio_and_delay+0x34>
 8006096:	d808      	bhi.n	80060aa <u8x8_stm32_gpio_and_delay+0x1a>
 8006098:	2928      	cmp	r1, #40	; 0x28
 800609a:	d019      	beq.n	80060d0 <u8x8_stm32_gpio_and_delay+0x40>
 800609c:	2929      	cmp	r1, #41	; 0x29
 800609e:	d102      	bne.n	80060a6 <u8x8_stm32_gpio_and_delay+0x16>
 80060a0:	4610      	mov	r0, r2
				HAL_Delay(arg_int);
 80060a2:	f7fc f953 	bl	800234c <HAL_Delay>
}
 80060a6:	2001      	movs	r0, #1
 80060a8:	bd08      	pop	{r3, pc}
	switch (msg)
 80060aa:	294b      	cmp	r1, #75	; 0x4b
 80060ac:	d1fb      	bne.n	80060a6 <u8x8_stm32_gpio_and_delay+0x16>
			HAL_GPIO_WritePin(DISP_RST_GPIO_Port, DISP_RST_Pin, arg_int);
 80060ae:	2110      	movs	r1, #16
 80060b0:	480a      	ldr	r0, [pc, #40]	; (80060dc <u8x8_stm32_gpio_and_delay+0x4c>)
 80060b2:	f7fc fbad 	bl	8002810 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, 1);
 80060b6:	2201      	movs	r2, #1
 80060b8:	2110      	movs	r1, #16
 80060ba:	4809      	ldr	r0, [pc, #36]	; (80060e0 <u8x8_stm32_gpio_and_delay+0x50>)
 80060bc:	f7fc fba8 	bl	8002810 <HAL_GPIO_WritePin>
}
 80060c0:	2001      	movs	r0, #1
 80060c2:	bd08      	pop	{r3, pc}
				HAL_GPIO_WritePin(DISP_DC_GPIO_Port, DISP_DC_Pin, arg_int);
 80060c4:	2120      	movs	r1, #32
 80060c6:	4805      	ldr	r0, [pc, #20]	; (80060dc <u8x8_stm32_gpio_and_delay+0x4c>)
 80060c8:	f7fc fba2 	bl	8002810 <HAL_GPIO_WritePin>
}
 80060cc:	2001      	movs	r0, #1
 80060ce:	bd08      	pop	{r3, pc}
				HAL_Delay(1);
 80060d0:	2001      	movs	r0, #1
 80060d2:	f7fc f93b 	bl	800234c <HAL_Delay>
}
 80060d6:	2001      	movs	r0, #1
 80060d8:	bd08      	pop	{r3, pc}
 80060da:	bf00      	nop
 80060dc:	40011000 	.word	0x40011000
 80060e0:	40010800 	.word	0x40010800

080060e4 <display_init>:
{
 80060e4:	b510      	push	{r4, lr}
	u8g2_Setup_ssd1306_128x64_noname_f(&display_u8g2, U8G2_R0,	u8x8_byte_4wire_hw_spi,u8x8_stm32_gpio_and_delay);
 80060e6:	4c14      	ldr	r4, [pc, #80]	; (8006138 <display_init+0x54>)
{
 80060e8:	b082      	sub	sp, #8
	u8g2_Setup_ssd1306_128x64_noname_f(&display_u8g2, U8G2_R0,	u8x8_byte_4wire_hw_spi,u8x8_stm32_gpio_and_delay);
 80060ea:	4b14      	ldr	r3, [pc, #80]	; (800613c <display_init+0x58>)
 80060ec:	4a14      	ldr	r2, [pc, #80]	; (8006140 <display_init+0x5c>)
 80060ee:	4620      	mov	r0, r4
 80060f0:	4914      	ldr	r1, [pc, #80]	; (8006144 <display_init+0x60>)
 80060f2:	f7fe fc81 	bl	80049f8 <u8g2_Setup_ssd1306_128x64_noname_f>
	u8g2_InitDisplay(&display_u8g2);
 80060f6:	4620      	mov	r0, r4
 80060f8:	f7ff fbe6 	bl	80058c8 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&display_u8g2, 0);
 80060fc:	2100      	movs	r1, #0
 80060fe:	4620      	mov	r0, r4
 8006100:	f7ff fbea 	bl	80058d8 <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&display_u8g2);
 8006104:	4620      	mov	r0, r4
 8006106:	f7fe fc5f 	bl	80049c8 <u8g2_ClearDisplay>
	u8g2_DrawXBM(&display_u8g2, 0, 0, logo128x64_width, logo128x64_height, logo128x64_bits);
 800610a:	2200      	movs	r2, #0
 800610c:	2140      	movs	r1, #64	; 0x40
 800610e:	480e      	ldr	r0, [pc, #56]	; (8006148 <display_init+0x64>)
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	9001      	str	r0, [sp, #4]
 8006114:	9100      	str	r1, [sp, #0]
 8006116:	4620      	mov	r0, r4
 8006118:	4611      	mov	r1, r2
 800611a:	f7fe fbaf 	bl	800487c <u8g2_DrawXBM>
	u8g2_UpdateDisplay(&display_u8g2);
 800611e:	4620      	mov	r0, r4
 8006120:	f7fe fc50 	bl	80049c4 <u8g2_UpdateDisplay>
	u8g2_SetFont(&display_u8g2, u8g2_font_5x7_mf   );  // Select Font
 8006124:	4620      	mov	r0, r4
 8006126:	4909      	ldr	r1, [pc, #36]	; (800614c <display_init+0x68>)
 8006128:	f7fe ffb4 	bl	8005094 <u8g2_SetFont>
	line_no=0;
 800612c:	2200      	movs	r2, #0
 800612e:	4b08      	ldr	r3, [pc, #32]	; (8006150 <display_init+0x6c>)
 8006130:	701a      	strb	r2, [r3, #0]
}
 8006132:	b002      	add	sp, #8
 8006134:	bd10      	pop	{r4, pc}
 8006136:	bf00      	nop
 8006138:	20000af4 	.word	0x20000af4
 800613c:	08006091 	.word	0x08006091
 8006140:	08006021 	.word	0x08006021
 8006144:	0800a640 	.word	0x0800a640
 8006148:	20000018 	.word	0x20000018
 800614c:	08009ec0 	.word	0x08009ec0
 8006150:	20000b7c 	.word	0x20000b7c

08006154 <display_clear>:
{
 8006154:	b510      	push	{r4, lr}
	u8g2_ClearDisplay(&display_u8g2);
 8006156:	4c05      	ldr	r4, [pc, #20]	; (800616c <display_clear+0x18>)
 8006158:	4620      	mov	r0, r4
 800615a:	f7fe fc35 	bl	80049c8 <u8g2_ClearDisplay>
	u8g2_UpdateDisplay(&display_u8g2);
 800615e:	4620      	mov	r0, r4
 8006160:	f7fe fc30 	bl	80049c4 <u8g2_UpdateDisplay>
	line_no=0;
 8006164:	2200      	movs	r2, #0
 8006166:	4b02      	ldr	r3, [pc, #8]	; (8006170 <display_clear+0x1c>)
 8006168:	701a      	strb	r2, [r3, #0]
}
 800616a:	bd10      	pop	{r4, pc}
 800616c:	20000af4 	.word	0x20000af4
 8006170:	20000b7c 	.word	0x20000b7c

08006174 <display_clear_f>:
{
 8006174:	b508      	push	{r3, lr}
	u8g2_ClearDisplay(&display_u8g2);
 8006176:	4803      	ldr	r0, [pc, #12]	; (8006184 <display_clear_f+0x10>)
 8006178:	f7fe fc26 	bl	80049c8 <u8g2_ClearDisplay>
	line_no=0;
 800617c:	2200      	movs	r2, #0
 800617e:	4b02      	ldr	r3, [pc, #8]	; (8006188 <display_clear_f+0x14>)
 8006180:	701a      	strb	r2, [r3, #0]
}
 8006182:	bd08      	pop	{r3, pc}
 8006184:	20000af4 	.word	0x20000af4
 8006188:	20000b7c 	.word	0x20000b7c

0800618c <display_println>:
	idx = 0;
 800618c:	2200      	movs	r2, #0
{
 800618e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006192:	4604      	mov	r4, r0
			tmp[idx]=0;
 8006194:	4690      	mov	r8, r2
{
 8006196:	b08e      	sub	sp, #56	; 0x38
 8006198:	4e20      	ldr	r6, [pc, #128]	; (800621c <display_println+0x90>)
 800619a:	4f21      	ldr	r7, [pc, #132]	; (8006220 <display_println+0x94>)
 800619c:	a90e      	add	r1, sp, #56	; 0x38
		if ((*ptr_s) == '\r') {ptr_s++;}  // Skip \r
 800619e:	7823      	ldrb	r3, [r4, #0]
 80061a0:	2b0d      	cmp	r3, #13
		if ( ((*ptr_s) == '\n') || ((*ptr_s)=='\0') ) 	// NewLine or End of String found
 80061a2:	bf04      	itt	eq
 80061a4:	7863      	ldrbeq	r3, [r4, #1]
		if ((*ptr_s) == '\r') {ptr_s++;}  // Skip \r
 80061a6:	3401      	addeq	r4, #1
		if ( ((*ptr_s) == '\n') || ((*ptr_s)=='\0') ) 	// NewLine or End of String found
 80061a8:	2b0a      	cmp	r3, #10
 80061aa:	d00c      	beq.n	80061c6 <display_println+0x3a>
 80061ac:	b15b      	cbz	r3, 80061c6 <display_println+0x3a>
			if (idx < (__MAX_STING_LEN-1)) idx++;
 80061ae:	2a30      	cmp	r2, #48	; 0x30
			tmp[idx] = (*ptr_s);
 80061b0:	f801 3c34 	strb.w	r3, [r1, #-52]
			if (idx < (__MAX_STING_LEN-1)) idx++;
 80061b4:	d805      	bhi.n	80061c2 <display_println+0x36>
 80061b6:	3201      	adds	r2, #1
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	f102 0338 	add.w	r3, r2, #56	; 0x38
 80061be:	eb0d 0103 	add.w	r1, sp, r3
	while( (*(ptr_s++)) != '\0' );
 80061c2:	3401      	adds	r4, #1
 80061c4:	e7eb      	b.n	800619e <display_println+0x12>
			if (line_no>7)  {display_scroll(); }
 80061c6:	7835      	ldrb	r5, [r6, #0]
			tmp[idx]=0;
 80061c8:	f801 8c34 	strb.w	r8, [r1, #-52]
			if (line_no>7)  {display_scroll(); }
 80061cc:	2d07      	cmp	r5, #7
 80061ce:	d810      	bhi.n	80061f2 <display_println+0x66>
			  else {line_no++;}
 80061d0:	3501      	adds	r5, #1
 80061d2:	b2ed      	uxtb	r5, r5
 80061d4:	7035      	strb	r5, [r6, #0]
			u8g2_DrawStr(&display_u8g2,0,8*line_no,tmp);
 80061d6:	00ea      	lsls	r2, r5, #3
 80061d8:	ab01      	add	r3, sp, #4
 80061da:	2100      	movs	r1, #0
 80061dc:	4638      	mov	r0, r7
 80061de:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80061e2:	f7fe ff49 	bl	8005078 <u8g2_DrawStr>
	while( (*(ptr_s++)) != '\0' );
 80061e6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80061ea:	b18b      	cbz	r3, 8006210 <display_println+0x84>
			idx = 0;
 80061ec:	2200      	movs	r2, #0
 80061ee:	a90e      	add	r1, sp, #56	; 0x38
 80061f0:	e7d5      	b.n	800619e <display_println+0x12>
	dst=u8g2_GetBufferPtr(&display_u8g2);
 80061f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
		*(dst++) = *(src++);
 80061f4:	f44f 7260 	mov.w	r2, #896	; 0x380
 80061f8:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 fa4d 	bl	800769c <memmove>
		*(dst++) = 0x00;
 8006202:	2280      	movs	r2, #128	; 0x80
 8006204:	2100      	movs	r1, #0
 8006206:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800620a:	f001 fa61 	bl	80076d0 <memset>
 800620e:	e7e2      	b.n	80061d6 <display_println+0x4a>
	u8g2_UpdateDisplay(&display_u8g2);
 8006210:	4803      	ldr	r0, [pc, #12]	; (8006220 <display_println+0x94>)
 8006212:	f7fe fbd7 	bl	80049c4 <u8g2_UpdateDisplay>
}
 8006216:	b00e      	add	sp, #56	; 0x38
 8006218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800621c:	20000b7c 	.word	0x20000b7c
 8006220:	20000af4 	.word	0x20000af4

08006224 <display_gotoxy>:
	if ((y>=0) && (y<8))
 8006224:	b28b      	uxth	r3, r1
 8006226:	2b07      	cmp	r3, #7
		line_no = y;
 8006228:	bf9c      	itt	ls
 800622a:	4b01      	ldrls	r3, [pc, #4]	; (8006230 <display_gotoxy+0xc>)
 800622c:	7019      	strbls	r1, [r3, #0]
}
 800622e:	4770      	bx	lr
 8006230:	20000b7c 	.word	0x20000b7c

08006234 <display_line_f>:
{
 8006234:	b500      	push	{lr}
 8006236:	4684      	mov	ip, r0
 8006238:	4696      	mov	lr, r2
 800623a:	b083      	sub	sp, #12
	u8g2_DrawLine(&display_u8g2, x1, y1, x2, y2);
 800623c:	b2db      	uxtb	r3, r3
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	b2ca      	uxtb	r2, r1
 8006242:	4805      	ldr	r0, [pc, #20]	; (8006258 <display_line_f+0x24>)
 8006244:	fa5f f38e 	uxtb.w	r3, lr
 8006248:	fa5f f18c 	uxtb.w	r1, ip
 800624c:	f7ff f814 	bl	8005278 <u8g2_DrawLine>
}
 8006250:	b003      	add	sp, #12
 8006252:	f85d fb04 	ldr.w	pc, [sp], #4
 8006256:	bf00      	nop
 8006258:	20000af4 	.word	0x20000af4

0800625c <display_update>:
	u8g2_UpdateDisplay(&display_u8g2);
 800625c:	4801      	ldr	r0, [pc, #4]	; (8006264 <display_update+0x8>)
 800625e:	f7fe bbb1 	b.w	80049c4 <u8g2_UpdateDisplay>
 8006262:	bf00      	nop
 8006264:	20000af4 	.word	0x20000af4

08006268 <distance_init>:
 * @return
 *    0: ok
 *   !=0: error
 */
uint8_t distance_init()
{
 8006268:	b570      	push	{r4, r5, r6, lr}
	// Initialize the GPIO Expander IC
    gpio_sx1508_init();

	// Assign Front sensor to new I2C-Address
	VL53L0X_address=0x29;
 800626a:	2629      	movs	r6, #41	; 0x29
 800626c:	4d37      	ldr	r5, [pc, #220]	; (800634c <distance_init+0xe4>)
    gpio_sx1508_init();
 800626e:	f000 f8a1 	bl	80063b4 <gpio_sx1508_init>
	gpio_sx1508_out(TOF_ENABLE_FF);
 8006272:	2080      	movs	r0, #128	; 0x80
	VL53L0X_address=0x29;
 8006274:	602e      	str	r6, [r5, #0]
	gpio_sx1508_out(TOF_ENABLE_FF);
 8006276:	f000 f919 	bl	80064ac <gpio_sx1508_out>
	HAL_Delay(20); // Wait for Sensor Power up
 800627a:	2014      	movs	r0, #20
 800627c:	f7fc f866 	bl	800234c <HAL_Delay>
	//if (VL53L0X_pingAddress(VL53L0X_address)) return 1; // Check if sensor present
	VL53L0X_setAddress(TOF_I2CADDR_FF);	// New address
 8006280:	2030      	movs	r0, #48	; 0x30
 8006282:	f000 fc59 	bl	8006b38 <VL53L0X_setAddress>

	// Assign Front/Left sensor to new I2C-Address
	VL53L0X_address=0x29;
	// Already moved sensors must be kept enabled
	// otherwise they are resetted to default address
	gpio_sx1508_out(TOF_ENABLE_FL|TOF_ENABLE_FF);
 8006286:	2081      	movs	r0, #129	; 0x81
	VL53L0X_address=0x29;
 8006288:	602e      	str	r6, [r5, #0]
	gpio_sx1508_out(TOF_ENABLE_FL|TOF_ENABLE_FF);
 800628a:	f000 f90f 	bl	80064ac <gpio_sx1508_out>
	HAL_Delay(20);
 800628e:	2014      	movs	r0, #20
 8006290:	f7fc f85c 	bl	800234c <HAL_Delay>
	//if (VL53L0X_pingAddress(VL53L0X_address)) return 2;
	VL53L0X_setAddress(TOF_I2CADDR_FL);
 8006294:	2031      	movs	r0, #49	; 0x31
 8006296:	f000 fc4f 	bl	8006b38 <VL53L0X_setAddress>

	// Assign Front/Right sensor to new I2C-Address
	VL53L0X_address=0x29;
	gpio_sx1508_out(TOF_ENABLE_FR|TOF_ENABLE_FL|TOF_ENABLE_FF);
 800629a:	20c1      	movs	r0, #193	; 0xc1
	VL53L0X_address=0x29;
 800629c:	602e      	str	r6, [r5, #0]
	gpio_sx1508_out(TOF_ENABLE_FR|TOF_ENABLE_FL|TOF_ENABLE_FF);
 800629e:	f000 f905 	bl	80064ac <gpio_sx1508_out>
	HAL_Delay(20);
 80062a2:	2014      	movs	r0, #20
 80062a4:	f7fc f852 	bl	800234c <HAL_Delay>
	//if (VL53L0X_pingAddress(VL53L0X_address)) return 3;
	VL53L0X_setAddress(TOF_I2CADDR_FR);
 80062a8:	2032      	movs	r0, #50	; 0x32
 80062aa:	f000 fc45 	bl	8006b38 <VL53L0X_setAddress>

	// Assign Right sensor to new I2C-Address
	VL53L0X_address=0x29;
	gpio_sx1508_out(TOF_ENABLE_FR|TOF_ENABLE_FL|TOF_ENABLE_FF|TOF_ENABLE_RR);
 80062ae:	20e1      	movs	r0, #225	; 0xe1
	VL53L0X_address=0x29;
 80062b0:	602e      	str	r6, [r5, #0]
	gpio_sx1508_out(TOF_ENABLE_FR|TOF_ENABLE_FL|TOF_ENABLE_FF|TOF_ENABLE_RR);
 80062b2:	f000 f8fb 	bl	80064ac <gpio_sx1508_out>
	HAL_Delay(20);
 80062b6:	2014      	movs	r0, #20
 80062b8:	f7fc f848 	bl	800234c <HAL_Delay>
	//if (VL53L0X_pingAddress(VL53L0X_address)) return 4;
	VL53L0X_setAddress(TOF_I2CADDR_RR);
 80062bc:	2034      	movs	r0, #52	; 0x34
 80062be:	f000 fc3b 	bl	8006b38 <VL53L0X_setAddress>

	// Assign Left sensor to new I2C-Address
	VL53L0X_address=0x29;
	gpio_sx1508_out(TOF_ENABLE_ALL);
 80062c2:	20e3      	movs	r0, #227	; 0xe3
	VL53L0X_address=0x29;
 80062c4:	602e      	str	r6, [r5, #0]
	gpio_sx1508_out(TOF_ENABLE_ALL);
 80062c6:	f000 f8f1 	bl	80064ac <gpio_sx1508_out>
	HAL_Delay(20);
 80062ca:	2014      	movs	r0, #20
	VL53L0X_setAddress(TOF_I2CADDR_LL);
	//scan_i2c();

	// Initalize all Sensors
	VL53L0Xm_init(TOF_I2CADDR_FF,1);
	VL53L0X_setSignalRateLimit(2.5);
 80062cc:	4c20      	ldr	r4, [pc, #128]	; (8006350 <distance_init+0xe8>)
	HAL_Delay(20);
 80062ce:	f7fc f83d 	bl	800234c <HAL_Delay>
	VL53L0X_setAddress(TOF_I2CADDR_LL);
 80062d2:	2033      	movs	r0, #51	; 0x33
 80062d4:	f000 fc30 	bl	8006b38 <VL53L0X_setAddress>
	VL53L0Xm_init(TOF_I2CADDR_FF,1);
 80062d8:	2101      	movs	r1, #1
 80062da:	2030      	movs	r0, #48	; 0x30
 80062dc:	f001 f8d4 	bl	8007488 <VL53L0Xm_init>
	VL53L0X_setSignalRateLimit(2.5);
 80062e0:	4620      	mov	r0, r4
 80062e2:	f000 fc3d 	bl	8006b60 <VL53L0X_setSignalRateLimit>
	VL53L0X_setMeasurementTimingBudget(30000);
 80062e6:	f247 5030 	movw	r0, #30000	; 0x7530
 80062ea:	f000 fe75 	bl	8006fd8 <VL53L0X_setMeasurementTimingBudget>
	VL53L0Xm_init(TOF_I2CADDR_FL,1);
 80062ee:	2101      	movs	r1, #1
 80062f0:	2031      	movs	r0, #49	; 0x31
 80062f2:	f001 f8c9 	bl	8007488 <VL53L0Xm_init>
	VL53L0X_setSignalRateLimit(2.5);
 80062f6:	4620      	mov	r0, r4
 80062f8:	f000 fc32 	bl	8006b60 <VL53L0X_setSignalRateLimit>
	VL53L0X_setMeasurementTimingBudget(30000);
 80062fc:	f247 5030 	movw	r0, #30000	; 0x7530
 8006300:	f000 fe6a 	bl	8006fd8 <VL53L0X_setMeasurementTimingBudget>
	VL53L0Xm_init(TOF_I2CADDR_FR,1);
 8006304:	2101      	movs	r1, #1
 8006306:	2032      	movs	r0, #50	; 0x32
 8006308:	f001 f8be 	bl	8007488 <VL53L0Xm_init>
	VL53L0X_setSignalRateLimit(2.5);
 800630c:	4620      	mov	r0, r4
 800630e:	f000 fc27 	bl	8006b60 <VL53L0X_setSignalRateLimit>
	VL53L0X_setMeasurementTimingBudget(30000);
 8006312:	f247 5030 	movw	r0, #30000	; 0x7530
 8006316:	f000 fe5f 	bl	8006fd8 <VL53L0X_setMeasurementTimingBudget>
	VL53L0Xm_init(TOF_I2CADDR_RR,1);
 800631a:	2101      	movs	r1, #1
 800631c:	2034      	movs	r0, #52	; 0x34
 800631e:	f001 f8b3 	bl	8007488 <VL53L0Xm_init>
	VL53L0X_setSignalRateLimit(2.5);
 8006322:	4620      	mov	r0, r4
 8006324:	f000 fc1c 	bl	8006b60 <VL53L0X_setSignalRateLimit>
	VL53L0X_setMeasurementTimingBudget(30000);
 8006328:	f247 5030 	movw	r0, #30000	; 0x7530
 800632c:	f000 fe54 	bl	8006fd8 <VL53L0X_setMeasurementTimingBudget>
	VL53L0Xm_init(TOF_I2CADDR_LL,1);
 8006330:	2101      	movs	r1, #1
 8006332:	2033      	movs	r0, #51	; 0x33
 8006334:	f001 f8a8 	bl	8007488 <VL53L0Xm_init>
	VL53L0X_setSignalRateLimit(2.5);
 8006338:	4620      	mov	r0, r4
 800633a:	f000 fc11 	bl	8006b60 <VL53L0X_setSignalRateLimit>
	VL53L0X_setMeasurementTimingBudget(30000);
 800633e:	f247 5030 	movw	r0, #30000	; 0x7530
 8006342:	f000 fe49 	bl	8006fd8 <VL53L0X_setMeasurementTimingBudget>
	return 0;
}
 8006346:	2000      	movs	r0, #0
 8006348:	bd70      	pop	{r4, r5, r6, pc}
 800634a:	bf00      	nop
 800634c:	20000dac 	.word	0x20000dac
 8006350:	40200000 	.word	0x40200000

08006354 <distance_get_scan_values>:
 * @return
 *   0 		: ok
 *   !=0 	: error
 */
uint8_t distance_get_scan_values(uint16_t *values)
{
 8006354:	b510      	push	{r4, lr}
 8006356:	4604      	mov	r4, r0
	values[0] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_FF);
 8006358:	2030      	movs	r0, #48	; 0x30
 800635a:	f000 fc59 	bl	8006c10 <VL53L0Xm_readRangeContinuousMillimeters>
 800635e:	4603      	mov	r3, r0
	values[1] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_FL);
 8006360:	2031      	movs	r0, #49	; 0x31
	values[0] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_FF);
 8006362:	8023      	strh	r3, [r4, #0]
	values[1] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_FL);
 8006364:	f000 fc54 	bl	8006c10 <VL53L0Xm_readRangeContinuousMillimeters>
 8006368:	4603      	mov	r3, r0
	values[2] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_FR);
 800636a:	2032      	movs	r0, #50	; 0x32
	values[1] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_FL);
 800636c:	8063      	strh	r3, [r4, #2]
	values[2] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_FR);
 800636e:	f000 fc4f 	bl	8006c10 <VL53L0Xm_readRangeContinuousMillimeters>
 8006372:	4603      	mov	r3, r0
	values[3] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_LL);
 8006374:	2033      	movs	r0, #51	; 0x33
	values[2] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_FR);
 8006376:	80a3      	strh	r3, [r4, #4]
	values[3] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_LL);
 8006378:	f000 fc4a 	bl	8006c10 <VL53L0Xm_readRangeContinuousMillimeters>
 800637c:	4603      	mov	r3, r0
	values[4] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_RR);
 800637e:	2034      	movs	r0, #52	; 0x34
	values[3] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_LL);
 8006380:	80e3      	strh	r3, [r4, #6]
	values[4] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_RR);
 8006382:	f000 fc45 	bl	8006c10 <VL53L0Xm_readRangeContinuousMillimeters>
 8006386:	4603      	mov	r3, r0
	return 0;
}
 8006388:	2000      	movs	r0, #0
	values[4] = VL53L0Xm_readRangeContinuousMillimeters(TOF_I2CADDR_RR);
 800638a:	8123      	strh	r3, [r4, #8]
}
 800638c:	bd10      	pop	{r4, pc}
 800638e:	bf00      	nop

08006390 <distance_start_scan>:
 * @return
 *   0 		: ok
 *   !=0 	: error
 */
uint8_t distance_start_scan()
{
 8006390:	b508      	push	{r3, lr}
	VL53L0X_startSingle(TOF_I2CADDR_FF);
 8006392:	2030      	movs	r0, #48	; 0x30
 8006394:	f000 fc42 	bl	8006c1c <VL53L0X_startSingle>
	VL53L0X_startSingle(TOF_I2CADDR_FL);
 8006398:	2031      	movs	r0, #49	; 0x31
 800639a:	f000 fc3f 	bl	8006c1c <VL53L0X_startSingle>
	VL53L0X_startSingle(TOF_I2CADDR_FR);
 800639e:	2032      	movs	r0, #50	; 0x32
 80063a0:	f000 fc3c 	bl	8006c1c <VL53L0X_startSingle>
	VL53L0X_startSingle(TOF_I2CADDR_LL);
 80063a4:	2033      	movs	r0, #51	; 0x33
 80063a6:	f000 fc39 	bl	8006c1c <VL53L0X_startSingle>
	VL53L0X_startSingle(TOF_I2CADDR_RR);
 80063aa:	2034      	movs	r0, #52	; 0x34
 80063ac:	f000 fc36 	bl	8006c1c <VL53L0X_startSingle>
	return 0;
}
 80063b0:	2000      	movs	r0, #0
 80063b2:	bd08      	pop	{r3, pc}

080063b4 <gpio_sx1508_init>:
 *  @return
 *     0 - no error
 *     1 - error
 */
uint8_t gpio_sx1508_init()
{
 80063b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t status;
	uint8_t data;
	//printf("SX1508 INIT\r\n");
	// Soft Reset
	data = 0x12;
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_RESET, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80063b8:	2501      	movs	r5, #1
 80063ba:	2664      	movs	r6, #100	; 0x64
	data = 0x12;
 80063bc:	2412      	movs	r4, #18
{
 80063be:	b086      	sub	sp, #24
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_RESET, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80063c0:	f10d 0717 	add.w	r7, sp, #23
 80063c4:	227d      	movs	r2, #125	; 0x7d
 80063c6:	2140      	movs	r1, #64	; 0x40
 80063c8:	462b      	mov	r3, r5
 80063ca:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80063ce:	4832      	ldr	r0, [pc, #200]	; (8006498 <gpio_sx1508_init+0xe4>)
 80063d0:	9700      	str	r7, [sp, #0]
	data = 0x12;
 80063d2:	f88d 4017 	strb.w	r4, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_RESET, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80063d6:	f7fc fde3 	bl	8002fa0 <HAL_I2C_Mem_Write>
	data = 0x34;
 80063da:	f04f 0c34 	mov.w	ip, #52	; 0x34
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_RESET, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80063de:	4604      	mov	r4, r0
	status += HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_RESET, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80063e0:	462b      	mov	r3, r5
 80063e2:	227d      	movs	r2, #125	; 0x7d
 80063e4:	2140      	movs	r1, #64	; 0x40
 80063e6:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80063ea:	482b      	ldr	r0, [pc, #172]	; (8006498 <gpio_sx1508_init+0xe4>)
 80063ec:	9700      	str	r7, [sp, #0]
	data = 0x34;
 80063ee:	f88d c017 	strb.w	ip, [sp, #23]
	status += HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_RESET, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80063f2:	f7fc fdd5 	bl	8002fa0 <HAL_I2C_Mem_Write>
 80063f6:	4420      	add	r0, r4
	if (status) {
 80063f8:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 80063fc:	d140      	bne.n	8006480 <gpio_sx1508_init+0xcc>
	}

	HAL_Delay(100);

	// Disable Input Buffer
	data = SX1508_MASK;
 80063fe:	f04f 08e3 	mov.w	r8, #227	; 0xe3
	HAL_Delay(100);
 8006402:	4630      	mov	r0, r6
 8006404:	f7fb ffa2 	bl	800234c <HAL_Delay>
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_INPUT_DISABLE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8006408:	4622      	mov	r2, r4
 800640a:	462b      	mov	r3, r5
 800640c:	2140      	movs	r1, #64	; 0x40
 800640e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006412:	4821      	ldr	r0, [pc, #132]	; (8006498 <gpio_sx1508_init+0xe4>)
 8006414:	9700      	str	r7, [sp, #0]
	data = SX1508_MASK;
 8006416:	f88d 8017 	strb.w	r8, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_INPUT_DISABLE, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 800641a:	f7fc fdc1 	bl	8002fa0 <HAL_I2C_Mem_Write>
	if (status) {
 800641e:	bb40      	cbnz	r0, 8006472 <gpio_sx1508_init+0xbe>
		printf("SX1508 ERROR: INIT 1\r\n");
		return 1;
	}

	data = 0;
 8006420:	f88d 0017 	strb.w	r0, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_DATA, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);;
 8006424:	462b      	mov	r3, r5
 8006426:	2208      	movs	r2, #8
 8006428:	2140      	movs	r1, #64	; 0x40
 800642a:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800642e:	481a      	ldr	r0, [pc, #104]	; (8006498 <gpio_sx1508_init+0xe4>)
 8006430:	9700      	str	r7, [sp, #0]
 8006432:	f7fc fdb5 	bl	8002fa0 <HAL_I2C_Mem_Write>
	if (status) {
 8006436:	b9e0      	cbnz	r0, 8006472 <gpio_sx1508_init+0xbe>
	}

	// Set open drain

	data = SX1508_MASK;
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_OPEN_DRAIN, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8006438:	462b      	mov	r3, r5
 800643a:	2205      	movs	r2, #5
 800643c:	2140      	movs	r1, #64	; 0x40
 800643e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8006442:	4815      	ldr	r0, [pc, #84]	; (8006498 <gpio_sx1508_init+0xe4>)
 8006444:	9700      	str	r7, [sp, #0]
	data = SX1508_MASK;
 8006446:	f88d 8017 	strb.w	r8, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_OPEN_DRAIN, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 800644a:	f7fc fda9 	bl	8002fa0 <HAL_I2C_Mem_Write>
	if (status) {
 800644e:	b9f0      	cbnz	r0, 800648e <gpio_sx1508_init+0xda>
		return 1;
	}

	// Set data direction to output
	data = SX1508_MASK;
	status = HAL_I2C_Mem_Read(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_DIR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8006450:	462b      	mov	r3, r5
 8006452:	2207      	movs	r2, #7
 8006454:	2140      	movs	r1, #64	; 0x40
 8006456:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800645a:	480f      	ldr	r0, [pc, #60]	; (8006498 <gpio_sx1508_init+0xe4>)
 800645c:	9700      	str	r7, [sp, #0]
	data = SX1508_MASK;
 800645e:	f88d 8017 	strb.w	r8, [sp, #23]
	status = HAL_I2C_Mem_Read(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_DIR, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8006462:	f7fc fe51 	bl	8003108 <HAL_I2C_Mem_Read>
	if (status) {
 8006466:	b140      	cbz	r0, 800647a <gpio_sx1508_init+0xc6>
		printf("SX1508 ERROR: INIT 3\r\n");
 8006468:	480c      	ldr	r0, [pc, #48]	; (800649c <gpio_sx1508_init+0xe8>)
 800646a:	f001 f9bf 	bl	80077ec <puts>
		return 1;
 800646e:	4628      	mov	r0, r5
 8006470:	e003      	b.n	800647a <gpio_sx1508_init+0xc6>
		printf("SX1508 ERROR: INIT 1\r\n");
 8006472:	480b      	ldr	r0, [pc, #44]	; (80064a0 <gpio_sx1508_init+0xec>)
 8006474:	f001 f9ba 	bl	80077ec <puts>
		return 1;
 8006478:	2001      	movs	r0, #1
	}
	return 0;
}
 800647a:	b006      	add	sp, #24
 800647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		printf("SX1508 ERROR: RESET\r\n");
 8006480:	4808      	ldr	r0, [pc, #32]	; (80064a4 <gpio_sx1508_init+0xf0>)
 8006482:	f001 f9b3 	bl	80077ec <puts>
		return 1;
 8006486:	4628      	mov	r0, r5
}
 8006488:	b006      	add	sp, #24
 800648a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		printf("SX1508 ERROR: INIT 2\r\n");
 800648e:	4806      	ldr	r0, [pc, #24]	; (80064a8 <gpio_sx1508_init+0xf4>)
 8006490:	f001 f9ac 	bl	80077ec <puts>
		return 1;
 8006494:	4628      	mov	r0, r5
 8006496:	e7f0      	b.n	800647a <gpio_sx1508_init+0xc6>
 8006498:	200004e4 	.word	0x200004e4
 800649c:	0800ab0c 	.word	0x0800ab0c
 80064a0:	0800aadc 	.word	0x0800aadc
 80064a4:	0800aac4 	.word	0x0800aac4
 80064a8:	0800aaf4 	.word	0x0800aaf4

080064ac <gpio_sx1508_out>:
 * @return
 *   0 - no error
 *   1 - error
 */
uint8_t gpio_sx1508_out(uint8_t val)
{
 80064ac:	b530      	push	{r4, r5, lr}
 80064ae:	4684      	mov	ip, r0
	uint8_t status;
	uint8_t data;

	data = val & SX1508_MASK;
	//printf("SX data: 0x%02x\r\n",data);
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_DATA, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80064b0:	2401      	movs	r4, #1
 80064b2:	2564      	movs	r5, #100	; 0x64
{
 80064b4:	b087      	sub	sp, #28
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_DATA, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80064b6:	f10d 0317 	add.w	r3, sp, #23
 80064ba:	9300      	str	r3, [sp, #0]
	data = val & SX1508_MASK;
 80064bc:	f00c 0ce3 	and.w	ip, ip, #227	; 0xe3
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_DATA, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80064c0:	2208      	movs	r2, #8
 80064c2:	2140      	movs	r1, #64	; 0x40
 80064c4:	4623      	mov	r3, r4
 80064c6:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80064ca:	4807      	ldr	r0, [pc, #28]	; (80064e8 <gpio_sx1508_out+0x3c>)
	data = val & SX1508_MASK;
 80064cc:	f88d c017 	strb.w	ip, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1508_I2C_ADDR, SX1508_REG_DATA, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 80064d0:	f7fc fd66 	bl	8002fa0 <HAL_I2C_Mem_Write>
	if (status) {
 80064d4:	b908      	cbnz	r0, 80064da <gpio_sx1508_out+0x2e>
		printf("SX1508 ERROR: OUT 1\r\n");
		return 1;
	}
	return 0;
}
 80064d6:	b007      	add	sp, #28
 80064d8:	bd30      	pop	{r4, r5, pc}
		printf("SX1508 ERROR: OUT 1\r\n");
 80064da:	4804      	ldr	r0, [pc, #16]	; (80064ec <gpio_sx1508_out+0x40>)
 80064dc:	f001 f986 	bl	80077ec <puts>
		return 1;
 80064e0:	4620      	mov	r0, r4
}
 80064e2:	b007      	add	sp, #28
 80064e4:	bd30      	pop	{r4, r5, pc}
 80064e6:	bf00      	nop
 80064e8:	200004e4 	.word	0x200004e4
 80064ec:	0800ab24 	.word	0x0800ab24

080064f0 <motors_init>:
 * Encoders will be set to 0
 *

 */
void motors_init()
{
 80064f0:	b570      	push	{r4, r5, r6, lr}
	HAL_TIM_Base_Start(&htim2);
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);

	/* Set Speed to Zero at beginning */
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 80064f2:	2400      	movs	r4, #0
	HAL_TIM_Base_Start(&htim2);
 80064f4:	4d0e      	ldr	r5, [pc, #56]	; (8006530 <motors_init+0x40>)
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);

	/* Encoder Setup */
	__HAL_TIM_SET_COUNTER(&htim3,0);
	__HAL_TIM_SET_COUNTER(&htim4,0);
 80064f6:	4e0f      	ldr	r6, [pc, #60]	; (8006534 <motors_init+0x44>)
	HAL_TIM_Base_Start(&htim2);
 80064f8:	4628      	mov	r0, r5
 80064fa:	f7fd fd7f 	bl	8003ffc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80064fe:	4621      	mov	r1, r4
 8006500:	4628      	mov	r0, r5
 8006502:	f7fd fded 	bl	80040e0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8006506:	2104      	movs	r1, #4
 8006508:	4628      	mov	r0, r5
 800650a:	f7fd fde9 	bl	80040e0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 800650e:	682b      	ldr	r3, [r5, #0]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8006510:	4809      	ldr	r0, [pc, #36]	; (8006538 <motors_init+0x48>)
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8006512:	635c      	str	r4, [r3, #52]	; 0x34
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8006514:	6802      	ldr	r2, [r0, #0]
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,0);
 8006516:	639c      	str	r4, [r3, #56]	; 0x38
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8006518:	6833      	ldr	r3, [r6, #0]
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_1);
 800651a:	4621      	mov	r1, r4
	__HAL_TIM_SET_COUNTER(&htim3,0);
 800651c:	6254      	str	r4, [r2, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim4,0);
 800651e:	625c      	str	r4, [r3, #36]	; 0x24
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_1);
 8006520:	f7fd fe02 	bl	8004128 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_1);
 8006524:	4621      	mov	r1, r4
 8006526:	4630      	mov	r0, r6
}
 8006528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_1);
 800652c:	f7fd bdfc 	b.w	8004128 <HAL_TIM_Encoder_Start_IT>
 8006530:	20000590 	.word	0x20000590
 8006534:	20000610 	.word	0x20000610
 8006538:	200005d0 	.word	0x200005d0

0800653c <motors_encoder_callback>:
	static uint16_t enc_left_old;
	static uint16_t enc_right_old;
	uint16_t enc_left, enc_right;

	// read out values
	enc_left  = __HAL_TIM_GET_COUNTER(&htim3);
 800653c:	4a21      	ldr	r2, [pc, #132]	; (80065c4 <motors_encoder_callback+0x88>)
	enc_right = __HAL_TIM_GET_COUNTER(&htim4);
 800653e:	4b22      	ldr	r3, [pc, #136]	; (80065c8 <motors_encoder_callback+0x8c>)
	enc_left  = __HAL_TIM_GET_COUNTER(&htim3);
 8006540:	6812      	ldr	r2, [r2, #0]
{
 8006542:	b470      	push	{r4, r5, r6}
	enc_left  = __HAL_TIM_GET_COUNTER(&htim3);
 8006544:	6a52      	ldr	r2, [r2, #36]	; 0x24
	enc_right = __HAL_TIM_GET_COUNTER(&htim4);
 8006546:	681b      	ldr	r3, [r3, #0]
	tmp = (int32_t)enc_act - (int32_t)enc_old;
 8006548:	b291      	uxth	r1, r2
	enc_left  = __HAL_TIM_GET_COUNTER(&htim3);
 800654a:	460a      	mov	r2, r1

	// Handle overflow
	enc_left_10ms  += enc_delta(enc_left,  enc_left_old);
 800654c:	4d1f      	ldr	r5, [pc, #124]	; (80065cc <motors_encoder_callback+0x90>)
	enc_right = __HAL_TIM_GET_COUNTER(&htim4);
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	enc_left_10ms  += enc_delta(enc_left,  enc_left_old);
 8006550:	8828      	ldrh	r0, [r5, #0]
	if ( (enc_act < 0x4000) && (enc_old > 0xC000) )
 8006552:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	enc_right = __HAL_TIM_GET_COUNTER(&htim4);
 8006556:	fa1f fc83 	uxth.w	ip, r3
	tmp = (int32_t)enc_act - (int32_t)enc_old;
 800655a:	eba1 0100 	sub.w	r1, r1, r0
	if ( (enc_act < 0x4000) && (enc_old > 0xC000) )
 800655e:	d225      	bcs.n	80065ac <motors_encoder_callback+0x70>
 8006560:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8006564:	d82b      	bhi.n	80065be <motors_encoder_callback+0x82>
	enc_left_10ms  += enc_delta(enc_left,  enc_left_old);
 8006566:	4e1a      	ldr	r6, [pc, #104]	; (80065d0 <motors_encoder_callback+0x94>)
	enc_right_10ms += enc_delta(enc_right, enc_right_old);
 8006568:	4c1a      	ldr	r4, [pc, #104]	; (80065d4 <motors_encoder_callback+0x98>)
	enc_left_10ms  += enc_delta(enc_left,  enc_left_old);
 800656a:	6830      	ldr	r0, [r6, #0]
	tmp = (int32_t)enc_act - (int32_t)enc_old;
 800656c:	b29b      	uxth	r3, r3
	enc_left_10ms  += enc_delta(enc_left,  enc_left_old);
 800656e:	4401      	add	r1, r0
 8006570:	6031      	str	r1, [r6, #0]
	enc_right_10ms += enc_delta(enc_right, enc_right_old);
 8006572:	8821      	ldrh	r1, [r4, #0]
	if ( (enc_act < 0x4000) && (enc_old > 0xC000) )
 8006574:	f5bc 4f80 	cmp.w	ip, #16384	; 0x4000
	tmp = (int32_t)enc_act - (int32_t)enc_old;
 8006578:	eba3 0301 	sub.w	r3, r3, r1
	if ( (enc_act < 0x4000) && (enc_old > 0xC000) )
 800657c:	d20d      	bcs.n	800659a <motors_encoder_callback+0x5e>
 800657e:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8006582:	d901      	bls.n	8006588 <motors_encoder_callback+0x4c>
		tmp+=65536;
 8006584:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	enc_right_10ms += enc_delta(enc_right, enc_right_old);
 8006588:	4913      	ldr	r1, [pc, #76]	; (80065d8 <motors_encoder_callback+0x9c>)

	// Keep old values values
	enc_left_old = enc_left;
 800658a:	802a      	strh	r2, [r5, #0]
	enc_right_10ms += enc_delta(enc_right, enc_right_old);
 800658c:	680a      	ldr	r2, [r1, #0]
	enc_right_old = enc_right;
 800658e:	f8a4 c000 	strh.w	ip, [r4]
	enc_right_10ms += enc_delta(enc_right, enc_right_old);
 8006592:	4413      	add	r3, r2
 8006594:	600b      	str	r3, [r1, #0]
}
 8006596:	bc70      	pop	{r4, r5, r6}
 8006598:	4770      	bx	lr
	if ( (enc_act > 0xC000) && (enc_old < 0x4000) )
 800659a:	f5bc 4f40 	cmp.w	ip, #49152	; 0xc000
 800659e:	d9f3      	bls.n	8006588 <motors_encoder_callback+0x4c>
 80065a0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
		tmp-=65536;
 80065a4:	bf38      	it	cc
 80065a6:	f5a3 3380 	subcc.w	r3, r3, #65536	; 0x10000
 80065aa:	e7ed      	b.n	8006588 <motors_encoder_callback+0x4c>
	if ( (enc_act > 0xC000) && (enc_old < 0x4000) )
 80065ac:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80065b0:	d9d9      	bls.n	8006566 <motors_encoder_callback+0x2a>
 80065b2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
		tmp-=65536;
 80065b6:	bf38      	it	cc
 80065b8:	f5a1 3180 	subcc.w	r1, r1, #65536	; 0x10000
 80065bc:	e7d3      	b.n	8006566 <motors_encoder_callback+0x2a>
		tmp+=65536;
 80065be:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
 80065c2:	e7d0      	b.n	8006566 <motors_encoder_callback+0x2a>
 80065c4:	200005d0 	.word	0x200005d0
 80065c8:	20000610 	.word	0x20000610
 80065cc:	20000b84 	.word	0x20000b84
 80065d0:	20000b80 	.word	0x20000b80
 80065d4:	20000b8c 	.word	0x20000b8c
 80065d8:	20000b88 	.word	0x20000b88

080065dc <motors_encoder_left>:
 *
 */
int32_t motors_encoder_left()
{
//	return __HAL_TIM_GET_COUNTER(&htim3);
	return enc_left_10ms;
 80065dc:	4b01      	ldr	r3, [pc, #4]	; (80065e4 <motors_encoder_left+0x8>)
 80065de:	6818      	ldr	r0, [r3, #0]
}
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000b80 	.word	0x20000b80

080065e8 <motors_encoder_right>:
 * @return int32 (signed) of encoder steps
 *
 */
int32_t motors_encoder_right()
{
	return enc_right_10ms;
 80065e8:	4b01      	ldr	r3, [pc, #4]	; (80065f0 <motors_encoder_right+0x8>)
 80065ea:	6818      	ldr	r0, [r3, #0]
//	return __HAL_TIM_GET_COUNTER(&htim4);
}
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	20000b88 	.word	0x20000b88

080065f4 <motors_set_left_pwm>:
 *
 */
void motors_set_left_pwm(int16_t pwm)
{
	// Check for direction
	if ( (pwm<0) && (pwm>=-100) )
 80065f4:	f100 0364 	add.w	r3, r0, #100	; 0x64
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b63      	cmp	r3, #99	; 0x63
{
 80065fc:	b510      	push	{r4, lr}
 80065fe:	4604      	mov	r4, r0
	if ( (pwm<0) && (pwm>=-100) )
 8006600:	d90c      	bls.n	800661c <motors_set_left_pwm+0x28>
		// Change direction
		HAL_GPIO_WritePin(MOT_L_DIR_GPIO_Port, MOT_L_DIR_Pin, GPIO_PIN_SET);
		// set pwm value (minus sign needed as pwm is <0 in this case)
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,-pwm);
	}
	else if (pwm<=100)
 8006602:	2864      	cmp	r0, #100	; 0x64
 8006604:	dd00      	ble.n	8006608 <motors_set_left_pwm+0x14>
	{
		HAL_GPIO_WritePin(MOT_L_DIR_GPIO_Port, MOT_L_DIR_Pin, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
	}
}
 8006606:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(MOT_L_DIR_GPIO_Port, MOT_L_DIR_Pin, GPIO_PIN_RESET);
 8006608:	2200      	movs	r2, #0
 800660a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800660e:	4809      	ldr	r0, [pc, #36]	; (8006634 <motors_set_left_pwm+0x40>)
 8006610:	f7fc f8fe 	bl	8002810 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
 8006614:	4b08      	ldr	r3, [pc, #32]	; (8006638 <motors_set_left_pwm+0x44>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	635c      	str	r4, [r3, #52]	; 0x34
}
 800661a:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(MOT_L_DIR_GPIO_Port, MOT_L_DIR_Pin, GPIO_PIN_SET);
 800661c:	2201      	movs	r2, #1
 800661e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006622:	4804      	ldr	r0, [pc, #16]	; (8006634 <motors_set_left_pwm+0x40>)
 8006624:	f7fc f8f4 	bl	8002810 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,-pwm);
 8006628:	4b03      	ldr	r3, [pc, #12]	; (8006638 <motors_set_left_pwm+0x44>)
 800662a:	4264      	negs	r4, r4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	635c      	str	r4, [r3, #52]	; 0x34
}
 8006630:	bd10      	pop	{r4, pc}
 8006632:	bf00      	nop
 8006634:	40010c00 	.word	0x40010c00
 8006638:	20000590 	.word	0x20000590

0800663c <motors_set_right_pwm>:
 * @param pwm: Value for PWM (-100 ... 100)
 *
 */
void motors_set_right_pwm(int16_t pwm)
{
	if ( (pwm<0) && (pwm>=-100) )
 800663c:	f100 0364 	add.w	r3, r0, #100	; 0x64
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b63      	cmp	r3, #99	; 0x63
{
 8006644:	b510      	push	{r4, lr}
 8006646:	4604      	mov	r4, r0
	if ( (pwm<0) && (pwm>=-100) )
 8006648:	d90c      	bls.n	8006664 <motors_set_right_pwm+0x28>
		// Check for direction
		HAL_GPIO_WritePin(MOT_R_DIR_GPIO_Port, MOT_R_DIR_Pin, GPIO_PIN_RESET);
		// set pwm value (minus sign needed as pwm is <0 in this case)
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,-pwm);
	}
	else if (pwm<=100)
 800664a:	2864      	cmp	r0, #100	; 0x64
 800664c:	dd00      	ble.n	8006650 <motors_set_right_pwm+0x14>
	{
		HAL_GPIO_WritePin(MOT_R_DIR_GPIO_Port, MOT_R_DIR_Pin, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,pwm);
	}
}
 800664e:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(MOT_R_DIR_GPIO_Port, MOT_R_DIR_Pin, GPIO_PIN_SET);
 8006650:	2201      	movs	r2, #1
 8006652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006656:	4809      	ldr	r0, [pc, #36]	; (800667c <motors_set_right_pwm+0x40>)
 8006658:	f7fc f8da 	bl	8002810 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,pwm);
 800665c:	4b08      	ldr	r3, [pc, #32]	; (8006680 <motors_set_right_pwm+0x44>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	639c      	str	r4, [r3, #56]	; 0x38
}
 8006662:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(MOT_R_DIR_GPIO_Port, MOT_R_DIR_Pin, GPIO_PIN_RESET);
 8006664:	2200      	movs	r2, #0
 8006666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800666a:	4804      	ldr	r0, [pc, #16]	; (800667c <motors_set_right_pwm+0x40>)
 800666c:	f7fc f8d0 	bl	8002810 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,-pwm);
 8006670:	4b03      	ldr	r3, [pc, #12]	; (8006680 <motors_set_right_pwm+0x44>)
 8006672:	4264      	negs	r4, r4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	639c      	str	r4, [r3, #56]	; 0x38
}
 8006678:	bd10      	pop	{r4, pc}
 800667a:	bf00      	nop
 800667c:	40010c00 	.word	0x40010c00
 8006680:	20000590 	.word	0x20000590

08006684 <motors_set_both_pwm>:
 * @param
 * 		pwm_left, pwm_right: Values for PWM of each motor (Range: -100 ... 100)
 *
 */
void motors_set_both_pwm(int16_t pwm_left, int16_t pwm_right)
{
 8006684:	b538      	push	{r3, r4, r5, lr}
	if ( (pwm<0) && (pwm>=-100) )
 8006686:	f100 0364 	add.w	r3, r0, #100	; 0x64
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b63      	cmp	r3, #99	; 0x63
{
 800668e:	4605      	mov	r5, r0
 8006690:	460c      	mov	r4, r1
	if ( (pwm<0) && (pwm>=-100) )
 8006692:	d92c      	bls.n	80066ee <motors_set_both_pwm+0x6a>
	else if (pwm<=100)
 8006694:	2864      	cmp	r0, #100	; 0x64
 8006696:	dd11      	ble.n	80066bc <motors_set_both_pwm+0x38>
	if ( (pwm<0) && (pwm>=-100) )
 8006698:	f104 0364 	add.w	r3, r4, #100	; 0x64
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b63      	cmp	r3, #99	; 0x63
 80066a0:	d91a      	bls.n	80066d8 <motors_set_both_pwm+0x54>
	else if (pwm<=100)
 80066a2:	2c64      	cmp	r4, #100	; 0x64
 80066a4:	dd00      	ble.n	80066a8 <motors_set_both_pwm+0x24>
	motors_set_left_pwm(pwm_left);
	motors_set_right_pwm(pwm_right);
}
 80066a6:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(MOT_R_DIR_GPIO_Port, MOT_R_DIR_Pin, GPIO_PIN_SET);
 80066a8:	2201      	movs	r2, #1
 80066aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066ae:	4815      	ldr	r0, [pc, #84]	; (8006704 <motors_set_both_pwm+0x80>)
 80066b0:	f7fc f8ae 	bl	8002810 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,pwm);
 80066b4:	4b14      	ldr	r3, [pc, #80]	; (8006708 <motors_set_both_pwm+0x84>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	639c      	str	r4, [r3, #56]	; 0x38
}
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(MOT_L_DIR_GPIO_Port, MOT_L_DIR_Pin, GPIO_PIN_RESET);
 80066bc:	2200      	movs	r2, #0
 80066be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066c2:	4810      	ldr	r0, [pc, #64]	; (8006704 <motors_set_both_pwm+0x80>)
 80066c4:	f7fc f8a4 	bl	8002810 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
 80066c8:	4b0f      	ldr	r3, [pc, #60]	; (8006708 <motors_set_both_pwm+0x84>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	635d      	str	r5, [r3, #52]	; 0x34
	if ( (pwm<0) && (pwm>=-100) )
 80066ce:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b63      	cmp	r3, #99	; 0x63
 80066d6:	d8e4      	bhi.n	80066a2 <motors_set_both_pwm+0x1e>
		HAL_GPIO_WritePin(MOT_R_DIR_GPIO_Port, MOT_R_DIR_Pin, GPIO_PIN_RESET);
 80066d8:	2200      	movs	r2, #0
 80066da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066de:	4809      	ldr	r0, [pc, #36]	; (8006704 <motors_set_both_pwm+0x80>)
 80066e0:	f7fc f896 	bl	8002810 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,-pwm);
 80066e4:	4b08      	ldr	r3, [pc, #32]	; (8006708 <motors_set_both_pwm+0x84>)
 80066e6:	4264      	negs	r4, r4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	639c      	str	r4, [r3, #56]	; 0x38
}
 80066ec:	bd38      	pop	{r3, r4, r5, pc}
		HAL_GPIO_WritePin(MOT_L_DIR_GPIO_Port, MOT_L_DIR_Pin, GPIO_PIN_SET);
 80066ee:	2201      	movs	r2, #1
 80066f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066f4:	4803      	ldr	r0, [pc, #12]	; (8006704 <motors_set_both_pwm+0x80>)
 80066f6:	f7fc f88b 	bl	8002810 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,-pwm);
 80066fa:	4b03      	ldr	r3, [pc, #12]	; (8006708 <motors_set_both_pwm+0x84>)
 80066fc:	426d      	negs	r5, r5
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	635d      	str	r5, [r3, #52]	; 0x34
 8006702:	e7c9      	b.n	8006698 <motors_set_both_pwm+0x14>
 8006704:	40010c00 	.word	0x40010c00
 8006708:	20000590 	.word	0x20000590

0800670c <motors_stop>:
 * (no breaking, just setting pwm to zero)
 *
 *
 */
void motors_stop()
{
 800670c:	b570      	push	{r4, r5, r6, lr}
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
 800670e:	2400      	movs	r4, #0
		HAL_GPIO_WritePin(MOT_L_DIR_GPIO_Port, MOT_L_DIR_Pin, GPIO_PIN_RESET);
 8006710:	4e09      	ldr	r6, [pc, #36]	; (8006738 <motors_stop+0x2c>)
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
 8006712:	4d0a      	ldr	r5, [pc, #40]	; (800673c <motors_stop+0x30>)
		HAL_GPIO_WritePin(MOT_L_DIR_GPIO_Port, MOT_L_DIR_Pin, GPIO_PIN_RESET);
 8006714:	4622      	mov	r2, r4
 8006716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800671a:	4630      	mov	r0, r6
 800671c:	f7fc f878 	bl	8002810 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
 8006720:	682b      	ldr	r3, [r5, #0]
		HAL_GPIO_WritePin(MOT_R_DIR_GPIO_Port, MOT_R_DIR_Pin, GPIO_PIN_SET);
 8006722:	2201      	movs	r2, #1
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pwm);
 8006724:	635c      	str	r4, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(MOT_R_DIR_GPIO_Port, MOT_R_DIR_Pin, GPIO_PIN_SET);
 8006726:	4630      	mov	r0, r6
 8006728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800672c:	f7fc f870 	bl	8002810 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,pwm);
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	639c      	str	r4, [r3, #56]	; 0x38
	motors_set_left_pwm(0);
	motors_set_right_pwm(0);
}
 8006734:	bd70      	pop	{r4, r5, r6, pc}
 8006736:	bf00      	nop
 8006738:	40010c00 	.word	0x40010c00
 800673c:	20000590 	.word	0x20000590

08006740 <forward>:
int16_t right=40;
int16_t start=40;

//**************************************
void forward(int32_t mm)
{
 8006740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int32_t now;
	now = motors_encoder_left();
	while(motors_encoder_left()<((mm*2.67)+now))
 8006744:	f20f 09d0 	addw	r9, pc, #208	; 0xd0
 8006748:	e9d9 8900 	ldrd	r8, r9, [r9]
{
 800674c:	b083      	sub	sp, #12
 800674e:	9001      	str	r0, [sp, #4]
	now = motors_encoder_left();
 8006750:	f7ff ff44 	bl	80065dc <motors_encoder_left>
	{
	motors_set_both_pwm(left,right);
 8006754:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8006820 <forward+0xe0>
 8006758:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006824 <forward+0xe4>
	now = motors_encoder_left();
 800675c:	9000      	str	r0, [sp, #0]
	while(motors_encoder_left()<((mm*2.67)+now))
 800675e:	e00b      	b.n	8006778 <forward+0x38>
	if (motors_encoder_left()>motors_encoder_right())
	{
		left -=1;
 8006760:	f8ba 0000 	ldrh.w	r0, [sl]
		right=start;
 8006764:	f9b3 1000 	ldrsh.w	r1, [r3]
		left -=1;
 8006768:	3801      	subs	r0, #1
 800676a:	b200      	sxth	r0, r0
 800676c:	f8aa 0000 	strh.w	r0, [sl]
		right=start;
 8006770:	f8ab 1000 	strh.w	r1, [fp]
	else
	{
		right -=1;
		left = start;
	}
	motors_set_both_pwm(left,right);
 8006774:	f7ff ff86 	bl	8006684 <motors_set_both_pwm>
	while(motors_encoder_left()<((mm*2.67)+now))
 8006778:	f7ff ff30 	bl	80065dc <motors_encoder_left>
 800677c:	f7f9 fef6 	bl	800056c <__aeabi_i2d>
 8006780:	4604      	mov	r4, r0
 8006782:	9801      	ldr	r0, [sp, #4]
 8006784:	460d      	mov	r5, r1
 8006786:	f7f9 fef1 	bl	800056c <__aeabi_i2d>
 800678a:	4642      	mov	r2, r8
 800678c:	464b      	mov	r3, r9
 800678e:	f7f9 ff57 	bl	8000640 <__aeabi_dmul>
 8006792:	4606      	mov	r6, r0
 8006794:	9800      	ldr	r0, [sp, #0]
 8006796:	460f      	mov	r7, r1
 8006798:	f7f9 fee8 	bl	800056c <__aeabi_i2d>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	4630      	mov	r0, r6
 80067a2:	4639      	mov	r1, r7
 80067a4:	f7f9 fd96 	bl	80002d4 <__adddf3>
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	4620      	mov	r0, r4
 80067ae:	4629      	mov	r1, r5
 80067b0:	f7fa f9b8 	bl	8000b24 <__aeabi_dcmplt>
 80067b4:	4601      	mov	r1, r0
 80067b6:	b300      	cbz	r0, 80067fa <forward+0xba>
	motors_set_both_pwm(left,right);
 80067b8:	f9bb 1000 	ldrsh.w	r1, [fp]
 80067bc:	f9ba 0000 	ldrsh.w	r0, [sl]
 80067c0:	f7ff ff60 	bl	8006684 <motors_set_both_pwm>
	if (motors_encoder_left()>motors_encoder_right())
 80067c4:	f7ff ff0a 	bl	80065dc <motors_encoder_left>
 80067c8:	4604      	mov	r4, r0
 80067ca:	f7ff ff0d 	bl	80065e8 <motors_encoder_right>
 80067ce:	4284      	cmp	r4, r0
		right=start;
 80067d0:	4b15      	ldr	r3, [pc, #84]	; (8006828 <forward+0xe8>)
	if (motors_encoder_left()>motors_encoder_right())
 80067d2:	dcc5      	bgt.n	8006760 <forward+0x20>
	else if (motors_encoder_left()==motors_encoder_right())
 80067d4:	f7ff ff02 	bl	80065dc <motors_encoder_left>
 80067d8:	4604      	mov	r4, r0
 80067da:	f7ff ff05 	bl	80065e8 <motors_encoder_right>
 80067de:	4284      	cmp	r4, r0
		left = start;
 80067e0:	4b11      	ldr	r3, [pc, #68]	; (8006828 <forward+0xe8>)
	else if (motors_encoder_left()==motors_encoder_right())
 80067e2:	d00f      	beq.n	8006804 <forward+0xc4>
		right -=1;
 80067e4:	f8bb 1000 	ldrh.w	r1, [fp]
		left = start;
 80067e8:	f9b3 0000 	ldrsh.w	r0, [r3]
		right -=1;
 80067ec:	3901      	subs	r1, #1
 80067ee:	b209      	sxth	r1, r1
 80067f0:	f8ab 1000 	strh.w	r1, [fp]
		left = start;
 80067f4:	f8aa 0000 	strh.w	r0, [sl]
 80067f8:	e7bc      	b.n	8006774 <forward+0x34>
	//HAL_Delay(5);
	}

	motors_set_both_pwm(0,0);
	return;
}
 80067fa:	b003      	add	sp, #12
 80067fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	motors_set_both_pwm(0,0);
 8006800:	f7ff bf40 	b.w	8006684 <motors_set_both_pwm>
		right =start;
 8006804:	f9b3 0000 	ldrsh.w	r0, [r3]
 8006808:	4601      	mov	r1, r0
 800680a:	f8ab 0000 	strh.w	r0, [fp]
		left = start;
 800680e:	f8aa 0000 	strh.w	r0, [sl]
 8006812:	e7af      	b.n	8006774 <forward+0x34>
 8006814:	f3af 8000 	nop.w
 8006818:	f5c28f5c 	.word	0xf5c28f5c
 800681c:	40055c28 	.word	0x40055c28
 8006820:	2000041a 	.word	0x2000041a
 8006824:	20000418 	.word	0x20000418
 8006828:	2000041c 	.word	0x2000041c

0800682c <SysTick_Handler>:
void motors_encoder_callback();		// see zumolib/src/zumo/motors.c


// SysTick Timer; this is called every 1 ms
void SysTick_Handler(void)
{
 800682c:	b508      	push	{r3, lr}
	static int mscnt=0;

	// Must be called, otherwise HAL_Delay() fails
	HAL_IncTick();
 800682e:	f7fb fd7b 	bl	8002328 <HAL_IncTick>

	mscnt++;
 8006832:	4a06      	ldr	r2, [pc, #24]	; (800684c <SysTick_Handler+0x20>)
 8006834:	6813      	ldr	r3, [r2, #0]
	if (mscnt==10)	// Backup/Calculate Encoder values every 10 ms to handle over-/underflows
 8006836:	2b09      	cmp	r3, #9
 8006838:	d002      	beq.n	8006840 <SysTick_Handler+0x14>
 800683a:	1c59      	adds	r1, r3, #1
	mscnt++;
 800683c:	6011      	str	r1, [r2, #0]
	{
		mscnt=0;
		motors_encoder_callback();
	}
}
 800683e:	bd08      	pop	{r3, pc}
		mscnt=0;
 8006840:	2300      	movs	r3, #0
 8006842:	6013      	str	r3, [r2, #0]
}
 8006844:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		motors_encoder_callback();
 8006848:	f7ff be78 	b.w	800653c <motors_encoder_callback>
 800684c:	20000b90 	.word	0x20000b90

08006850 <uart_init>:
  return ch;
}

void uart_init()
{
	tx_i  = 0;
 8006850:	2300      	movs	r3, #0
	rx_e  = 0;
	rx2_e = 0;
	tx_busy = 0;
	tx2_busy = 0;
	tx_cnt = 0;
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8006852:	4910      	ldr	r1, [pc, #64]	; (8006894 <uart_init+0x44>)
{
 8006854:	b430      	push	{r4, r5}
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8006856:	6808      	ldr	r0, [r1, #0]
	rx_i  = 0;
 8006858:	4d0f      	ldr	r5, [pc, #60]	; (8006898 <uart_init+0x48>)
	rx2_i = 0;
 800685a:	4a10      	ldr	r2, [pc, #64]	; (800689c <uart_init+0x4c>)
	tx_i  = 0;
 800685c:	4910      	ldr	r1, [pc, #64]	; (80068a0 <uart_init+0x50>)
	rx_i  = 0;
 800685e:	802b      	strh	r3, [r5, #0]
	tx_i  = 0;
 8006860:	800b      	strh	r3, [r1, #0]
	rx2_i = 0;
 8006862:	8013      	strh	r3, [r2, #0]
	tx_busy = 0;
 8006864:	4c0f      	ldr	r4, [pc, #60]	; (80068a4 <uart_init+0x54>)
	tx2_busy = 0;
 8006866:	4910      	ldr	r1, [pc, #64]	; (80068a8 <uart_init+0x58>)
	tx_cnt = 0;
 8006868:	4a10      	ldr	r2, [pc, #64]	; (80068ac <uart_init+0x5c>)
	tx_busy = 0;
 800686a:	7023      	strb	r3, [r4, #0]
	tx2_busy = 0;
 800686c:	700b      	strb	r3, [r1, #0]
	tx_cnt = 0;
 800686e:	7013      	strb	r3, [r2, #0]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8006870:	68c2      	ldr	r2, [r0, #12]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8006872:	490f      	ldr	r1, [pc, #60]	; (80068b0 <uart_init+0x60>)
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8006874:	f042 0220 	orr.w	r2, r2, #32
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8006878:	6809      	ldr	r1, [r1, #0]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800687a:	60c2      	str	r2, [r0, #12]
	rx_e  = 0;
 800687c:	480d      	ldr	r0, [pc, #52]	; (80068b4 <uart_init+0x64>)
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800687e:	68ca      	ldr	r2, [r1, #12]
	tx2_i = 0;
 8006880:	4c0d      	ldr	r4, [pc, #52]	; (80068b8 <uart_init+0x68>)
	rx_e  = 0;
 8006882:	8003      	strh	r3, [r0, #0]
	rx2_e = 0;
 8006884:	480d      	ldr	r0, [pc, #52]	; (80068bc <uart_init+0x6c>)
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8006886:	f042 0220 	orr.w	r2, r2, #32
	tx2_i = 0;
 800688a:	8023      	strh	r3, [r4, #0]
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800688c:	60ca      	str	r2, [r1, #12]
	rx2_e = 0;
 800688e:	8003      	strh	r3, [r0, #0]
	//printf("UART init done");
}
 8006890:	bc30      	pop	{r4, r5}
 8006892:	4770      	bx	lr
 8006894:	20000650 	.word	0x20000650
 8006898:	20000c9a 	.word	0x20000c9a
 800689c:	20000c16 	.word	0x20000c16
 80068a0:	20000da6 	.word	0x20000da6
 80068a4:	20000da4 	.word	0x20000da4
 80068a8:	20000d1c 	.word	0x20000d1c
 80068ac:	20000da5 	.word	0x20000da5
 80068b0:	20000690 	.word	0x20000690
 80068b4:	20000c98 	.word	0x20000c98
 80068b8:	20000d1e 	.word	0x20000d1e
 80068bc:	20000c14 	.word	0x20000c14

080068c0 <uart_putc>:

void uart_putc(uint8_t byte)
{
 80068c0:	b430      	push	{r4, r5}
 80068c2:	4a0e      	ldr	r2, [pc, #56]	; (80068fc <uart_putc+0x3c>)

	// Wait until buffer has free space
	while (tx_cnt > (TXBUF_LEN-1));
 80068c4:	7813      	ldrb	r3, [r2, #0]
 80068c6:	061b      	lsls	r3, r3, #24
 80068c8:	d4fc      	bmi.n	80068c4 <uart_putc+0x4>

    tx_buf[TXBUF_MSK & tx_i] = byte;
    tx_i++;
    tx_cnt++;
    tx_busy = 1;
 80068ca:	f04f 0c01 	mov.w	ip, #1
    tx_cnt++;
 80068ce:	7813      	ldrb	r3, [r2, #0]
    tx_buf[TXBUF_MSK & tx_i] = byte;
 80068d0:	4c0b      	ldr	r4, [pc, #44]	; (8006900 <uart_putc+0x40>)
    tx_cnt++;
 80068d2:	4463      	add	r3, ip
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	7013      	strb	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 80068d8:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <uart_putc+0x44>)
    tx_buf[TXBUF_MSK & tx_i] = byte;
 80068da:	8821      	ldrh	r1, [r4, #0]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 80068dc:	681a      	ldr	r2, [r3, #0]
    tx_busy = 1;
 80068de:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <uart_putc+0x48>)
    tx_buf[TXBUF_MSK & tx_i] = byte;
 80068e0:	4d0a      	ldr	r5, [pc, #40]	; (800690c <uart_putc+0x4c>)
    tx_busy = 1;
 80068e2:	f883 c000 	strb.w	ip, [r3]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE);
 80068e6:	68d3      	ldr	r3, [r2, #12]
 80068e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ec:	60d3      	str	r3, [r2, #12]
    tx_buf[TXBUF_MSK & tx_i] = byte;
 80068ee:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    tx_i++;
 80068f2:	4461      	add	r1, ip
    tx_buf[TXBUF_MSK & tx_i] = byte;
 80068f4:	54e8      	strb	r0, [r5, r3]
    tx_i++;
 80068f6:	8021      	strh	r1, [r4, #0]
}
 80068f8:	bc30      	pop	{r4, r5}
 80068fa:	4770      	bx	lr
 80068fc:	20000da5 	.word	0x20000da5
 8006900:	20000da6 	.word	0x20000da6
 8006904:	20000650 	.word	0x20000650
 8006908:	20000da4 	.word	0x20000da4
 800690c:	20000d24 	.word	0x20000d24

08006910 <__io_putchar>:
{
 8006910:	b510      	push	{r4, lr}
 8006912:	4604      	mov	r4, r0
  uart_putc(ch);
 8006914:	b2c0      	uxtb	r0, r0
 8006916:	f7ff ffd3 	bl	80068c0 <uart_putc>
}
 800691a:	4620      	mov	r0, r4
 800691c:	bd10      	pop	{r4, pc}
 800691e:	bf00      	nop

08006920 <uart2_putc>:
void uart2_putc(uint8_t byte)
{

    tx2_buf[TXBUF_MSK & tx2_i] = byte;
    tx2_i++;
    tx2_busy = 1;
 8006920:	f04f 0c01 	mov.w	ip, #1
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 8006924:	4b09      	ldr	r3, [pc, #36]	; (800694c <uart2_putc+0x2c>)
    tx2_busy = 1;
 8006926:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <uart2_putc+0x30>)
{
 8006928:	b430      	push	{r4, r5}
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 800692a:	681c      	ldr	r4, [r3, #0]
    tx2_busy = 1;
 800692c:	f882 c000 	strb.w	ip, [r2]
    tx2_buf[TXBUF_MSK & tx2_i] = byte;
 8006930:	4908      	ldr	r1, [pc, #32]	; (8006954 <uart2_putc+0x34>)
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 8006932:	68e2      	ldr	r2, [r4, #12]
    tx2_buf[TXBUF_MSK & tx2_i] = byte;
 8006934:	880b      	ldrh	r3, [r1, #0]
 8006936:	4d08      	ldr	r5, [pc, #32]	; (8006958 <uart2_putc+0x38>)
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 8006938:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800693c:	60e2      	str	r2, [r4, #12]
    tx2_buf[TXBUF_MSK & tx2_i] = byte;
 800693e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    tx2_i++;
 8006942:	4463      	add	r3, ip
    tx2_buf[TXBUF_MSK & tx2_i] = byte;
 8006944:	54a8      	strb	r0, [r5, r2]
    tx2_i++;
 8006946:	800b      	strh	r3, [r1, #0]
}
 8006948:	bc30      	pop	{r4, r5}
 800694a:	4770      	bx	lr
 800694c:	20000690 	.word	0x20000690
 8006950:	20000d1c 	.word	0x20000d1c
 8006954:	20000d1e 	.word	0x20000d1e
 8006958:	20000c9c 	.word	0x20000c9c

0800695c <uart2_tx_done>:

uint8_t uart2_tx_done()
{
	return (tx2_busy == 0);
 800695c:	4b02      	ldr	r3, [pc, #8]	; (8006968 <uart2_tx_done+0xc>)
 800695e:	7818      	ldrb	r0, [r3, #0]
}
 8006960:	fab0 f080 	clz	r0, r0
 8006964:	0940      	lsrs	r0, r0, #5
 8006966:	4770      	bx	lr
 8006968:	20000d1c 	.word	0x20000d1c

0800696c <uart2_getc>:
uint8_t uart2_getc()
{
	uint8_t c;
	if (rx2_i == rx2_e)  // No chars received
 800696c:	4b07      	ldr	r3, [pc, #28]	; (800698c <uart2_getc+0x20>)
 800696e:	4908      	ldr	r1, [pc, #32]	; (8006990 <uart2_getc+0x24>)
 8006970:	881a      	ldrh	r2, [r3, #0]
 8006972:	880b      	ldrh	r3, [r1, #0]
 8006974:	b292      	uxth	r2, r2
 8006976:	429a      	cmp	r2, r3
 8006978:	d006      	beq.n	8006988 <uart2_getc+0x1c>
	{
		c = UART_EMPTY;
	}
	else		// There are chars in ringbuffer
	{
		c = rx2_buf[RXBUF_MSK & rx2_e];
 800697a:	4806      	ldr	r0, [pc, #24]	; (8006994 <uart2_getc+0x28>)
 800697c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		rx2_e++;
 8006980:	3301      	adds	r3, #1
		c = rx2_buf[RXBUF_MSK & rx2_e];
 8006982:	5c80      	ldrb	r0, [r0, r2]
		rx2_e++;
 8006984:	800b      	strh	r3, [r1, #0]
 8006986:	4770      	bx	lr
		c = UART_EMPTY;
 8006988:	2000      	movs	r0, #0
	}
	return c;
}
 800698a:	4770      	bx	lr
 800698c:	20000c16 	.word	0x20000c16
 8006990:	20000c14 	.word	0x20000c14
 8006994:	20000b94 	.word	0x20000b94

08006998 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
    /* USER CODE BEGIN USART1_IRQn 0 */
    if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) != RESET) &&
 8006998:	4b2a      	ldr	r3, [pc, #168]	; (8006a44 <USART1_IRQHandler+0xac>)
{
 800699a:	b430      	push	{r4, r5}
    if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) != RESET) &&
 800699c:	681b      	ldr	r3, [r3, #0]
{
 800699e:	b082      	sub	sp, #8
    if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) != RESET) &&
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	0692      	lsls	r2, r2, #26
 80069a4:	d502      	bpl.n	80069ac <USART1_IRQHandler+0x14>
       (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE) != RESET))
 80069a6:	68da      	ldr	r2, [r3, #12]
    if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) != RESET) &&
 80069a8:	0695      	lsls	r5, r2, #26
 80069aa:	d42c      	bmi.n	8006a06 <USART1_IRQHandler+0x6e>
        rx_i++;
        /* Clear RXNE interrupt flag */
        //__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
        __HAL_UART_CLEAR_NEFLAG(&huart1);
    }
    if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) != RESET) &&
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	0614      	lsls	r4, r2, #24
 80069b0:	d502      	bpl.n	80069b8 <USART1_IRQHandler+0x20>
       (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_TXE) != RESET))
 80069b2:	68da      	ldr	r2, [r3, #12]
    if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE) != RESET) &&
 80069b4:	0610      	lsls	r0, r2, #24
 80069b6:	d40f      	bmi.n	80069d8 <USART1_IRQHandler+0x40>
            huart1.Instance->DR = (uint8_t)(tx_buf[TXBUF_MSK & tx_o] & (uint8_t)0xFF);
            tx_o++;
            tx_cnt--;
        }
    }
    if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) != RESET) &&
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	0651      	lsls	r1, r2, #25
 80069bc:	d509      	bpl.n	80069d2 <USART1_IRQHandler+0x3a>
       (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_TC) != RESET))
 80069be:	68da      	ldr	r2, [r3, #12]
    if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC) != RESET) &&
 80069c0:	0652      	lsls	r2, r2, #25
 80069c2:	d506      	bpl.n	80069d2 <USART1_IRQHandler+0x3a>
    {
        tx_busy = 0;
 80069c4:	2100      	movs	r1, #0
 80069c6:	4a20      	ldr	r2, [pc, #128]	; (8006a48 <USART1_IRQHandler+0xb0>)
 80069c8:	7011      	strb	r1, [r2, #0]
        __HAL_UART_DISABLE_IT(&huart1, UART_IT_TC);
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069d0:	60da      	str	r2, [r3, #12]

    HAL_UART_IRQHandler(&huart1);

    /* USER CODE BEGIN USART1_IRQn 1 */
    /* USER CODE END USART1_IRQn 1 */
}
 80069d2:	b002      	add	sp, #8
 80069d4:	bc30      	pop	{r4, r5}
 80069d6:	4770      	bx	lr
        if (tx_i == tx_o) {
 80069d8:	491c      	ldr	r1, [pc, #112]	; (8006a4c <USART1_IRQHandler+0xb4>)
 80069da:	481d      	ldr	r0, [pc, #116]	; (8006a50 <USART1_IRQHandler+0xb8>)
 80069dc:	880a      	ldrh	r2, [r1, #0]
 80069de:	8800      	ldrh	r0, [r0, #0]
 80069e0:	b292      	uxth	r2, r2
 80069e2:	4290      	cmp	r0, r2
 80069e4:	d022      	beq.n	8006a2c <USART1_IRQHandler+0x94>
            huart1.Instance->DR = (uint8_t)(tx_buf[TXBUF_MSK & tx_o] & (uint8_t)0xFF);
 80069e6:	880a      	ldrh	r2, [r1, #0]
 80069e8:	481a      	ldr	r0, [pc, #104]	; (8006a54 <USART1_IRQHandler+0xbc>)
 80069ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80069ee:	5c82      	ldrb	r2, [r0, r2]
            tx_cnt--;
 80069f0:	4819      	ldr	r0, [pc, #100]	; (8006a58 <USART1_IRQHandler+0xc0>)
            huart1.Instance->DR = (uint8_t)(tx_buf[TXBUF_MSK & tx_o] & (uint8_t)0xFF);
 80069f2:	605a      	str	r2, [r3, #4]
            tx_o++;
 80069f4:	880a      	ldrh	r2, [r1, #0]
 80069f6:	3201      	adds	r2, #1
 80069f8:	b292      	uxth	r2, r2
 80069fa:	800a      	strh	r2, [r1, #0]
            tx_cnt--;
 80069fc:	7802      	ldrb	r2, [r0, #0]
 80069fe:	3a01      	subs	r2, #1
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	7002      	strb	r2, [r0, #0]
 8006a04:	e7d8      	b.n	80069b8 <USART1_IRQHandler+0x20>
        __HAL_UART_CLEAR_NEFLAG(&huart1);
 8006a06:	2400      	movs	r4, #0
        rx_buf[rx_i & RXBUF_MSK] = (uint8_t)(huart1.Instance->DR & 0x00FF);
 8006a08:	4814      	ldr	r0, [pc, #80]	; (8006a5c <USART1_IRQHandler+0xc4>)
 8006a0a:	685d      	ldr	r5, [r3, #4]
 8006a0c:	8801      	ldrh	r1, [r0, #0]
        rx_i++;
 8006a0e:	8802      	ldrh	r2, [r0, #0]
        rx_buf[rx_i & RXBUF_MSK] = (uint8_t)(huart1.Instance->DR & 0x00FF);
 8006a10:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        rx_i++;
 8006a14:	3201      	adds	r2, #1
 8006a16:	b292      	uxth	r2, r2
 8006a18:	8002      	strh	r2, [r0, #0]
        rx_buf[rx_i & RXBUF_MSK] = (uint8_t)(huart1.Instance->DR & 0x00FF);
 8006a1a:	4a11      	ldr	r2, [pc, #68]	; (8006a60 <USART1_IRQHandler+0xc8>)
        __HAL_UART_CLEAR_NEFLAG(&huart1);
 8006a1c:	9401      	str	r4, [sp, #4]
        rx_buf[rx_i & RXBUF_MSK] = (uint8_t)(huart1.Instance->DR & 0x00FF);
 8006a1e:	5455      	strb	r5, [r2, r1]
        __HAL_UART_CLEAR_NEFLAG(&huart1);
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	9201      	str	r2, [sp, #4]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	9201      	str	r2, [sp, #4]
 8006a28:	9a01      	ldr	r2, [sp, #4]
 8006a2a:	e7bf      	b.n	80069ac <USART1_IRQHandler+0x14>
            tx_cnt = 0;
 8006a2c:	2000      	movs	r0, #0
            __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8006a2e:	68da      	ldr	r2, [r3, #12]
            tx_cnt = 0;
 8006a30:	4909      	ldr	r1, [pc, #36]	; (8006a58 <USART1_IRQHandler+0xc0>)
            __HAL_UART_DISABLE_IT(&huart1, UART_IT_TXE);
 8006a32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a36:	60da      	str	r2, [r3, #12]
            __HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a3e:	60da      	str	r2, [r3, #12]
            tx_cnt = 0;
 8006a40:	7008      	strb	r0, [r1, #0]
 8006a42:	e7b9      	b.n	80069b8 <USART1_IRQHandler+0x20>
 8006a44:	20000650 	.word	0x20000650
 8006a48:	20000da4 	.word	0x20000da4
 8006a4c:	20000da8 	.word	0x20000da8
 8006a50:	20000da6 	.word	0x20000da6
 8006a54:	20000d24 	.word	0x20000d24
 8006a58:	20000da5 	.word	0x20000da5
 8006a5c:	20000c9a 	.word	0x20000c9a
 8006a60:	20000c18 	.word	0x20000c18

08006a64 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
    /* USER CODE BEGIN USART2_IRQn 0 */
    if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) != RESET) &&
 8006a64:	4b26      	ldr	r3, [pc, #152]	; (8006b00 <USART2_IRQHandler+0x9c>)
{
 8006a66:	b430      	push	{r4, r5}
    if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) != RESET) &&
 8006a68:	681b      	ldr	r3, [r3, #0]
{
 8006a6a:	b082      	sub	sp, #8
    if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) != RESET) &&
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	0692      	lsls	r2, r2, #26
 8006a70:	d502      	bpl.n	8006a78 <USART2_IRQHandler+0x14>
       (__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE) != RESET))
 8006a72:	68da      	ldr	r2, [r3, #12]
    if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) != RESET) &&
 8006a74:	0695      	lsls	r5, r2, #26
 8006a76:	d427      	bmi.n	8006ac8 <USART2_IRQHandler+0x64>
        rx2_i++;
        /* Clear RXNE interrupt flag */
        //__HAL_UART_SEND_REQ(&huart1, UART_RXDATA_FLUSH_REQUEST);
        __HAL_UART_CLEAR_NEFLAG(&huart2);
    }
    if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) &&
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	0614      	lsls	r4, r2, #24
 8006a7c:	d502      	bpl.n	8006a84 <USART2_IRQHandler+0x20>
       (__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_TXE) != RESET))
 8006a7e:	68da      	ldr	r2, [r3, #12]
    if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) &&
 8006a80:	0610      	lsls	r0, r2, #24
 8006a82:	d40f      	bmi.n	8006aa4 <USART2_IRQHandler+0x40>
        } else {
            huart2.Instance->DR = (uint8_t)(tx2_buf[TXBUF_MSK & tx2_o] & (uint8_t)0xFF);
            tx2_o++;
        }
    }
    if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TC) != RESET) &&
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	0651      	lsls	r1, r2, #25
 8006a88:	d509      	bpl.n	8006a9e <USART2_IRQHandler+0x3a>
       (__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_TC) != RESET))
 8006a8a:	68da      	ldr	r2, [r3, #12]
    if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TC) != RESET) &&
 8006a8c:	0652      	lsls	r2, r2, #25
 8006a8e:	d506      	bpl.n	8006a9e <USART2_IRQHandler+0x3a>
    {
        tx2_busy = 0;
 8006a90:	2100      	movs	r1, #0
 8006a92:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <USART2_IRQHandler+0xa0>)
 8006a94:	7011      	strb	r1, [r2, #0]
        __HAL_UART_DISABLE_IT(&huart2, UART_IT_TC);
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a9c:	60da      	str	r2, [r3, #12]

    HAL_UART_IRQHandler(&huart2);

    /* USER CODE BEGIN USART1_IRQn 1 */
    /* USER CODE END USART1_IRQn 1 */
}
 8006a9e:	b002      	add	sp, #8
 8006aa0:	bc30      	pop	{r4, r5}
 8006aa2:	4770      	bx	lr
        if (tx2_i == tx2_o) {
 8006aa4:	4918      	ldr	r1, [pc, #96]	; (8006b08 <USART2_IRQHandler+0xa4>)
 8006aa6:	4819      	ldr	r0, [pc, #100]	; (8006b0c <USART2_IRQHandler+0xa8>)
 8006aa8:	880a      	ldrh	r2, [r1, #0]
 8006aaa:	8800      	ldrh	r0, [r0, #0]
 8006aac:	b292      	uxth	r2, r2
 8006aae:	4290      	cmp	r0, r2
 8006ab0:	d01d      	beq.n	8006aee <USART2_IRQHandler+0x8a>
            huart2.Instance->DR = (uint8_t)(tx2_buf[TXBUF_MSK & tx2_o] & (uint8_t)0xFF);
 8006ab2:	880a      	ldrh	r2, [r1, #0]
 8006ab4:	4816      	ldr	r0, [pc, #88]	; (8006b10 <USART2_IRQHandler+0xac>)
 8006ab6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006aba:	5c82      	ldrb	r2, [r0, r2]
 8006abc:	605a      	str	r2, [r3, #4]
            tx2_o++;
 8006abe:	880a      	ldrh	r2, [r1, #0]
 8006ac0:	3201      	adds	r2, #1
 8006ac2:	b292      	uxth	r2, r2
 8006ac4:	800a      	strh	r2, [r1, #0]
 8006ac6:	e7dd      	b.n	8006a84 <USART2_IRQHandler+0x20>
        __HAL_UART_CLEAR_NEFLAG(&huart2);
 8006ac8:	2400      	movs	r4, #0
        rx2_buf[rx2_i & RXBUF_MSK] = (uint8_t)(huart2.Instance->DR & 0x00FF);
 8006aca:	4812      	ldr	r0, [pc, #72]	; (8006b14 <USART2_IRQHandler+0xb0>)
 8006acc:	685d      	ldr	r5, [r3, #4]
 8006ace:	8801      	ldrh	r1, [r0, #0]
        rx2_i++;
 8006ad0:	8802      	ldrh	r2, [r0, #0]
        rx2_buf[rx2_i & RXBUF_MSK] = (uint8_t)(huart2.Instance->DR & 0x00FF);
 8006ad2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        rx2_i++;
 8006ad6:	3201      	adds	r2, #1
 8006ad8:	b292      	uxth	r2, r2
 8006ada:	8002      	strh	r2, [r0, #0]
        rx2_buf[rx2_i & RXBUF_MSK] = (uint8_t)(huart2.Instance->DR & 0x00FF);
 8006adc:	4a0e      	ldr	r2, [pc, #56]	; (8006b18 <USART2_IRQHandler+0xb4>)
        __HAL_UART_CLEAR_NEFLAG(&huart2);
 8006ade:	9401      	str	r4, [sp, #4]
        rx2_buf[rx2_i & RXBUF_MSK] = (uint8_t)(huart2.Instance->DR & 0x00FF);
 8006ae0:	5455      	strb	r5, [r2, r1]
        __HAL_UART_CLEAR_NEFLAG(&huart2);
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	9201      	str	r2, [sp, #4]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	9201      	str	r2, [sp, #4]
 8006aea:	9a01      	ldr	r2, [sp, #4]
 8006aec:	e7c4      	b.n	8006a78 <USART2_IRQHandler+0x14>
            __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006af4:	60da      	str	r2, [r3, #12]
            __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006afc:	60da      	str	r2, [r3, #12]
 8006afe:	e7c1      	b.n	8006a84 <USART2_IRQHandler+0x20>
 8006b00:	20000690 	.word	0x20000690
 8006b04:	20000d1c 	.word	0x20000d1c
 8006b08:	20000d20 	.word	0x20000d20
 8006b0c:	20000d1e 	.word	0x20000d1e
 8006b10:	20000c9c 	.word	0x20000c9c
 8006b14:	20000c16 	.word	0x20000c16
 8006b18:	20000b94 	.word	0x20000b94

08006b1c <uart2_baudrate>:

void uart2_baudrate(uint32_t br)
{
 8006b1c:	b508      	push	{r3, lr}
 8006b1e:	4603      	mov	r3, r0
	huart2.Init.BaudRate=br;
 8006b20:	4804      	ldr	r0, [pc, #16]	; (8006b34 <uart2_baudrate+0x18>)
 8006b22:	6043      	str	r3, [r0, #4]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8006b24:	f7fd fe32 	bl	800478c <HAL_UART_Init>
 8006b28:	b900      	cbnz	r0, 8006b2c <uart2_baudrate+0x10>
	  {
	    Error_Handler();
	  }
}
 8006b2a:	bd08      	pop	{r3, pc}
 8006b2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    Error_Handler();
 8006b30:	f7fa baba 	b.w	80010a8 <Error_Handler>
 8006b34:	20000690 	.word	0x20000690

08006b38 <VL53L0X_setAddress>:


// Public Methods //////////////////////////////////////////////////////////////

void VL53L0X_setAddress(uint8_t new_addr)
{
 8006b38:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_address = ADDRESS_DEFAULT;
 8006b3a:	2329      	movs	r3, #41	; 0x29
 8006b3c:	4d07      	ldr	r5, [pc, #28]	; (8006b5c <VL53L0X_setAddress+0x24>)
{
 8006b3e:	4604      	mov	r4, r0
	VL53L0X_address = ADDRESS_DEFAULT;
 8006b40:	602b      	str	r3, [r5, #0]
	//printf("Address: %i\r\n",VL53L0X_address);
	if (!VL53L0X_pingAddress(new_addr))
 8006b42:	f000 fca9 	bl	8007498 <VL53L0X_pingAddress>
 8006b46:	b108      	cbz	r0, 8006b4c <VL53L0X_setAddress+0x14>
	{
		VL53L0X_writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
	}
	VL53L0X_address = new_addr;
 8006b48:	602c      	str	r4, [r5, #0]
}
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
		VL53L0X_writeReg(I2C_SLAVE_DEVICE_ADDRESS, new_addr & 0x7F);
 8006b4c:	208a      	movs	r0, #138	; 0x8a
 8006b4e:	f004 017f 	and.w	r1, r4, #127	; 0x7f
 8006b52:	f000 fcaf 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_address = new_addr;
 8006b56:	602c      	str	r4, [r5, #0]
}
 8006b58:	bd38      	pop	{r3, r4, r5, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000dac 	.word	0x20000dac

08006b60 <VL53L0X_setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t VL53L0X_setSignalRateLimit(float limit_Mcps)
{
 8006b60:	b538      	push	{r3, r4, r5, lr}
	if (limit_Mcps < 0.0 || limit_Mcps > 511.99) { return FALSE; }
 8006b62:	2100      	movs	r1, #0
{
 8006b64:	4605      	mov	r5, r0
	if (limit_Mcps < 0.0 || limit_Mcps > 511.99) { return FALSE; }
 8006b66:	f7fa f87b 	bl	8000c60 <__aeabi_fcmplt>
 8006b6a:	b9c8      	cbnz	r0, 8006ba0 <VL53L0X_setSignalRateLimit+0x40>
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f7f9 fd0e 	bl	8000590 <__aeabi_f2d>
 8006b74:	a30c      	add	r3, pc, #48	; (adr r3, 8006ba8 <VL53L0X_setSignalRateLimit+0x48>)
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	f7f9 fff1 	bl	8000b60 <__aeabi_dcmpgt>
 8006b7e:	b108      	cbz	r0, 8006b84 <VL53L0X_setSignalRateLimit+0x24>
 8006b80:	4620      	mov	r0, r4

	// Q9.7 fixed point format (9 integer bits, 7 fractional bits)
	VL53L0X_writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
	return TRUE;
}
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
	VL53L0X_writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8006b84:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f7f9 fae9 	bl	8000160 <__aeabi_fmul>
 8006b8e:	f7fa f88f 	bl	8000cb0 <__aeabi_f2uiz>
 8006b92:	4601      	mov	r1, r0
 8006b94:	2044      	movs	r0, #68	; 0x44
 8006b96:	b289      	uxth	r1, r1
 8006b98:	f000 fcae 	bl	80074f8 <VL53L0X_writeReg16Bit>
 8006b9c:	2001      	movs	r0, #1
}
 8006b9e:	bd38      	pop	{r3, r4, r5, pc}
	if (limit_Mcps < 0.0 || limit_Mcps > 511.99) { return FALSE; }
 8006ba0:	2000      	movs	r0, #0
}
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	f3af 8000 	nop.w
 8006ba8:	0a3d70a4 	.word	0x0a3d70a4
 8006bac:	407fffd7 	.word	0x407fffd7

08006bb0 <VL53L0X_readRangeContinuousMillimeters>:
uint16_t VL53L0X_readRangeContinuousMillimeters(void)
{
	uint16_t range ;
	uint16_t timeout=10;

	startTimeout();
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	4b15      	ldr	r3, [pc, #84]	; (8006c08 <VL53L0X_readRangeContinuousMillimeters+0x58>)
{
 8006bb4:	b510      	push	{r4, lr}
	while ((VL53L0X_readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8006bb6:	240b      	movs	r4, #11
	startTimeout();
 8006bb8:	601a      	str	r2, [r3, #0]
	while ((VL53L0X_readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8006bba:	e002      	b.n	8006bc2 <VL53L0X_readRangeContinuousMillimeters+0x12>
	{
		if (timeout == 0) return 65535;
		timeout--;
		HAL_Delay(2);
 8006bbc:	2002      	movs	r0, #2
 8006bbe:	f7fb fbc5 	bl	800234c <HAL_Delay>
	while ((VL53L0X_readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8006bc2:	2013      	movs	r0, #19
 8006bc4:	f000 fcbe 	bl	8007544 <VL53L0X_readReg>
		if (timeout == 0) return 65535;
 8006bc8:	3c01      	subs	r4, #1
	while ((VL53L0X_readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8006bca:	0743      	lsls	r3, r0, #29
		if (timeout == 0) return 65535;
 8006bcc:	b2a4      	uxth	r4, r4
	while ((VL53L0X_readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8006bce:	d104      	bne.n	8006bda <VL53L0X_readRangeContinuousMillimeters+0x2a>
		if (timeout == 0) return 65535;
 8006bd0:	2c00      	cmp	r4, #0
 8006bd2:	d1f3      	bne.n	8006bbc <VL53L0X_readRangeContinuousMillimeters+0xc>
 8006bd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    if (VL53L0X_timeoutOccurred()) {
        range = 999;
    }

	return range;
}
 8006bd8:	bd10      	pop	{r4, pc}
	range = VL53L0X_readReg16Bit(RESULT_RANGE_STATUS + 10);
 8006bda:	201e      	movs	r0, #30
 8006bdc:	f000 fcd2 	bl	8007584 <VL53L0X_readReg16Bit>
	VL53L0X_writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8006be0:	2101      	movs	r1, #1
	range = VL53L0X_readReg16Bit(RESULT_RANGE_STATUS + 10);
 8006be2:	4604      	mov	r4, r0
	VL53L0X_writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8006be4:	200b      	movs	r0, #11
 8006be6:	f000 fc65 	bl	80074b4 <VL53L0X_writeReg>
// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
uint8_t VL53L0X_timeoutOccurred()
{
  uint8_t tmp = did_timeout;
  did_timeout = FALSE;
 8006bea:	2100      	movs	r1, #0
  uint8_t tmp = did_timeout;
 8006bec:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <VL53L0X_readRangeContinuousMillimeters+0x5c>)
        range = 999;
 8006bee:	f240 30e7 	movw	r0, #999	; 0x3e7
  uint8_t tmp = did_timeout;
 8006bf2:	781a      	ldrb	r2, [r3, #0]
  did_timeout = FALSE;
 8006bf4:	7019      	strb	r1, [r3, #0]
    if (VL53L0X_timeoutOccurred()) {
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	d1ee      	bne.n	8006bd8 <VL53L0X_readRangeContinuousMillimeters+0x28>
 8006bfa:	4284      	cmp	r4, r0
 8006bfc:	4623      	mov	r3, r4
 8006bfe:	bf28      	it	cs
 8006c00:	4603      	movcs	r3, r0
 8006c02:	b298      	uxth	r0, r3
}
 8006c04:	bd10      	pop	{r4, pc}
 8006c06:	bf00      	nop
 8006c08:	20000dbc 	.word	0x20000dbc
 8006c0c:	20000db0 	.word	0x20000db0

08006c10 <VL53L0Xm_readRangeContinuousMillimeters>:
	VL53L0X_address = addr;
 8006c10:	4b01      	ldr	r3, [pc, #4]	; (8006c18 <VL53L0Xm_readRangeContinuousMillimeters+0x8>)
 8006c12:	6018      	str	r0, [r3, #0]
	return VL53L0X_readRangeContinuousMillimeters();
 8006c14:	f7ff bfcc 	b.w	8006bb0 <VL53L0X_readRangeContinuousMillimeters>
 8006c18:	20000dac 	.word	0x20000dac

08006c1c <VL53L0X_startSingle>:
{
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	b508      	push	{r3, lr}
	VL53L0X_address = addr;
 8006c20:	4b12      	ldr	r3, [pc, #72]	; (8006c6c <VL53L0X_startSingle+0x50>)
  VL53L0X_writeReg(0x80, 0x01);
 8006c22:	2101      	movs	r1, #1
 8006c24:	2080      	movs	r0, #128	; 0x80
	VL53L0X_address = addr;
 8006c26:	601a      	str	r2, [r3, #0]
  VL53L0X_writeReg(0x80, 0x01);
 8006c28:	f000 fc44 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0xFF, 0x01);
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	20ff      	movs	r0, #255	; 0xff
 8006c30:	f000 fc40 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0x00, 0x00);
 8006c34:	2100      	movs	r1, #0
 8006c36:	4608      	mov	r0, r1
 8006c38:	f000 fc3c 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0x91, stop_variable);
 8006c3c:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <VL53L0X_startSingle+0x54>)
 8006c3e:	2091      	movs	r0, #145	; 0x91
 8006c40:	7819      	ldrb	r1, [r3, #0]
 8006c42:	f000 fc37 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0x00, 0x01);
 8006c46:	2101      	movs	r1, #1
 8006c48:	2000      	movs	r0, #0
 8006c4a:	f000 fc33 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0xFF, 0x00);
 8006c4e:	2100      	movs	r1, #0
 8006c50:	20ff      	movs	r0, #255	; 0xff
 8006c52:	f000 fc2f 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0x80, 0x00);
 8006c56:	2100      	movs	r1, #0
 8006c58:	2080      	movs	r0, #128	; 0x80
 8006c5a:	f000 fc2b 	bl	80074b4 <VL53L0X_writeReg>
}
 8006c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  VL53L0X_writeReg(SYSRANGE_START, 0x01);
 8006c62:	2101      	movs	r1, #1
 8006c64:	2000      	movs	r0, #0
 8006c66:	f000 bc25 	b.w	80074b4 <VL53L0X_writeReg>
 8006c6a:	bf00      	nop
 8006c6c:	20000dac 	.word	0x20000dac
 8006c70:	20000db8 	.word	0x20000db8

08006c74 <VL53L0X_getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
uint8_t VL53L0X_getSpadInfo(uint8_t * count, uint8_t * type_is_aperture)
{
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	4607      	mov	r7, r0
 8006c78:	460e      	mov	r6, r1
  uint8_t tmp;

  VL53L0X_writeReg(0x80, 0x01);
 8006c7a:	2080      	movs	r0, #128	; 0x80
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	f000 fc19 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0xFF, 0x01);
 8006c82:	2101      	movs	r1, #1
 8006c84:	20ff      	movs	r0, #255	; 0xff
 8006c86:	f000 fc15 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0x00, 0x00);
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	f000 fc11 	bl	80074b4 <VL53L0X_writeReg>

  VL53L0X_writeReg(0xFF, 0x06);
 8006c92:	2106      	movs	r1, #6
 8006c94:	20ff      	movs	r0, #255	; 0xff
 8006c96:	f000 fc0d 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0x83, VL53L0X_readReg(0x83) | 0x04);
 8006c9a:	2083      	movs	r0, #131	; 0x83
 8006c9c:	f000 fc52 	bl	8007544 <VL53L0X_readReg>
 8006ca0:	4601      	mov	r1, r0
 8006ca2:	f041 0104 	orr.w	r1, r1, #4
 8006ca6:	b2c9      	uxtb	r1, r1
 8006ca8:	2083      	movs	r0, #131	; 0x83
 8006caa:	f000 fc03 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0xFF, 0x07);
 8006cae:	2107      	movs	r1, #7
 8006cb0:	20ff      	movs	r0, #255	; 0xff
 8006cb2:	f000 fbff 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0x81, 0x01);
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	2081      	movs	r0, #129	; 0x81
 8006cba:	f000 fbfb 	bl	80074b4 <VL53L0X_writeReg>

  VL53L0X_writeReg(0x80, 0x01);
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	2080      	movs	r0, #128	; 0x80
 8006cc2:	f000 fbf7 	bl	80074b4 <VL53L0X_writeReg>

  VL53L0X_writeReg(0x94, 0x6b);
 8006cc6:	216b      	movs	r1, #107	; 0x6b
 8006cc8:	2094      	movs	r0, #148	; 0x94
 8006cca:	f000 fbf3 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0x83, 0x00);
 8006cce:	2100      	movs	r1, #0
 8006cd0:	2083      	movs	r0, #131	; 0x83
 8006cd2:	f000 fbef 	bl	80074b4 <VL53L0X_writeReg>
  startTimeout();
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	4d1d      	ldr	r5, [pc, #116]	; (8006d50 <VL53L0X_getSpadInfo+0xdc>)
  while (VL53L0X_readReg(0x83) == 0x00)
  {
    if (checkTimeoutExpired()) { return FALSE; }
 8006cda:	4c1e      	ldr	r4, [pc, #120]	; (8006d54 <VL53L0X_getSpadInfo+0xe0>)
  startTimeout();
 8006cdc:	602b      	str	r3, [r5, #0]
  while (VL53L0X_readReg(0x83) == 0x00)
 8006cde:	2083      	movs	r0, #131	; 0x83
 8006ce0:	f000 fc30 	bl	8007544 <VL53L0X_readReg>
 8006ce4:	b930      	cbnz	r0, 8006cf4 <VL53L0X_getSpadInfo+0x80>
    if (checkTimeoutExpired()) { return FALSE; }
 8006ce6:	8823      	ldrh	r3, [r4, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0f8      	beq.n	8006cde <VL53L0X_getSpadInfo+0x6a>
 8006cec:	682a      	ldr	r2, [r5, #0]
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d2f5      	bcs.n	8006cde <VL53L0X_getSpadInfo+0x6a>

  VL53L0X_writeReg(0xFF, 0x00);
  VL53L0X_writeReg(0x80, 0x00);

  return TRUE;
}
 8006cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  VL53L0X_writeReg(0x83, 0x01);
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	2083      	movs	r0, #131	; 0x83
 8006cf8:	f000 fbdc 	bl	80074b4 <VL53L0X_writeReg>
  tmp = VL53L0X_readReg(0x92);
 8006cfc:	2092      	movs	r0, #146	; 0x92
 8006cfe:	f000 fc21 	bl	8007544 <VL53L0X_readReg>
 8006d02:	4603      	mov	r3, r0
  *count = tmp & 0x7f;
 8006d04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
  *type_is_aperture = (tmp >> 7) & 0x01;
 8006d08:	09db      	lsrs	r3, r3, #7
  *count = tmp & 0x7f;
 8006d0a:	703a      	strb	r2, [r7, #0]
  VL53L0X_writeReg(0x81, 0x00);
 8006d0c:	2100      	movs	r1, #0
  *type_is_aperture = (tmp >> 7) & 0x01;
 8006d0e:	7033      	strb	r3, [r6, #0]
  VL53L0X_writeReg(0x81, 0x00);
 8006d10:	2081      	movs	r0, #129	; 0x81
 8006d12:	f000 fbcf 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0xFF, 0x06);
 8006d16:	2106      	movs	r1, #6
 8006d18:	20ff      	movs	r0, #255	; 0xff
 8006d1a:	f000 fbcb 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0x83, VL53L0X_readReg( 0x83  & ~0x04));
 8006d1e:	2083      	movs	r0, #131	; 0x83
 8006d20:	f000 fc10 	bl	8007544 <VL53L0X_readReg>
 8006d24:	4601      	mov	r1, r0
 8006d26:	2083      	movs	r0, #131	; 0x83
 8006d28:	f000 fbc4 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0xFF, 0x01);
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	20ff      	movs	r0, #255	; 0xff
 8006d30:	f000 fbc0 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0x00, 0x01);
 8006d34:	2101      	movs	r1, #1
 8006d36:	2000      	movs	r0, #0
 8006d38:	f000 fbbc 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0xFF, 0x00);
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	20ff      	movs	r0, #255	; 0xff
 8006d40:	f000 fbb8 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(0x80, 0x00);
 8006d44:	2100      	movs	r1, #0
 8006d46:	2080      	movs	r0, #128	; 0x80
 8006d48:	f000 fbb4 	bl	80074b4 <VL53L0X_writeReg>
  return TRUE;
 8006d4c:	2001      	movs	r0, #1
}
 8006d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d50:	20000dbc 	.word	0x20000dbc
 8006d54:	20000db2 	.word	0x20000db2

08006d58 <VL53L0X_getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X_getSequenceStepTimeouts(struct SequenceStepEnables const * enables, struct SequenceStepTimeouts * timeouts)
{
 8006d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5a:	4605      	mov	r5, r0
    return decodeVcselPeriod(VL53L0X_readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8006d5c:	2050      	movs	r0, #80	; 0x50
{
 8006d5e:	460c      	mov	r4, r1
    return decodeVcselPeriod(VL53L0X_readReg(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8006d60:	f000 fbf0 	bl	8007544 <VL53L0X_readReg>
 8006d64:	4603      	mov	r3, r0
 8006d66:	3301      	adds	r3, #1
 8006d68:	005b      	lsls	r3, r3, #1
  timeouts->pre_range_vcsel_period_pclks = VL53L0X_getVcselPulsePeriod(VcselPeriodPreRange);
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	8023      	strh	r3, [r4, #0]

  timeouts->msrc_dss_tcc_mclks = VL53L0X_readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8006d6e:	2046      	movs	r0, #70	; 0x46
 8006d70:	f000 fbe8 	bl	8007544 <VL53L0X_readReg>
 8006d74:	4603      	mov	r3, r0

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X_timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006d76:	4f2c      	ldr	r7, [pc, #176]	; (8006e28 <VL53L0X_getSequenceStepTimeouts+0xd0>)
 8006d78:	7822      	ldrb	r2, [r4, #0]
 8006d7a:	4e2c      	ldr	r6, [pc, #176]	; (8006e2c <VL53L0X_getSequenceStepTimeouts+0xd4>)
 8006d7c:	fb07 f202 	mul.w	r2, r7, r2
 8006d80:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8006d84:	fba6 1202 	umull	r1, r2, r6, r2
  timeouts->msrc_dss_tcc_mclks = VL53L0X_readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8006d88:	3301      	adds	r3, #1
 8006d8a:	b29b      	uxth	r3, r3
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006d8c:	0991      	lsrs	r1, r2, #6

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8006d8e:	09d2      	lsrs	r2, r2, #7
 8006d90:	fb03 2201 	mla	r2, r3, r1, r2
  timeouts->msrc_dss_tcc_mclks = VL53L0X_readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8006d94:	80a3      	strh	r3, [r4, #4]
  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8006d96:	fba6 3202 	umull	r3, r2, r6, r2
 8006d9a:	0992      	lsrs	r2, r2, #6
  timeouts->msrc_dss_tcc_us =
 8006d9c:	60e2      	str	r2, [r4, #12]
    VL53L0X_decodeTimeout(VL53L0X_readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8006d9e:	2051      	movs	r0, #81	; 0x51
 8006da0:	f000 fbf0 	bl	8007584 <VL53L0X_readReg16Bit>
 8006da4:	4601      	mov	r1, r0
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006da6:	7823      	ldrb	r3, [r4, #0]
    return decodeVcselPeriod(VL53L0X_readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8006da8:	2070      	movs	r0, #112	; 0x70
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006daa:	fb07 f303 	mul.w	r3, r7, r3
 8006dae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006db2:	fba6 2303 	umull	r2, r3, r6, r3
  return (uint16_t)((reg_val & 0x00FF) <<
 8006db6:	b2ca      	uxtb	r2, r1
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8006db8:	f3c1 210f 	ubfx	r1, r1, #8, #16
  return (uint16_t)((reg_val & 0x00FF) <<
 8006dbc:	408a      	lsls	r2, r1
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8006dbe:	3201      	adds	r2, #1
 8006dc0:	b292      	uxth	r2, r2
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006dc2:	099f      	lsrs	r7, r3, #6
  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8006dc4:	09db      	lsrs	r3, r3, #7
 8006dc6:	fb02 3307 	mla	r3, r2, r7, r3
  timeouts->pre_range_mclks =
 8006dca:	80e2      	strh	r2, [r4, #6]
  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8006dcc:	fba6 2303 	umull	r2, r3, r6, r3
 8006dd0:	099b      	lsrs	r3, r3, #6
  timeouts->pre_range_us =
 8006dd2:	6123      	str	r3, [r4, #16]
    return decodeVcselPeriod(VL53L0X_readReg(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8006dd4:	f000 fbb6 	bl	8007544 <VL53L0X_readReg>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	3301      	adds	r3, #1
 8006ddc:	005b      	lsls	r3, r3, #1
  timeouts->final_range_vcsel_period_pclks = VL53L0X_getVcselPulsePeriod(VcselPeriodFinalRange);
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	8063      	strh	r3, [r4, #2]
    VL53L0X_decodeTimeout(VL53L0X_readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8006de2:	2071      	movs	r0, #113	; 0x71
 8006de4:	f000 fbce 	bl	8007584 <VL53L0X_readReg16Bit>
  return (uint16_t)((reg_val & 0x00FF) <<
 8006de8:	b2c3      	uxtb	r3, r0
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8006dea:	f3c0 200f 	ubfx	r0, r0, #8, #16
  return (uint16_t)((reg_val & 0x00FF) <<
 8006dee:	4083      	lsls	r3, r0
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8006df0:	3301      	adds	r3, #1
 8006df2:	b299      	uxth	r1, r3
  timeouts->final_range_mclks =
 8006df4:	8121      	strh	r1, [r4, #8]
  if (enables->pre_range)
 8006df6:	78eb      	ldrb	r3, [r5, #3]
 8006df8:	b11b      	cbz	r3, 8006e02 <VL53L0X_getSequenceStepTimeouts+0xaa>
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8006dfa:	88e3      	ldrh	r3, [r4, #6]
 8006dfc:	1acb      	subs	r3, r1, r3
 8006dfe:	b299      	uxth	r1, r3
 8006e00:	8121      	strh	r1, [r4, #8]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006e02:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <VL53L0X_getSequenceStepTimeouts+0xd0>)
 8006e04:	78a2      	ldrb	r2, [r4, #2]
 8006e06:	4809      	ldr	r0, [pc, #36]	; (8006e2c <VL53L0X_getSequenceStepTimeouts+0xd4>)
 8006e08:	fb03 f202 	mul.w	r2, r3, r2
 8006e0c:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8006e10:	fba0 2302 	umull	r2, r3, r0, r2
 8006e14:	099a      	lsrs	r2, r3, #6
  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8006e16:	09db      	lsrs	r3, r3, #7
 8006e18:	fb01 3302 	mla	r3, r1, r2, r3
 8006e1c:	fba0 2303 	umull	r2, r3, r0, r3
 8006e20:	099b      	lsrs	r3, r3, #6
  timeouts->final_range_us =
 8006e22:	6163      	str	r3, [r4, #20]
}
 8006e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e26:	bf00      	nop
 8006e28:	003a2f00 	.word	0x003a2f00
 8006e2c:	10624dd3 	.word	0x10624dd3

08006e30 <VL53L0X_getMeasurementTimingBudget>:
{
 8006e30:	b500      	push	{lr}
  uint8_t sequence_config = VL53L0X_readReg(SYSTEM_SEQUENCE_CONFIG);
 8006e32:	2001      	movs	r0, #1
{
 8006e34:	b089      	sub	sp, #36	; 0x24
  uint8_t sequence_config = VL53L0X_readReg(SYSTEM_SEQUENCE_CONFIG);
 8006e36:	f000 fb85 	bl	8007544 <VL53L0X_readReg>
 8006e3a:	4603      	mov	r3, r0
  enables->tcc          = (sequence_config >> 4) & 0x1;
 8006e3c:	f3c3 1c00 	ubfx	ip, r3, #4, #1
  enables->dss          = (sequence_config >> 3) & 0x1;
 8006e40:	f3c3 02c0 	ubfx	r2, r3, #3, #1
  enables->tcc          = (sequence_config >> 4) & 0x1;
 8006e44:	f88d c000 	strb.w	ip, [sp]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8006e48:	f88d 2002 	strb.w	r2, [sp, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8006e4c:	f3c3 0c80 	ubfx	ip, r3, #2, #1
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8006e50:	f3c3 1280 	ubfx	r2, r3, #6, #1
  VL53L0X_getSequenceStepTimeouts(&enables, &timeouts);
 8006e54:	4668      	mov	r0, sp
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8006e56:	09db      	lsrs	r3, r3, #7
  VL53L0X_getSequenceStepTimeouts(&enables, &timeouts);
 8006e58:	a902      	add	r1, sp, #8
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8006e5a:	f88d 3004 	strb.w	r3, [sp, #4]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8006e5e:	f88d c001 	strb.w	ip, [sp, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8006e62:	f88d 2003 	strb.w	r2, [sp, #3]
  VL53L0X_getSequenceStepTimeouts(&enables, &timeouts);
 8006e66:	f7ff ff77 	bl	8006d58 <VL53L0X_getSequenceStepTimeouts>
  if (enables.tcc)
 8006e6a:	f89d 3000 	ldrb.w	r3, [sp]
 8006e6e:	b333      	cbz	r3, 8006ebe <VL53L0X_getMeasurementTimingBudget+0x8e>
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8006e70:	9805      	ldr	r0, [sp, #20]
 8006e72:	f600 5084 	addw	r0, r0, #3460	; 0xd84
  if (enables.dss)
 8006e76:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8006e7a:	b1bb      	cbz	r3, 8006eac <VL53L0X_getMeasurementTimingBudget+0x7c>
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8006e7c:	9b05      	ldr	r3, [sp, #20]
 8006e7e:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 8006e82:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  if (enables.pre_range)
 8006e86:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006e8a:	b11b      	cbz	r3, 8006e94 <VL53L0X_getMeasurementTimingBudget+0x64>
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8006e8c:	9b06      	ldr	r3, [sp, #24]
 8006e8e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006e92:	4418      	add	r0, r3
  if (enables.final_range)
 8006e94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006e98:	b11b      	cbz	r3, 8006ea2 <VL53L0X_getMeasurementTimingBudget+0x72>
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8006e9a:	9b07      	ldr	r3, [sp, #28]
 8006e9c:	f203 2326 	addw	r3, r3, #550	; 0x226
 8006ea0:	4418      	add	r0, r3
  measurement_timing_budget_us = budget_us; // store for internal reuse
 8006ea2:	4b08      	ldr	r3, [pc, #32]	; (8006ec4 <VL53L0X_getMeasurementTimingBudget+0x94>)
 8006ea4:	6018      	str	r0, [r3, #0]
}
 8006ea6:	b009      	add	sp, #36	; 0x24
 8006ea8:	f85d fb04 	ldr.w	pc, [sp], #4
  else if (enables.msrc)
 8006eac:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0e8      	beq.n	8006e86 <VL53L0X_getMeasurementTimingBudget+0x56>
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8006eb4:	9b05      	ldr	r3, [sp, #20]
 8006eb6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006eba:	4418      	add	r0, r3
 8006ebc:	e7e3      	b.n	8006e86 <VL53L0X_getMeasurementTimingBudget+0x56>
  uint32_t budget_us = StartOverhead + EndOverhead;
 8006ebe:	f640 3036 	movw	r0, #2870	; 0xb36
 8006ec2:	e7d8      	b.n	8006e76 <VL53L0X_getMeasurementTimingBudget+0x46>
 8006ec4:	20000db4 	.word	0x20000db4

08006ec8 <VL53L0X_setMeasurementTimingBudget.part.0>:
uint8_t VL53L0X_setMeasurementTimingBudget(uint32_t budget_us)
 8006ec8:	b530      	push	{r4, r5, lr}
 8006eca:	4604      	mov	r4, r0
 8006ecc:	b089      	sub	sp, #36	; 0x24
  uint8_t sequence_config = VL53L0X_readReg(SYSTEM_SEQUENCE_CONFIG);
 8006ece:	2001      	movs	r0, #1
 8006ed0:	f000 fb38 	bl	8007544 <VL53L0X_readReg>
 8006ed4:	4603      	mov	r3, r0
  enables->tcc          = (sequence_config >> 4) & 0x1;
 8006ed6:	f3c3 1200 	ubfx	r2, r3, #4, #1
 8006eda:	f88d 2000 	strb.w	r2, [sp]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8006ede:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 8006ee2:	f88d 2002 	strb.w	r2, [sp, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8006ee6:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8006eea:	f88d 2001 	strb.w	r2, [sp, #1]
	  VL53L0X_getSequenceStepTimeouts(&enables, &timeouts);
 8006eee:	4668      	mov	r0, sp
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8006ef0:	f3c3 1280 	ubfx	r2, r3, #6, #1
	  VL53L0X_getSequenceStepTimeouts(&enables, &timeouts);
 8006ef4:	a902      	add	r1, sp, #8
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8006ef6:	09db      	lsrs	r3, r3, #7
 8006ef8:	f88d 3004 	strb.w	r3, [sp, #4]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8006efc:	f88d 2003 	strb.w	r2, [sp, #3]
	  VL53L0X_getSequenceStepTimeouts(&enables, &timeouts);
 8006f00:	f7ff ff2a 	bl	8006d58 <VL53L0X_getSequenceStepTimeouts>
	  if (enables.tcc)
 8006f04:	f89d 3000 	ldrb.w	r3, [sp]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d055      	beq.n	8006fb8 <VL53L0X_setMeasurementTimingBudget.part.0+0xf0>
		used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8006f0c:	9905      	ldr	r1, [sp, #20]
 8006f0e:	f601 3136 	addw	r1, r1, #2870	; 0xb36
	  if (enables.dss)
 8006f12:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d045      	beq.n	8006fa6 <VL53L0X_setMeasurementTimingBudget.part.0+0xde>
		used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8006f1a:	9b05      	ldr	r3, [sp, #20]
 8006f1c:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 8006f20:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	  if (enables.pre_range)
 8006f24:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8006f28:	b118      	cbz	r0, 8006f32 <VL53L0X_setMeasurementTimingBudget.part.0+0x6a>
		used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8006f2a:	9b06      	ldr	r3, [sp, #24]
 8006f2c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006f30:	4419      	add	r1, r3
	  if (enables.final_range)
 8006f32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d041      	beq.n	8006fbe <VL53L0X_setMeasurementTimingBudget.part.0+0xf6>
		used_budget_us += FinalRangeOverhead;
 8006f3a:	f201 2126 	addw	r1, r1, #550	; 0x226
		if (used_budget_us > budget_us)
 8006f3e:	42a1      	cmp	r1, r4
 8006f40:	d840      	bhi.n	8006fc4 <VL53L0X_setMeasurementTimingBudget.part.0+0xfc>
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X_timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8006f42:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006f46:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8006f4a:	4d20      	ldr	r5, [pc, #128]	; (8006fcc <VL53L0X_setMeasurementTimingBudget.part.0+0x104>)
		final_range_timeout_us = budget_us - used_budget_us;
 8006f4c:	1a63      	subs	r3, r4, r1
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006f4e:	fb05 f202 	mul.w	r2, r5, r2
  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8006f52:	491f      	ldr	r1, [pc, #124]	; (8006fd0 <VL53L0X_setMeasurementTimingBudget.part.0+0x108>)
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006f54:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8006f58:	fba1 1202 	umull	r1, r2, r1, r2
 8006f5c:	09d1      	lsrs	r1, r2, #7
 8006f5e:	fb0c 1103 	mla	r1, ip, r3, r1
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8006f62:	0992      	lsrs	r2, r2, #6
  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8006f64:	fbb1 f1f2 	udiv	r1, r1, r2
    final_range_timeout_mclks =
 8006f68:	b289      	uxth	r1, r1
    if (enables.pre_range)
 8006f6a:	b118      	cbz	r0, 8006f74 <VL53L0X_setMeasurementTimingBudget.part.0+0xac>
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 8006f6c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8006f70:	4419      	add	r1, r3
 8006f72:	b289      	uxth	r1, r1
  if (timeout_mclks > 0)
 8006f74:	b179      	cbz	r1, 8006f96 <VL53L0X_setMeasurementTimingBudget.part.0+0xce>
    ls_byte = timeout_mclks - 1;
 8006f76:	1e4a      	subs	r2, r1, #1
    while ((ls_byte & 0xFFFFFF00) > 0)
 8006f78:	f032 01ff 	bics.w	r1, r2, #255	; 0xff
 8006f7c:	d009      	beq.n	8006f92 <VL53L0X_setMeasurementTimingBudget.part.0+0xca>
  uint16_t ms_byte = 0;
 8006f7e:	2300      	movs	r3, #0
      ls_byte >>= 1;
 8006f80:	0852      	lsrs	r2, r2, #1
      ms_byte++;
 8006f82:	3301      	adds	r3, #1
    while ((ls_byte & 0xFFFFFF00) > 0)
 8006f84:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
      ms_byte++;
 8006f88:	b29b      	uxth	r3, r3
    while ((ls_byte & 0xFFFFFF00) > 0)
 8006f8a:	2900      	cmp	r1, #0
 8006f8c:	d1f8      	bne.n	8006f80 <VL53L0X_setMeasurementTimingBudget.part.0+0xb8>
    return (ms_byte << 8) | (ls_byte & 0xFF);
 8006f8e:	0219      	lsls	r1, r3, #8
 8006f90:	b289      	uxth	r1, r1
 8006f92:	4311      	orrs	r1, r2
 8006f94:	b289      	uxth	r1, r1
    VL53L0X_writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8006f96:	2071      	movs	r0, #113	; 0x71
 8006f98:	f000 faae 	bl	80074f8 <VL53L0X_writeReg16Bit>
  return TRUE;
 8006f9c:	2001      	movs	r0, #1
    measurement_timing_budget_us = budget_us; // store for internal reuse
 8006f9e:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <VL53L0X_setMeasurementTimingBudget.part.0+0x10c>)
 8006fa0:	601c      	str	r4, [r3, #0]
}
 8006fa2:	b009      	add	sp, #36	; 0x24
 8006fa4:	bd30      	pop	{r4, r5, pc}
	  else if (enables.msrc)
 8006fa6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0ba      	beq.n	8006f24 <VL53L0X_setMeasurementTimingBudget.part.0+0x5c>
		used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8006fae:	9b05      	ldr	r3, [sp, #20]
 8006fb0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006fb4:	4419      	add	r1, r3
 8006fb6:	e7b5      	b.n	8006f24 <VL53L0X_setMeasurementTimingBudget.part.0+0x5c>
	  used_budget_us = StartOverhead + EndOverhead;
 8006fb8:	f640 01e8 	movw	r1, #2280	; 0x8e8
 8006fbc:	e7a9      	b.n	8006f12 <VL53L0X_setMeasurementTimingBudget.part.0+0x4a>
  return TRUE;
 8006fbe:	2001      	movs	r0, #1
}
 8006fc0:	b009      	add	sp, #36	; 0x24
 8006fc2:	bd30      	pop	{r4, r5, pc}
		  return FALSE;
 8006fc4:	2000      	movs	r0, #0
}
 8006fc6:	b009      	add	sp, #36	; 0x24
 8006fc8:	bd30      	pop	{r4, r5, pc}
 8006fca:	bf00      	nop
 8006fcc:	003a2f00 	.word	0x003a2f00
 8006fd0:	10624dd3 	.word	0x10624dd3
 8006fd4:	20000db4 	.word	0x20000db4

08006fd8 <VL53L0X_setMeasurementTimingBudget>:
	if (budget_us < MinTimingBudget) { return FALSE; }
 8006fd8:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8006fdc:	4298      	cmp	r0, r3
 8006fde:	d801      	bhi.n	8006fe4 <VL53L0X_setMeasurementTimingBudget+0xc>
}
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	4770      	bx	lr
 8006fe4:	f7ff bf70 	b.w	8006ec8 <VL53L0X_setMeasurementTimingBudget.part.0>

08006fe8 <VL53L0X_performSingleRefCalibration>:
}


// based on VL53L0X_perform_single_ref_calibration()
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8006fe8:	4601      	mov	r1, r0
 8006fea:	b538      	push	{r3, r4, r5, lr}
  VL53L0X_writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8006fec:	2000      	movs	r0, #0
 8006fee:	f041 0101 	orr.w	r1, r1, #1
 8006ff2:	f000 fa5f 	bl	80074b4 <VL53L0X_writeReg>

  startTimeout();
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4d0c      	ldr	r5, [pc, #48]	; (800702c <VL53L0X_performSingleRefCalibration+0x44>)
  while ((VL53L0X_readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
  {
    if (checkTimeoutExpired()) { return FALSE; }
 8006ffa:	4c0d      	ldr	r4, [pc, #52]	; (8007030 <VL53L0X_performSingleRefCalibration+0x48>)
  startTimeout();
 8006ffc:	602b      	str	r3, [r5, #0]
  while ((VL53L0X_readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8006ffe:	2013      	movs	r0, #19
 8007000:	f000 faa0 	bl	8007544 <VL53L0X_readReg>
 8007004:	f010 0007 	ands.w	r0, r0, #7
 8007008:	d106      	bne.n	8007018 <VL53L0X_performSingleRefCalibration+0x30>
    if (checkTimeoutExpired()) { return FALSE; }
 800700a:	8823      	ldrh	r3, [r4, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0f6      	beq.n	8006ffe <VL53L0X_performSingleRefCalibration+0x16>
 8007010:	682a      	ldr	r2, [r5, #0]
 8007012:	4293      	cmp	r3, r2
 8007014:	d2f3      	bcs.n	8006ffe <VL53L0X_performSingleRefCalibration+0x16>
  VL53L0X_writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

  VL53L0X_writeReg(SYSRANGE_START, 0x00);

  return TRUE;
}
 8007016:	bd38      	pop	{r3, r4, r5, pc}
  VL53L0X_writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8007018:	2101      	movs	r1, #1
 800701a:	200b      	movs	r0, #11
 800701c:	f000 fa4a 	bl	80074b4 <VL53L0X_writeReg>
  VL53L0X_writeReg(SYSRANGE_START, 0x00);
 8007020:	2100      	movs	r1, #0
 8007022:	4608      	mov	r0, r1
 8007024:	f000 fa46 	bl	80074b4 <VL53L0X_writeReg>
 8007028:	2001      	movs	r0, #1
}
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	20000dbc 	.word	0x20000dbc
 8007030:	20000db2 	.word	0x20000db2

08007034 <VL53L0X_init>:
	io_timeout = 0; // no timeout
 8007034:	2300      	movs	r3, #0
{
 8007036:	b5f0      	push	{r4, r5, r6, r7, lr}
	did_timeout = 0;
 8007038:	4a35      	ldr	r2, [pc, #212]	; (8007110 <VL53L0X_init+0xdc>)
	io_timeout = 0; // no timeout
 800703a:	4d36      	ldr	r5, [pc, #216]	; (8007114 <VL53L0X_init+0xe0>)
{
 800703c:	b085      	sub	sp, #20
	io_timeout = 0; // no timeout
 800703e:	802b      	strh	r3, [r5, #0]
	did_timeout = 0;
 8007040:	7013      	strb	r3, [r2, #0]
	if (io_2v8)
 8007042:	2800      	cmp	r0, #0
 8007044:	f040 8212 	bne.w	800746c <VL53L0X_init+0x438>
	VL53L0X_writeReg(0x88, 0x00);
 8007048:	2100      	movs	r1, #0
 800704a:	2088      	movs	r0, #136	; 0x88
 800704c:	f000 fa32 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x80, 0x01);
 8007050:	2101      	movs	r1, #1
 8007052:	2080      	movs	r0, #128	; 0x80
 8007054:	f000 fa2e 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x01);
 8007058:	2101      	movs	r1, #1
 800705a:	20ff      	movs	r0, #255	; 0xff
 800705c:	f000 fa2a 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x00, 0x00);
 8007060:	2100      	movs	r1, #0
 8007062:	4608      	mov	r0, r1
 8007064:	f000 fa26 	bl	80074b4 <VL53L0X_writeReg>
	stop_variable = VL53L0X_readReg(0x91);
 8007068:	2091      	movs	r0, #145	; 0x91
 800706a:	f000 fa6b 	bl	8007544 <VL53L0X_readReg>
 800706e:	4602      	mov	r2, r0
 8007070:	4b29      	ldr	r3, [pc, #164]	; (8007118 <VL53L0X_init+0xe4>)
	VL53L0X_writeReg(0x00, 0x01);
 8007072:	2101      	movs	r1, #1
 8007074:	2000      	movs	r0, #0
	stop_variable = VL53L0X_readReg(0x91);
 8007076:	701a      	strb	r2, [r3, #0]
	VL53L0X_writeReg(0x00, 0x01);
 8007078:	f000 fa1c 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x00);
 800707c:	2100      	movs	r1, #0
 800707e:	20ff      	movs	r0, #255	; 0xff
 8007080:	f000 fa18 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x80, 0x00);
 8007084:	2100      	movs	r1, #0
 8007086:	2080      	movs	r0, #128	; 0x80
 8007088:	f000 fa14 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(MSRC_CONFIG_CONTROL, VL53L0X_readReg(MSRC_CONFIG_CONTROL) | 0x12);
 800708c:	2060      	movs	r0, #96	; 0x60
 800708e:	f000 fa59 	bl	8007544 <VL53L0X_readReg>
 8007092:	4601      	mov	r1, r0
 8007094:	f041 0112 	orr.w	r1, r1, #18
 8007098:	b2c9      	uxtb	r1, r1
 800709a:	2060      	movs	r0, #96	; 0x60
 800709c:	f000 fa0a 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 80070a0:	2120      	movs	r1, #32
 80070a2:	2044      	movs	r0, #68	; 0x44
 80070a4:	f000 fa28 	bl	80074f8 <VL53L0X_writeReg16Bit>
	VL53L0X_writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80070a8:	21ff      	movs	r1, #255	; 0xff
 80070aa:	2001      	movs	r0, #1
 80070ac:	f000 fa02 	bl	80074b4 <VL53L0X_writeReg>
	if (!VL53L0X_getSpadInfo(&spad_count, &spad_type_is_aperture)) { return FALSE; }
 80070b0:	f10d 0107 	add.w	r1, sp, #7
 80070b4:	f10d 0006 	add.w	r0, sp, #6
 80070b8:	f7ff fddc 	bl	8006c74 <VL53L0X_getSpadInfo>
 80070bc:	b910      	cbnz	r0, 80070c4 <VL53L0X_init+0x90>
 80070be:	2000      	movs	r0, #0
}
 80070c0:	b005      	add	sp, #20
 80070c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 80070c4:	2400      	movs	r4, #0
	VL53L0X_readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80070c6:	2206      	movs	r2, #6
 80070c8:	20b0      	movs	r0, #176	; 0xb0
 80070ca:	a902      	add	r1, sp, #8
 80070cc:	f000 fa9e 	bl	800760c <VL53L0X_readMulti>
	VL53L0X_writeReg(0xFF, 0x01);
 80070d0:	2101      	movs	r1, #1
 80070d2:	20ff      	movs	r0, #255	; 0xff
 80070d4:	f000 f9ee 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80070d8:	4621      	mov	r1, r4
 80070da:	204f      	movs	r0, #79	; 0x4f
 80070dc:	f000 f9ea 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80070e0:	212c      	movs	r1, #44	; 0x2c
 80070e2:	204e      	movs	r0, #78	; 0x4e
 80070e4:	f000 f9e6 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x00);
 80070e8:	4621      	mov	r1, r4
 80070ea:	20ff      	movs	r0, #255	; 0xff
 80070ec:	f000 f9e2 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80070f0:	21b4      	movs	r1, #180	; 0xb4
 80070f2:	20b6      	movs	r0, #182	; 0xb6
 80070f4:	f000 f9de 	bl	80074b4 <VL53L0X_writeReg>
    uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80070f8:	f89d 0007 	ldrb.w	r0, [sp, #7]
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80070fc:	f04f 0c01 	mov.w	ip, #1
    uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8007100:	42a0      	cmp	r0, r4
 8007102:	bf18      	it	ne
 8007104:	200c      	movne	r0, #12
	uint8_t spads_enabled = 0;
 8007106:	46a6      	mov	lr, r4
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 8007108:	f89d 6006 	ldrb.w	r6, [sp, #6]
 800710c:	e017      	b.n	800713e <VL53L0X_init+0x10a>
 800710e:	bf00      	nop
 8007110:	20000db0 	.word	0x20000db0
 8007114:	20000db2 	.word	0x20000db2
 8007118:	20000db8 	.word	0x20000db8
 800711c:	4576      	cmp	r6, lr
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 800711e:	f003 0307 	and.w	r3, r3, #7
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 8007122:	d016      	beq.n	8007152 <VL53L0X_init+0x11e>
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8007124:	f811 2c08 	ldrb.w	r2, [r1, #-8]
	for (i = 0; i < 48; i++)
 8007128:	3401      	adds	r4, #1
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 800712a:	fa42 f303 	asr.w	r3, r2, r3
 800712e:	07db      	lsls	r3, r3, #31
			spads_enabled++;
 8007130:	f10e 0101 	add.w	r1, lr, #1
 8007134:	bf48      	it	mi
 8007136:	fa5f fe81 	uxtbmi.w	lr, r1
	for (i = 0; i < 48; i++)
 800713a:	2c30      	cmp	r4, #48	; 0x30
 800713c:	d012      	beq.n	8007164 <VL53L0X_init+0x130>
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 800713e:	b2e3      	uxtb	r3, r4
 8007140:	aa04      	add	r2, sp, #16
 8007142:	eb02 01d3 	add.w	r1, r2, r3, lsr #3
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 8007146:	4298      	cmp	r0, r3
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8007148:	f003 0207 	and.w	r2, r3, #7
 800714c:	fa0c f202 	lsl.w	r2, ip, r2
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 8007150:	d9e4      	bls.n	800711c <VL53L0X_init+0xe8>
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8007152:	f811 3c08 	ldrb.w	r3, [r1, #-8]
	for (i = 0; i < 48; i++)
 8007156:	3401      	adds	r4, #1
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8007158:	ea23 0202 	bic.w	r2, r3, r2
	for (i = 0; i < 48; i++)
 800715c:	2c30      	cmp	r4, #48	; 0x30
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 800715e:	f801 2c08 	strb.w	r2, [r1, #-8]
	for (i = 0; i < 48; i++)
 8007162:	d1ec      	bne.n	800713e <VL53L0X_init+0x10a>
	VL53L0X_writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8007164:	2206      	movs	r2, #6
 8007166:	20b0      	movs	r0, #176	; 0xb0
 8007168:	a902      	add	r1, sp, #8
 800716a:	f000 fa31 	bl	80075d0 <VL53L0X_writeMulti>
	VL53L0X_writeReg(0xFF, 0x01);
 800716e:	2101      	movs	r1, #1
 8007170:	20ff      	movs	r0, #255	; 0xff
 8007172:	f000 f99f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x00, 0x00);
 8007176:	2100      	movs	r1, #0
 8007178:	4608      	mov	r0, r1
 800717a:	f000 f99b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x00);
 800717e:	2100      	movs	r1, #0
 8007180:	20ff      	movs	r0, #255	; 0xff
 8007182:	f000 f997 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x09, 0x00);
 8007186:	2100      	movs	r1, #0
 8007188:	2009      	movs	r0, #9
 800718a:	f000 f993 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x10, 0x00);
 800718e:	2100      	movs	r1, #0
 8007190:	2010      	movs	r0, #16
 8007192:	f000 f98f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x11, 0x00);
 8007196:	2100      	movs	r1, #0
 8007198:	2011      	movs	r0, #17
 800719a:	f000 f98b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x24, 0x01);
 800719e:	2101      	movs	r1, #1
 80071a0:	2024      	movs	r0, #36	; 0x24
 80071a2:	f000 f987 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x25, 0xFF);
 80071a6:	21ff      	movs	r1, #255	; 0xff
 80071a8:	2025      	movs	r0, #37	; 0x25
 80071aa:	f000 f983 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x75, 0x00);
 80071ae:	2100      	movs	r1, #0
 80071b0:	2075      	movs	r0, #117	; 0x75
 80071b2:	f000 f97f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x01);
 80071b6:	2101      	movs	r1, #1
 80071b8:	20ff      	movs	r0, #255	; 0xff
 80071ba:	f000 f97b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x4E, 0x2C);
 80071be:	212c      	movs	r1, #44	; 0x2c
 80071c0:	204e      	movs	r0, #78	; 0x4e
 80071c2:	f000 f977 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x48, 0x00);
 80071c6:	2100      	movs	r1, #0
 80071c8:	2048      	movs	r0, #72	; 0x48
 80071ca:	f000 f973 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x30, 0x20);
 80071ce:	2120      	movs	r1, #32
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 f96f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x00);
 80071d6:	2100      	movs	r1, #0
 80071d8:	20ff      	movs	r0, #255	; 0xff
 80071da:	f000 f96b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x30, 0x09);
 80071de:	2109      	movs	r1, #9
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 f967 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x54, 0x00);
 80071e6:	2100      	movs	r1, #0
 80071e8:	2054      	movs	r0, #84	; 0x54
 80071ea:	f000 f963 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x31, 0x04);
 80071ee:	2104      	movs	r1, #4
 80071f0:	2031      	movs	r0, #49	; 0x31
 80071f2:	f000 f95f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x32, 0x03);
 80071f6:	2103      	movs	r1, #3
 80071f8:	2032      	movs	r0, #50	; 0x32
 80071fa:	f000 f95b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x40, 0x83);
 80071fe:	2183      	movs	r1, #131	; 0x83
 8007200:	2040      	movs	r0, #64	; 0x40
 8007202:	f000 f957 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x46, 0x25);
 8007206:	2125      	movs	r1, #37	; 0x25
 8007208:	2046      	movs	r0, #70	; 0x46
 800720a:	f000 f953 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x60, 0x00);
 800720e:	2100      	movs	r1, #0
 8007210:	2060      	movs	r0, #96	; 0x60
 8007212:	f000 f94f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x27, 0x00);
 8007216:	2100      	movs	r1, #0
 8007218:	2027      	movs	r0, #39	; 0x27
 800721a:	f000 f94b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x50, 0x06);
 800721e:	2106      	movs	r1, #6
 8007220:	2050      	movs	r0, #80	; 0x50
 8007222:	f000 f947 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x51, 0x00);
 8007226:	2100      	movs	r1, #0
 8007228:	2051      	movs	r0, #81	; 0x51
 800722a:	f000 f943 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x52, 0x96);
 800722e:	2196      	movs	r1, #150	; 0x96
 8007230:	2052      	movs	r0, #82	; 0x52
 8007232:	f000 f93f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x56, 0x08);
 8007236:	2108      	movs	r1, #8
 8007238:	2056      	movs	r0, #86	; 0x56
 800723a:	f000 f93b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x57, 0x30);
 800723e:	4621      	mov	r1, r4
 8007240:	2057      	movs	r0, #87	; 0x57
 8007242:	f000 f937 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x61, 0x00);
 8007246:	2100      	movs	r1, #0
 8007248:	2061      	movs	r0, #97	; 0x61
 800724a:	f000 f933 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x62, 0x00);
 800724e:	2100      	movs	r1, #0
 8007250:	2062      	movs	r0, #98	; 0x62
 8007252:	f000 f92f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x64, 0x00);
 8007256:	2100      	movs	r1, #0
 8007258:	2064      	movs	r0, #100	; 0x64
 800725a:	f000 f92b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x65, 0x00);
 800725e:	2100      	movs	r1, #0
 8007260:	2065      	movs	r0, #101	; 0x65
 8007262:	f000 f927 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x66, 0xA0);
 8007266:	21a0      	movs	r1, #160	; 0xa0
 8007268:	2066      	movs	r0, #102	; 0x66
 800726a:	f000 f923 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x01);
 800726e:	2101      	movs	r1, #1
 8007270:	20ff      	movs	r0, #255	; 0xff
 8007272:	f000 f91f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x22, 0x32);
 8007276:	2132      	movs	r1, #50	; 0x32
 8007278:	2022      	movs	r0, #34	; 0x22
 800727a:	f000 f91b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x47, 0x14);
 800727e:	2114      	movs	r1, #20
 8007280:	2047      	movs	r0, #71	; 0x47
 8007282:	f000 f917 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x49, 0xFF);
 8007286:	21ff      	movs	r1, #255	; 0xff
 8007288:	2049      	movs	r0, #73	; 0x49
 800728a:	f000 f913 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x4A, 0x00);
 800728e:	2100      	movs	r1, #0
 8007290:	204a      	movs	r0, #74	; 0x4a
 8007292:	f000 f90f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x00);
 8007296:	2100      	movs	r1, #0
 8007298:	20ff      	movs	r0, #255	; 0xff
 800729a:	f000 f90b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x7A, 0x0A);
 800729e:	210a      	movs	r1, #10
 80072a0:	207a      	movs	r0, #122	; 0x7a
 80072a2:	f000 f907 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x7B, 0x00);
 80072a6:	2100      	movs	r1, #0
 80072a8:	207b      	movs	r0, #123	; 0x7b
 80072aa:	f000 f903 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x78, 0x21);
 80072ae:	2121      	movs	r1, #33	; 0x21
 80072b0:	2078      	movs	r0, #120	; 0x78
 80072b2:	f000 f8ff 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x01);
 80072b6:	2101      	movs	r1, #1
 80072b8:	20ff      	movs	r0, #255	; 0xff
 80072ba:	f000 f8fb 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x23, 0x34);
 80072be:	2134      	movs	r1, #52	; 0x34
 80072c0:	2023      	movs	r0, #35	; 0x23
 80072c2:	f000 f8f7 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x42, 0x00);
 80072c6:	2100      	movs	r1, #0
 80072c8:	2042      	movs	r0, #66	; 0x42
 80072ca:	f000 f8f3 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x44, 0xFF);
 80072ce:	21ff      	movs	r1, #255	; 0xff
 80072d0:	2044      	movs	r0, #68	; 0x44
 80072d2:	f000 f8ef 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x45, 0x26);
 80072d6:	2126      	movs	r1, #38	; 0x26
 80072d8:	2045      	movs	r0, #69	; 0x45
 80072da:	f000 f8eb 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x46, 0x05);
 80072de:	2105      	movs	r1, #5
 80072e0:	2046      	movs	r0, #70	; 0x46
 80072e2:	f000 f8e7 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x40, 0x40);
 80072e6:	2140      	movs	r1, #64	; 0x40
 80072e8:	4608      	mov	r0, r1
 80072ea:	f000 f8e3 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x0E, 0x06);
 80072ee:	2106      	movs	r1, #6
 80072f0:	200e      	movs	r0, #14
 80072f2:	f000 f8df 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x20, 0x1A);
 80072f6:	211a      	movs	r1, #26
 80072f8:	2020      	movs	r0, #32
 80072fa:	f000 f8db 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x43, 0x40);
 80072fe:	2140      	movs	r1, #64	; 0x40
 8007300:	2043      	movs	r0, #67	; 0x43
 8007302:	f000 f8d7 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x00);
 8007306:	2100      	movs	r1, #0
 8007308:	20ff      	movs	r0, #255	; 0xff
 800730a:	f000 f8d3 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x34, 0x03);
 800730e:	2103      	movs	r1, #3
 8007310:	2034      	movs	r0, #52	; 0x34
 8007312:	f000 f8cf 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x35, 0x44);
 8007316:	2144      	movs	r1, #68	; 0x44
 8007318:	2035      	movs	r0, #53	; 0x35
 800731a:	f000 f8cb 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x01);
 800731e:	2101      	movs	r1, #1
 8007320:	20ff      	movs	r0, #255	; 0xff
 8007322:	f000 f8c7 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x31, 0x04);
 8007326:	2104      	movs	r1, #4
 8007328:	2031      	movs	r0, #49	; 0x31
 800732a:	f000 f8c3 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x4B, 0x09);
 800732e:	2109      	movs	r1, #9
 8007330:	204b      	movs	r0, #75	; 0x4b
 8007332:	f000 f8bf 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x4C, 0x05);
 8007336:	2105      	movs	r1, #5
 8007338:	204c      	movs	r0, #76	; 0x4c
 800733a:	f000 f8bb 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x4D, 0x04);
 800733e:	2104      	movs	r1, #4
 8007340:	204d      	movs	r0, #77	; 0x4d
 8007342:	f000 f8b7 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x00);
 8007346:	2100      	movs	r1, #0
 8007348:	20ff      	movs	r0, #255	; 0xff
 800734a:	f000 f8b3 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x44, 0x00);
 800734e:	2100      	movs	r1, #0
 8007350:	2044      	movs	r0, #68	; 0x44
 8007352:	f000 f8af 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x45, 0x20);
 8007356:	2120      	movs	r1, #32
 8007358:	2045      	movs	r0, #69	; 0x45
 800735a:	f000 f8ab 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x47, 0x08);
 800735e:	2108      	movs	r1, #8
 8007360:	2047      	movs	r0, #71	; 0x47
 8007362:	f000 f8a7 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x48, 0x28);
 8007366:	2128      	movs	r1, #40	; 0x28
 8007368:	2048      	movs	r0, #72	; 0x48
 800736a:	f000 f8a3 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x67, 0x00);
 800736e:	2100      	movs	r1, #0
 8007370:	2067      	movs	r0, #103	; 0x67
 8007372:	f000 f89f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x70, 0x04);
 8007376:	2104      	movs	r1, #4
 8007378:	2070      	movs	r0, #112	; 0x70
 800737a:	f000 f89b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x71, 0x01);
 800737e:	2101      	movs	r1, #1
 8007380:	2071      	movs	r0, #113	; 0x71
 8007382:	f000 f897 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x72, 0xFE);
 8007386:	21fe      	movs	r1, #254	; 0xfe
 8007388:	2072      	movs	r0, #114	; 0x72
 800738a:	f000 f893 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x76, 0x00);
 800738e:	2100      	movs	r1, #0
 8007390:	2076      	movs	r0, #118	; 0x76
 8007392:	f000 f88f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x77, 0x00);
 8007396:	2100      	movs	r1, #0
 8007398:	2077      	movs	r0, #119	; 0x77
 800739a:	f000 f88b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x01);
 800739e:	2101      	movs	r1, #1
 80073a0:	20ff      	movs	r0, #255	; 0xff
 80073a2:	f000 f887 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x0D, 0x01);
 80073a6:	2101      	movs	r1, #1
 80073a8:	200d      	movs	r0, #13
 80073aa:	f000 f883 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x00);
 80073ae:	2100      	movs	r1, #0
 80073b0:	20ff      	movs	r0, #255	; 0xff
 80073b2:	f000 f87f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x80, 0x01);
 80073b6:	2101      	movs	r1, #1
 80073b8:	2080      	movs	r0, #128	; 0x80
 80073ba:	f000 f87b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x01, 0xF8);
 80073be:	21f8      	movs	r1, #248	; 0xf8
 80073c0:	2001      	movs	r0, #1
 80073c2:	f000 f877 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x01);
 80073c6:	2101      	movs	r1, #1
 80073c8:	20ff      	movs	r0, #255	; 0xff
 80073ca:	f000 f873 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x8E, 0x01);
 80073ce:	2101      	movs	r1, #1
 80073d0:	208e      	movs	r0, #142	; 0x8e
 80073d2:	f000 f86f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x00, 0x01);
 80073d6:	2101      	movs	r1, #1
 80073d8:	2000      	movs	r0, #0
 80073da:	f000 f86b 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0xFF, 0x00);
 80073de:	2100      	movs	r1, #0
 80073e0:	20ff      	movs	r0, #255	; 0xff
 80073e2:	f000 f867 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(0x80, 0x00);
 80073e6:	2100      	movs	r1, #0
 80073e8:	2080      	movs	r0, #128	; 0x80
 80073ea:	f000 f863 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80073ee:	2104      	movs	r1, #4
 80073f0:	200a      	movs	r0, #10
 80073f2:	f000 f85f 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(GPIO_HV_MUX_ACTIVE_HIGH, VL53L0X_readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80073f6:	2084      	movs	r0, #132	; 0x84
 80073f8:	f000 f8a4 	bl	8007544 <VL53L0X_readReg>
 80073fc:	4601      	mov	r1, r0
 80073fe:	2084      	movs	r0, #132	; 0x84
 8007400:	f001 01ef 	and.w	r1, r1, #239	; 0xef
 8007404:	f000 f856 	bl	80074b4 <VL53L0X_writeReg>
	VL53L0X_writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8007408:	2101      	movs	r1, #1
 800740a:	200b      	movs	r0, #11
 800740c:	f000 f852 	bl	80074b4 <VL53L0X_writeReg>
	measurement_timing_budget_us = VL53L0X_getMeasurementTimingBudget();
 8007410:	f7ff fd0e 	bl	8006e30 <VL53L0X_getMeasurementTimingBudget>
 8007414:	4603      	mov	r3, r0
 8007416:	4e1b      	ldr	r6, [pc, #108]	; (8007484 <VL53L0X_init+0x450>)
	VL53L0X_writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8007418:	21e8      	movs	r1, #232	; 0xe8
 800741a:	2001      	movs	r0, #1
	measurement_timing_budget_us = VL53L0X_getMeasurementTimingBudget();
 800741c:	6033      	str	r3, [r6, #0]
	VL53L0X_writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800741e:	f000 f849 	bl	80074b4 <VL53L0X_writeReg>
	if (budget_us < MinTimingBudget) { return FALSE; }
 8007422:	f644 631f 	movw	r3, #19999	; 0x4e1f
	VL53L0X_setMeasurementTimingBudget(measurement_timing_budget_us);
 8007426:	6830      	ldr	r0, [r6, #0]
	if (budget_us < MinTimingBudget) { return FALSE; }
 8007428:	4298      	cmp	r0, r3
 800742a:	d901      	bls.n	8007430 <VL53L0X_init+0x3fc>
 800742c:	f7ff fd4c 	bl	8006ec8 <VL53L0X_setMeasurementTimingBudget.part.0>
	VL53L0X_writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8007430:	2101      	movs	r1, #1
 8007432:	4608      	mov	r0, r1
 8007434:	f000 f83e 	bl	80074b4 <VL53L0X_writeReg>
	if (!VL53L0X_performSingleRefCalibration(0x40)) { return FALSE; }
 8007438:	2040      	movs	r0, #64	; 0x40
 800743a:	f7ff fdd5 	bl	8006fe8 <VL53L0X_performSingleRefCalibration>
 800743e:	2800      	cmp	r0, #0
 8007440:	f43f ae3d 	beq.w	80070be <VL53L0X_init+0x8a>
	VL53L0X_writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8007444:	2102      	movs	r1, #2
 8007446:	2001      	movs	r0, #1
 8007448:	f000 f834 	bl	80074b4 <VL53L0X_writeReg>
	if (!VL53L0X_performSingleRefCalibration(0x00)) { return FALSE; }
 800744c:	2000      	movs	r0, #0
 800744e:	f7ff fdcb 	bl	8006fe8 <VL53L0X_performSingleRefCalibration>
 8007452:	2800      	cmp	r0, #0
 8007454:	f43f ae33 	beq.w	80070be <VL53L0X_init+0x8a>
	VL53L0X_writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8007458:	21e8      	movs	r1, #232	; 0xe8
 800745a:	2001      	movs	r0, #1
 800745c:	f000 f82a 	bl	80074b4 <VL53L0X_writeReg>
inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 8007460:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
	return TRUE;
 8007464:	2001      	movs	r0, #1
inline void setTimeout(uint16_t timeout) { io_timeout = timeout; }
 8007466:	802b      	strh	r3, [r5, #0]
}
 8007468:	b005      	add	sp, #20
 800746a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        VL53L0X_writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, VL53L0X_readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 800746c:	2089      	movs	r0, #137	; 0x89
 800746e:	f000 f869 	bl	8007544 <VL53L0X_readReg>
 8007472:	4601      	mov	r1, r0
 8007474:	f041 0101 	orr.w	r1, r1, #1
 8007478:	b2c9      	uxtb	r1, r1
 800747a:	2089      	movs	r0, #137	; 0x89
 800747c:	f000 f81a 	bl	80074b4 <VL53L0X_writeReg>
 8007480:	e5e2      	b.n	8007048 <VL53L0X_init+0x14>
 8007482:	bf00      	nop
 8007484:	20000db4 	.word	0x20000db4

08007488 <VL53L0Xm_init>:
{
 8007488:	4602      	mov	r2, r0
	VL53L0X_address = addr;
 800748a:	4b02      	ldr	r3, [pc, #8]	; (8007494 <VL53L0Xm_init+0xc>)
	return VL53L0X_init(io_2v8 );
 800748c:	4608      	mov	r0, r1
	VL53L0X_address = addr;
 800748e:	601a      	str	r2, [r3, #0]
	return VL53L0X_init(io_2v8 );
 8007490:	f7ff bdd0 	b.w	8007034 <VL53L0X_init>
 8007494:	20000dac 	.word	0x20000dac

08007498 <VL53L0X_pingAddress>:
 *    0 - Device responds
 *    1 - Address not in use
 */
uint8_t VL53L0X_pingAddress(uint8_t addr)
{
	return (HAL_I2C_IsDeviceReady(&hi2c1, addr<<1,1,100)==0);
 8007498:	2201      	movs	r2, #1
{
 800749a:	4601      	mov	r1, r0
 800749c:	b508      	push	{r3, lr}
	return (HAL_I2C_IsDeviceReady(&hi2c1, addr<<1,1,100)==0);
 800749e:	4091      	lsls	r1, r2
 80074a0:	2364      	movs	r3, #100	; 0x64
 80074a2:	4803      	ldr	r0, [pc, #12]	; (80074b0 <VL53L0X_pingAddress+0x18>)
 80074a4:	f7fb ffba 	bl	800341c <HAL_I2C_IsDeviceReady>
}
 80074a8:	fab0 f080 	clz	r0, r0
 80074ac:	0940      	lsrs	r0, r0, #5
 80074ae:	bd08      	pop	{r3, pc}
 80074b0:	200004e4 	.word	0x200004e4

080074b4 <VL53L0X_writeReg>:


uint8_t VL53L0X_writeReg(uint8_t reg, uint8_t value)
{
	uint8_t status;
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 80074b4:	2301      	movs	r3, #1
{
 80074b6:	b530      	push	{r4, r5, lr}
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 80074b8:	2564      	movs	r5, #100	; 0x64
{
 80074ba:	460c      	mov	r4, r1
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 80074bc:	490c      	ldr	r1, [pc, #48]	; (80074f0 <VL53L0X_writeReg+0x3c>)
{
 80074be:	b087      	sub	sp, #28
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 80074c0:	6809      	ldr	r1, [r1, #0]
{
 80074c2:	4602      	mov	r2, r0
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 80074c4:	4099      	lsls	r1, r3
 80074c6:	f10d 0017 	add.w	r0, sp, #23
 80074ca:	e9cd 0300 	strd	r0, r3, [sp]
 80074ce:	b289      	uxth	r1, r1
 80074d0:	4808      	ldr	r0, [pc, #32]	; (80074f4 <VL53L0X_writeReg+0x40>)
 80074d2:	9502      	str	r5, [sp, #8]
{
 80074d4:	f88d 4017 	strb.w	r4, [sp, #23]
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 80074d8:	f7fb fd62 	bl	8002fa0 <HAL_I2C_Mem_Write>
	if (status) VL53L0X_error("I2C Error WriteReg",reg);
 80074dc:	4604      	mov	r4, r0
 80074de:	b910      	cbnz	r0, 80074e6 <VL53L0X_writeReg+0x32>
	return status;
}
 80074e0:	4620      	mov	r0, r4
 80074e2:	b007      	add	sp, #28
 80074e4:	bd30      	pop	{r4, r5, pc}
	Error_Handler();
 80074e6:	f7f9 fddf 	bl	80010a8 <Error_Handler>
}
 80074ea:	4620      	mov	r0, r4
 80074ec:	b007      	add	sp, #28
 80074ee:	bd30      	pop	{r4, r5, pc}
 80074f0:	20000dac 	.word	0x20000dac
 80074f4:	200004e4 	.word	0x200004e4

080074f8 <VL53L0X_writeReg16Bit>:

// Write a 16-bit register

uint8_t VL53L0X_writeReg16Bit(uint8_t reg, uint16_t value)
{
 80074f8:	b530      	push	{r4, r5, lr}
	uint8_t *p;
	// Rearrange from little to big endianess
	p = (uint8_t*)&value;
	data[0] = p[1];
	data[1] = p[0];
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT,data, 2, 100);
 80074fa:	2364      	movs	r3, #100	; 0x64
{
 80074fc:	460c      	mov	r4, r1
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT,data, 2, 100);
 80074fe:	2502      	movs	r5, #2
 8007500:	490e      	ldr	r1, [pc, #56]	; (800753c <VL53L0X_writeReg16Bit+0x44>)
{
 8007502:	b087      	sub	sp, #28
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT,data, 2, 100);
 8007504:	6809      	ldr	r1, [r1, #0]
{
 8007506:	4602      	mov	r2, r0
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT,data, 2, 100);
 8007508:	0049      	lsls	r1, r1, #1
 800750a:	a805      	add	r0, sp, #20
	data[0] = p[1];
 800750c:	f3c4 2c07 	ubfx	ip, r4, #8, #8
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT,data, 2, 100);
 8007510:	9000      	str	r0, [sp, #0]
 8007512:	9302      	str	r3, [sp, #8]
 8007514:	480a      	ldr	r0, [pc, #40]	; (8007540 <VL53L0X_writeReg16Bit+0x48>)
 8007516:	2301      	movs	r3, #1
 8007518:	b289      	uxth	r1, r1
 800751a:	9501      	str	r5, [sp, #4]
	data[1] = p[0];
 800751c:	f88d 4015 	strb.w	r4, [sp, #21]
	data[0] = p[1];
 8007520:	f88d c014 	strb.w	ip, [sp, #20]
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT,data, 2, 100);
 8007524:	f7fb fd3c 	bl	8002fa0 <HAL_I2C_Mem_Write>
	if (status) VL53L0X_error("I2C Error Write16",reg);
 8007528:	4604      	mov	r4, r0
 800752a:	b910      	cbnz	r0, 8007532 <VL53L0X_writeReg16Bit+0x3a>

	return status;
}
 800752c:	4620      	mov	r0, r4
 800752e:	b007      	add	sp, #28
 8007530:	bd30      	pop	{r4, r5, pc}
	Error_Handler();
 8007532:	f7f9 fdb9 	bl	80010a8 <Error_Handler>
}
 8007536:	4620      	mov	r0, r4
 8007538:	b007      	add	sp, #28
 800753a:	bd30      	pop	{r4, r5, pc}
 800753c:	20000dac 	.word	0x20000dac
 8007540:	200004e4 	.word	0x200004e4

08007544 <VL53L0X_readReg>:
uint8_t VL53L0X_readReg(uint8_t reg)
{
	uint8_t status;
	uint8_t value;

	status = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &value, 1, 100);
 8007544:	2301      	movs	r3, #1
{
 8007546:	b510      	push	{r4, lr}
	status = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &value, 1, 100);
 8007548:	2464      	movs	r4, #100	; 0x64
 800754a:	490c      	ldr	r1, [pc, #48]	; (800757c <VL53L0X_readReg+0x38>)
{
 800754c:	b086      	sub	sp, #24
	status = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &value, 1, 100);
 800754e:	6809      	ldr	r1, [r1, #0]
{
 8007550:	4602      	mov	r2, r0
	status = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) &value, 1, 100);
 8007552:	4099      	lsls	r1, r3
 8007554:	f10d 0017 	add.w	r0, sp, #23
 8007558:	9000      	str	r0, [sp, #0]
 800755a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800755e:	4808      	ldr	r0, [pc, #32]	; (8007580 <VL53L0X_readReg+0x3c>)
 8007560:	b289      	uxth	r1, r1
 8007562:	f7fb fdd1 	bl	8003108 <HAL_I2C_Mem_Read>
	if (status) VL53L0X_error("I2C Error ReadReg",reg);
 8007566:	b918      	cbnz	r0, 8007570 <VL53L0X_readReg+0x2c>

	return value;
}
 8007568:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800756c:	b006      	add	sp, #24
 800756e:	bd10      	pop	{r4, pc}
	Error_Handler();
 8007570:	f7f9 fd9a 	bl	80010a8 <Error_Handler>
}
 8007574:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8007578:	b006      	add	sp, #24
 800757a:	bd10      	pop	{r4, pc}
 800757c:	20000dac 	.word	0x20000dac
 8007580:	200004e4 	.word	0x200004e4

08007584 <VL53L0X_readReg16Bit>:

// Read a 16-bit register

uint16_t VL53L0X_readReg16Bit(uint8_t reg)
{
 8007584:	b530      	push	{r4, r5, lr}
	uint8_t status;
	uint8_t data[2];
	uint16_t value;
	uint8_t  *p;

	status = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, data, 2, 100);
 8007586:	2564      	movs	r5, #100	; 0x64
 8007588:	2402      	movs	r4, #2
 800758a:	490f      	ldr	r1, [pc, #60]	; (80075c8 <VL53L0X_readReg16Bit+0x44>)
{
 800758c:	b087      	sub	sp, #28
	status = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, data, 2, 100);
 800758e:	6809      	ldr	r1, [r1, #0]
 8007590:	ab05      	add	r3, sp, #20
 8007592:	0049      	lsls	r1, r1, #1
{
 8007594:	4602      	mov	r2, r0
	status = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, data, 2, 100);
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	e9cd 4501 	strd	r4, r5, [sp, #4]
 800759c:	2301      	movs	r3, #1
 800759e:	480b      	ldr	r0, [pc, #44]	; (80075cc <VL53L0X_readReg16Bit+0x48>)
 80075a0:	b289      	uxth	r1, r1
 80075a2:	f7fb fdb1 	bl	8003108 <HAL_I2C_Mem_Read>
	if (status) VL53L0X_error("I2C Error Read16",reg);
 80075a6:	b958      	cbnz	r0, 80075c0 <VL53L0X_readReg16Bit+0x3c>
	// Rearrange from big to little endianess
	p = (uint8_t*)&value;
	p[0] = data[1];
 80075a8:	f89d 2015 	ldrb.w	r2, [sp, #21]
	p[1] = data[0];
 80075ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
	p[0] = data[1];
 80075b0:	f88d 2016 	strb.w	r2, [sp, #22]
	p[1] = data[0];
 80075b4:	f88d 3017 	strb.w	r3, [sp, #23]
	return value;
}
 80075b8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80075bc:	b007      	add	sp, #28
 80075be:	bd30      	pop	{r4, r5, pc}
	Error_Handler();
 80075c0:	f7f9 fd72 	bl	80010a8 <Error_Handler>
}
 80075c4:	e7f0      	b.n	80075a8 <VL53L0X_readReg16Bit+0x24>
 80075c6:	bf00      	nop
 80075c8:	20000dac 	.word	0x20000dac
 80075cc:	200004e4 	.word	0x200004e4

080075d0 <VL53L0X_writeMulti>:

// Write an arbitrary number of bytes from the given array to the sensor,
// starting at the given register

void VL53L0X_writeMulti(uint8_t reg, uint8_t const * src, uint8_t count)
{
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	4684      	mov	ip, r0
 80075d4:	460e      	mov	r6, r1
 80075d6:	4615      	mov	r5, r2
	uint8_t status;

	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) src, count, 100);
 80075d8:	2464      	movs	r4, #100	; 0x64
 80075da:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <VL53L0X_writeMulti+0x34>)
{
 80075dc:	b084      	sub	sp, #16
	status = HAL_I2C_Mem_Write(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) src, count, 100);
 80075de:	6819      	ldr	r1, [r3, #0]
 80075e0:	4662      	mov	r2, ip
 80075e2:	0049      	lsls	r1, r1, #1
 80075e4:	2301      	movs	r3, #1
 80075e6:	e9cd 6500 	strd	r6, r5, [sp]
 80075ea:	4807      	ldr	r0, [pc, #28]	; (8007608 <VL53L0X_writeMulti+0x38>)
 80075ec:	b289      	uxth	r1, r1
 80075ee:	9402      	str	r4, [sp, #8]
 80075f0:	f7fb fcd6 	bl	8002fa0 <HAL_I2C_Mem_Write>
	if (status) VL53L0X_error("I2C Error WriteMulti",reg);
 80075f4:	b908      	cbnz	r0, 80075fa <VL53L0X_writeMulti+0x2a>

}
 80075f6:	b004      	add	sp, #16
 80075f8:	bd70      	pop	{r4, r5, r6, pc}
 80075fa:	b004      	add	sp, #16
 80075fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Error_Handler();
 8007600:	f7f9 bd52 	b.w	80010a8 <Error_Handler>
 8007604:	20000dac 	.word	0x20000dac
 8007608:	200004e4 	.word	0x200004e4

0800760c <VL53L0X_readMulti>:

// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array

void VL53L0X_readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	4684      	mov	ip, r0
 8007610:	460e      	mov	r6, r1
 8007612:	4615      	mov	r5, r2
	uint8_t status;

	status = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, dst, count, 100);
 8007614:	2464      	movs	r4, #100	; 0x64
 8007616:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <VL53L0X_readMulti+0x34>)
{
 8007618:	b084      	sub	sp, #16
	status = HAL_I2C_Mem_Read(&hi2c1, VL53L0X_address<<1, reg, I2C_MEMADD_SIZE_8BIT, dst, count, 100);
 800761a:	6819      	ldr	r1, [r3, #0]
 800761c:	4662      	mov	r2, ip
 800761e:	0049      	lsls	r1, r1, #1
 8007620:	2301      	movs	r3, #1
 8007622:	e9cd 6500 	strd	r6, r5, [sp]
 8007626:	4807      	ldr	r0, [pc, #28]	; (8007644 <VL53L0X_readMulti+0x38>)
 8007628:	b289      	uxth	r1, r1
 800762a:	9402      	str	r4, [sp, #8]
 800762c:	f7fb fd6c 	bl	8003108 <HAL_I2C_Mem_Read>
	if (status) VL53L0X_error("I2C Error ReadMulti",reg);
 8007630:	b908      	cbnz	r0, 8007636 <VL53L0X_readMulti+0x2a>

}
 8007632:	b004      	add	sp, #16
 8007634:	bd70      	pop	{r4, r5, r6, pc}
 8007636:	b004      	add	sp, #16
 8007638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Error_Handler();
 800763c:	f7f9 bd34 	b.w	80010a8 <Error_Handler>
 8007640:	20000dac 	.word	0x20000dac
 8007644:	200004e4 	.word	0x200004e4

08007648 <__errno>:
 8007648:	4b01      	ldr	r3, [pc, #4]	; (8007650 <__errno+0x8>)
 800764a:	6818      	ldr	r0, [r3, #0]
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	20000420 	.word	0x20000420

08007654 <__libc_init_array>:
 8007654:	b570      	push	{r4, r5, r6, lr}
 8007656:	2600      	movs	r6, #0
 8007658:	4d0c      	ldr	r5, [pc, #48]	; (800768c <__libc_init_array+0x38>)
 800765a:	4c0d      	ldr	r4, [pc, #52]	; (8007690 <__libc_init_array+0x3c>)
 800765c:	1b64      	subs	r4, r4, r5
 800765e:	10a4      	asrs	r4, r4, #2
 8007660:	42a6      	cmp	r6, r4
 8007662:	d109      	bne.n	8007678 <__libc_init_array+0x24>
 8007664:	f002 fa5a 	bl	8009b1c <_init>
 8007668:	2600      	movs	r6, #0
 800766a:	4d0a      	ldr	r5, [pc, #40]	; (8007694 <__libc_init_array+0x40>)
 800766c:	4c0a      	ldr	r4, [pc, #40]	; (8007698 <__libc_init_array+0x44>)
 800766e:	1b64      	subs	r4, r4, r5
 8007670:	10a4      	asrs	r4, r4, #2
 8007672:	42a6      	cmp	r6, r4
 8007674:	d105      	bne.n	8007682 <__libc_init_array+0x2e>
 8007676:	bd70      	pop	{r4, r5, r6, pc}
 8007678:	f855 3b04 	ldr.w	r3, [r5], #4
 800767c:	4798      	blx	r3
 800767e:	3601      	adds	r6, #1
 8007680:	e7ee      	b.n	8007660 <__libc_init_array+0xc>
 8007682:	f855 3b04 	ldr.w	r3, [r5], #4
 8007686:	4798      	blx	r3
 8007688:	3601      	adds	r6, #1
 800768a:	e7f2      	b.n	8007672 <__libc_init_array+0x1e>
 800768c:	0800adb0 	.word	0x0800adb0
 8007690:	0800adb0 	.word	0x0800adb0
 8007694:	0800adb0 	.word	0x0800adb0
 8007698:	0800adb4 	.word	0x0800adb4

0800769c <memmove>:
 800769c:	4288      	cmp	r0, r1
 800769e:	b510      	push	{r4, lr}
 80076a0:	eb01 0402 	add.w	r4, r1, r2
 80076a4:	d902      	bls.n	80076ac <memmove+0x10>
 80076a6:	4284      	cmp	r4, r0
 80076a8:	4623      	mov	r3, r4
 80076aa:	d807      	bhi.n	80076bc <memmove+0x20>
 80076ac:	1e43      	subs	r3, r0, #1
 80076ae:	42a1      	cmp	r1, r4
 80076b0:	d008      	beq.n	80076c4 <memmove+0x28>
 80076b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076ba:	e7f8      	b.n	80076ae <memmove+0x12>
 80076bc:	4601      	mov	r1, r0
 80076be:	4402      	add	r2, r0
 80076c0:	428a      	cmp	r2, r1
 80076c2:	d100      	bne.n	80076c6 <memmove+0x2a>
 80076c4:	bd10      	pop	{r4, pc}
 80076c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076ce:	e7f7      	b.n	80076c0 <memmove+0x24>

080076d0 <memset>:
 80076d0:	4603      	mov	r3, r0
 80076d2:	4402      	add	r2, r0
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d100      	bne.n	80076da <memset+0xa>
 80076d8:	4770      	bx	lr
 80076da:	f803 1b01 	strb.w	r1, [r3], #1
 80076de:	e7f9      	b.n	80076d4 <memset+0x4>

080076e0 <iprintf>:
 80076e0:	b40f      	push	{r0, r1, r2, r3}
 80076e2:	4b0a      	ldr	r3, [pc, #40]	; (800770c <iprintf+0x2c>)
 80076e4:	b513      	push	{r0, r1, r4, lr}
 80076e6:	681c      	ldr	r4, [r3, #0]
 80076e8:	b124      	cbz	r4, 80076f4 <iprintf+0x14>
 80076ea:	69a3      	ldr	r3, [r4, #24]
 80076ec:	b913      	cbnz	r3, 80076f4 <iprintf+0x14>
 80076ee:	4620      	mov	r0, r4
 80076f0:	f000 fa8e 	bl	8007c10 <__sinit>
 80076f4:	ab05      	add	r3, sp, #20
 80076f6:	4620      	mov	r0, r4
 80076f8:	9a04      	ldr	r2, [sp, #16]
 80076fa:	68a1      	ldr	r1, [r4, #8]
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	f000 fded 	bl	80082dc <_vfiprintf_r>
 8007702:	b002      	add	sp, #8
 8007704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007708:	b004      	add	sp, #16
 800770a:	4770      	bx	lr
 800770c:	20000420 	.word	0x20000420

08007710 <_puts_r>:
 8007710:	b570      	push	{r4, r5, r6, lr}
 8007712:	460e      	mov	r6, r1
 8007714:	4605      	mov	r5, r0
 8007716:	b118      	cbz	r0, 8007720 <_puts_r+0x10>
 8007718:	6983      	ldr	r3, [r0, #24]
 800771a:	b90b      	cbnz	r3, 8007720 <_puts_r+0x10>
 800771c:	f000 fa78 	bl	8007c10 <__sinit>
 8007720:	69ab      	ldr	r3, [r5, #24]
 8007722:	68ac      	ldr	r4, [r5, #8]
 8007724:	b913      	cbnz	r3, 800772c <_puts_r+0x1c>
 8007726:	4628      	mov	r0, r5
 8007728:	f000 fa72 	bl	8007c10 <__sinit>
 800772c:	4b2c      	ldr	r3, [pc, #176]	; (80077e0 <_puts_r+0xd0>)
 800772e:	429c      	cmp	r4, r3
 8007730:	d120      	bne.n	8007774 <_puts_r+0x64>
 8007732:	686c      	ldr	r4, [r5, #4]
 8007734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007736:	07db      	lsls	r3, r3, #31
 8007738:	d405      	bmi.n	8007746 <_puts_r+0x36>
 800773a:	89a3      	ldrh	r3, [r4, #12]
 800773c:	0598      	lsls	r0, r3, #22
 800773e:	d402      	bmi.n	8007746 <_puts_r+0x36>
 8007740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007742:	f000 fb03 	bl	8007d4c <__retarget_lock_acquire_recursive>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	0719      	lsls	r1, r3, #28
 800774a:	d51d      	bpl.n	8007788 <_puts_r+0x78>
 800774c:	6923      	ldr	r3, [r4, #16]
 800774e:	b1db      	cbz	r3, 8007788 <_puts_r+0x78>
 8007750:	3e01      	subs	r6, #1
 8007752:	68a3      	ldr	r3, [r4, #8]
 8007754:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007758:	3b01      	subs	r3, #1
 800775a:	60a3      	str	r3, [r4, #8]
 800775c:	bb39      	cbnz	r1, 80077ae <_puts_r+0x9e>
 800775e:	2b00      	cmp	r3, #0
 8007760:	da38      	bge.n	80077d4 <_puts_r+0xc4>
 8007762:	4622      	mov	r2, r4
 8007764:	210a      	movs	r1, #10
 8007766:	4628      	mov	r0, r5
 8007768:	f000 f87c 	bl	8007864 <__swbuf_r>
 800776c:	3001      	adds	r0, #1
 800776e:	d011      	beq.n	8007794 <_puts_r+0x84>
 8007770:	250a      	movs	r5, #10
 8007772:	e011      	b.n	8007798 <_puts_r+0x88>
 8007774:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <_puts_r+0xd4>)
 8007776:	429c      	cmp	r4, r3
 8007778:	d101      	bne.n	800777e <_puts_r+0x6e>
 800777a:	68ac      	ldr	r4, [r5, #8]
 800777c:	e7da      	b.n	8007734 <_puts_r+0x24>
 800777e:	4b1a      	ldr	r3, [pc, #104]	; (80077e8 <_puts_r+0xd8>)
 8007780:	429c      	cmp	r4, r3
 8007782:	bf08      	it	eq
 8007784:	68ec      	ldreq	r4, [r5, #12]
 8007786:	e7d5      	b.n	8007734 <_puts_r+0x24>
 8007788:	4621      	mov	r1, r4
 800778a:	4628      	mov	r0, r5
 800778c:	f000 f8bc 	bl	8007908 <__swsetup_r>
 8007790:	2800      	cmp	r0, #0
 8007792:	d0dd      	beq.n	8007750 <_puts_r+0x40>
 8007794:	f04f 35ff 	mov.w	r5, #4294967295
 8007798:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800779a:	07da      	lsls	r2, r3, #31
 800779c:	d405      	bmi.n	80077aa <_puts_r+0x9a>
 800779e:	89a3      	ldrh	r3, [r4, #12]
 80077a0:	059b      	lsls	r3, r3, #22
 80077a2:	d402      	bmi.n	80077aa <_puts_r+0x9a>
 80077a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077a6:	f000 fad2 	bl	8007d4e <__retarget_lock_release_recursive>
 80077aa:	4628      	mov	r0, r5
 80077ac:	bd70      	pop	{r4, r5, r6, pc}
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	da04      	bge.n	80077bc <_puts_r+0xac>
 80077b2:	69a2      	ldr	r2, [r4, #24]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	dc06      	bgt.n	80077c6 <_puts_r+0xb6>
 80077b8:	290a      	cmp	r1, #10
 80077ba:	d004      	beq.n	80077c6 <_puts_r+0xb6>
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	1c5a      	adds	r2, r3, #1
 80077c0:	6022      	str	r2, [r4, #0]
 80077c2:	7019      	strb	r1, [r3, #0]
 80077c4:	e7c5      	b.n	8007752 <_puts_r+0x42>
 80077c6:	4622      	mov	r2, r4
 80077c8:	4628      	mov	r0, r5
 80077ca:	f000 f84b 	bl	8007864 <__swbuf_r>
 80077ce:	3001      	adds	r0, #1
 80077d0:	d1bf      	bne.n	8007752 <_puts_r+0x42>
 80077d2:	e7df      	b.n	8007794 <_puts_r+0x84>
 80077d4:	250a      	movs	r5, #10
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	6022      	str	r2, [r4, #0]
 80077dc:	701d      	strb	r5, [r3, #0]
 80077de:	e7db      	b.n	8007798 <_puts_r+0x88>
 80077e0:	0800ab60 	.word	0x0800ab60
 80077e4:	0800ab80 	.word	0x0800ab80
 80077e8:	0800ab40 	.word	0x0800ab40

080077ec <puts>:
 80077ec:	4b02      	ldr	r3, [pc, #8]	; (80077f8 <puts+0xc>)
 80077ee:	4601      	mov	r1, r0
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	f7ff bf8d 	b.w	8007710 <_puts_r>
 80077f6:	bf00      	nop
 80077f8:	20000420 	.word	0x20000420

080077fc <siprintf>:
 80077fc:	b40e      	push	{r1, r2, r3}
 80077fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007802:	b500      	push	{lr}
 8007804:	b09c      	sub	sp, #112	; 0x70
 8007806:	ab1d      	add	r3, sp, #116	; 0x74
 8007808:	9002      	str	r0, [sp, #8]
 800780a:	9006      	str	r0, [sp, #24]
 800780c:	9107      	str	r1, [sp, #28]
 800780e:	9104      	str	r1, [sp, #16]
 8007810:	4808      	ldr	r0, [pc, #32]	; (8007834 <siprintf+0x38>)
 8007812:	4909      	ldr	r1, [pc, #36]	; (8007838 <siprintf+0x3c>)
 8007814:	f853 2b04 	ldr.w	r2, [r3], #4
 8007818:	9105      	str	r1, [sp, #20]
 800781a:	6800      	ldr	r0, [r0, #0]
 800781c:	a902      	add	r1, sp, #8
 800781e:	9301      	str	r3, [sp, #4]
 8007820:	f000 fc34 	bl	800808c <_svfiprintf_r>
 8007824:	2200      	movs	r2, #0
 8007826:	9b02      	ldr	r3, [sp, #8]
 8007828:	701a      	strb	r2, [r3, #0]
 800782a:	b01c      	add	sp, #112	; 0x70
 800782c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007830:	b003      	add	sp, #12
 8007832:	4770      	bx	lr
 8007834:	20000420 	.word	0x20000420
 8007838:	ffff0208 	.word	0xffff0208

0800783c <strncmp>:
 800783c:	4603      	mov	r3, r0
 800783e:	b510      	push	{r4, lr}
 8007840:	b172      	cbz	r2, 8007860 <strncmp+0x24>
 8007842:	3901      	subs	r1, #1
 8007844:	1884      	adds	r4, r0, r2
 8007846:	f813 0b01 	ldrb.w	r0, [r3], #1
 800784a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800784e:	4290      	cmp	r0, r2
 8007850:	d101      	bne.n	8007856 <strncmp+0x1a>
 8007852:	42a3      	cmp	r3, r4
 8007854:	d101      	bne.n	800785a <strncmp+0x1e>
 8007856:	1a80      	subs	r0, r0, r2
 8007858:	bd10      	pop	{r4, pc}
 800785a:	2800      	cmp	r0, #0
 800785c:	d1f3      	bne.n	8007846 <strncmp+0xa>
 800785e:	e7fa      	b.n	8007856 <strncmp+0x1a>
 8007860:	4610      	mov	r0, r2
 8007862:	e7f9      	b.n	8007858 <strncmp+0x1c>

08007864 <__swbuf_r>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	460e      	mov	r6, r1
 8007868:	4614      	mov	r4, r2
 800786a:	4605      	mov	r5, r0
 800786c:	b118      	cbz	r0, 8007876 <__swbuf_r+0x12>
 800786e:	6983      	ldr	r3, [r0, #24]
 8007870:	b90b      	cbnz	r3, 8007876 <__swbuf_r+0x12>
 8007872:	f000 f9cd 	bl	8007c10 <__sinit>
 8007876:	4b21      	ldr	r3, [pc, #132]	; (80078fc <__swbuf_r+0x98>)
 8007878:	429c      	cmp	r4, r3
 800787a:	d12b      	bne.n	80078d4 <__swbuf_r+0x70>
 800787c:	686c      	ldr	r4, [r5, #4]
 800787e:	69a3      	ldr	r3, [r4, #24]
 8007880:	60a3      	str	r3, [r4, #8]
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	071a      	lsls	r2, r3, #28
 8007886:	d52f      	bpl.n	80078e8 <__swbuf_r+0x84>
 8007888:	6923      	ldr	r3, [r4, #16]
 800788a:	b36b      	cbz	r3, 80078e8 <__swbuf_r+0x84>
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	6820      	ldr	r0, [r4, #0]
 8007890:	b2f6      	uxtb	r6, r6
 8007892:	1ac0      	subs	r0, r0, r3
 8007894:	6963      	ldr	r3, [r4, #20]
 8007896:	4637      	mov	r7, r6
 8007898:	4283      	cmp	r3, r0
 800789a:	dc04      	bgt.n	80078a6 <__swbuf_r+0x42>
 800789c:	4621      	mov	r1, r4
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 f922 	bl	8007ae8 <_fflush_r>
 80078a4:	bb30      	cbnz	r0, 80078f4 <__swbuf_r+0x90>
 80078a6:	68a3      	ldr	r3, [r4, #8]
 80078a8:	3001      	adds	r0, #1
 80078aa:	3b01      	subs	r3, #1
 80078ac:	60a3      	str	r3, [r4, #8]
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	6022      	str	r2, [r4, #0]
 80078b4:	701e      	strb	r6, [r3, #0]
 80078b6:	6963      	ldr	r3, [r4, #20]
 80078b8:	4283      	cmp	r3, r0
 80078ba:	d004      	beq.n	80078c6 <__swbuf_r+0x62>
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	07db      	lsls	r3, r3, #31
 80078c0:	d506      	bpl.n	80078d0 <__swbuf_r+0x6c>
 80078c2:	2e0a      	cmp	r6, #10
 80078c4:	d104      	bne.n	80078d0 <__swbuf_r+0x6c>
 80078c6:	4621      	mov	r1, r4
 80078c8:	4628      	mov	r0, r5
 80078ca:	f000 f90d 	bl	8007ae8 <_fflush_r>
 80078ce:	b988      	cbnz	r0, 80078f4 <__swbuf_r+0x90>
 80078d0:	4638      	mov	r0, r7
 80078d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d4:	4b0a      	ldr	r3, [pc, #40]	; (8007900 <__swbuf_r+0x9c>)
 80078d6:	429c      	cmp	r4, r3
 80078d8:	d101      	bne.n	80078de <__swbuf_r+0x7a>
 80078da:	68ac      	ldr	r4, [r5, #8]
 80078dc:	e7cf      	b.n	800787e <__swbuf_r+0x1a>
 80078de:	4b09      	ldr	r3, [pc, #36]	; (8007904 <__swbuf_r+0xa0>)
 80078e0:	429c      	cmp	r4, r3
 80078e2:	bf08      	it	eq
 80078e4:	68ec      	ldreq	r4, [r5, #12]
 80078e6:	e7ca      	b.n	800787e <__swbuf_r+0x1a>
 80078e8:	4621      	mov	r1, r4
 80078ea:	4628      	mov	r0, r5
 80078ec:	f000 f80c 	bl	8007908 <__swsetup_r>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d0cb      	beq.n	800788c <__swbuf_r+0x28>
 80078f4:	f04f 37ff 	mov.w	r7, #4294967295
 80078f8:	e7ea      	b.n	80078d0 <__swbuf_r+0x6c>
 80078fa:	bf00      	nop
 80078fc:	0800ab60 	.word	0x0800ab60
 8007900:	0800ab80 	.word	0x0800ab80
 8007904:	0800ab40 	.word	0x0800ab40

08007908 <__swsetup_r>:
 8007908:	4b32      	ldr	r3, [pc, #200]	; (80079d4 <__swsetup_r+0xcc>)
 800790a:	b570      	push	{r4, r5, r6, lr}
 800790c:	681d      	ldr	r5, [r3, #0]
 800790e:	4606      	mov	r6, r0
 8007910:	460c      	mov	r4, r1
 8007912:	b125      	cbz	r5, 800791e <__swsetup_r+0x16>
 8007914:	69ab      	ldr	r3, [r5, #24]
 8007916:	b913      	cbnz	r3, 800791e <__swsetup_r+0x16>
 8007918:	4628      	mov	r0, r5
 800791a:	f000 f979 	bl	8007c10 <__sinit>
 800791e:	4b2e      	ldr	r3, [pc, #184]	; (80079d8 <__swsetup_r+0xd0>)
 8007920:	429c      	cmp	r4, r3
 8007922:	d10f      	bne.n	8007944 <__swsetup_r+0x3c>
 8007924:	686c      	ldr	r4, [r5, #4]
 8007926:	89a3      	ldrh	r3, [r4, #12]
 8007928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800792c:	0719      	lsls	r1, r3, #28
 800792e:	d42c      	bmi.n	800798a <__swsetup_r+0x82>
 8007930:	06dd      	lsls	r5, r3, #27
 8007932:	d411      	bmi.n	8007958 <__swsetup_r+0x50>
 8007934:	2309      	movs	r3, #9
 8007936:	6033      	str	r3, [r6, #0]
 8007938:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800793c:	f04f 30ff 	mov.w	r0, #4294967295
 8007940:	81a3      	strh	r3, [r4, #12]
 8007942:	e03e      	b.n	80079c2 <__swsetup_r+0xba>
 8007944:	4b25      	ldr	r3, [pc, #148]	; (80079dc <__swsetup_r+0xd4>)
 8007946:	429c      	cmp	r4, r3
 8007948:	d101      	bne.n	800794e <__swsetup_r+0x46>
 800794a:	68ac      	ldr	r4, [r5, #8]
 800794c:	e7eb      	b.n	8007926 <__swsetup_r+0x1e>
 800794e:	4b24      	ldr	r3, [pc, #144]	; (80079e0 <__swsetup_r+0xd8>)
 8007950:	429c      	cmp	r4, r3
 8007952:	bf08      	it	eq
 8007954:	68ec      	ldreq	r4, [r5, #12]
 8007956:	e7e6      	b.n	8007926 <__swsetup_r+0x1e>
 8007958:	0758      	lsls	r0, r3, #29
 800795a:	d512      	bpl.n	8007982 <__swsetup_r+0x7a>
 800795c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800795e:	b141      	cbz	r1, 8007972 <__swsetup_r+0x6a>
 8007960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007964:	4299      	cmp	r1, r3
 8007966:	d002      	beq.n	800796e <__swsetup_r+0x66>
 8007968:	4630      	mov	r0, r6
 800796a:	f000 fa57 	bl	8007e1c <_free_r>
 800796e:	2300      	movs	r3, #0
 8007970:	6363      	str	r3, [r4, #52]	; 0x34
 8007972:	89a3      	ldrh	r3, [r4, #12]
 8007974:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007978:	81a3      	strh	r3, [r4, #12]
 800797a:	2300      	movs	r3, #0
 800797c:	6063      	str	r3, [r4, #4]
 800797e:	6923      	ldr	r3, [r4, #16]
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	f043 0308 	orr.w	r3, r3, #8
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	b94b      	cbnz	r3, 80079a2 <__swsetup_r+0x9a>
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007998:	d003      	beq.n	80079a2 <__swsetup_r+0x9a>
 800799a:	4621      	mov	r1, r4
 800799c:	4630      	mov	r0, r6
 800799e:	f000 f9fd 	bl	8007d9c <__smakebuf_r>
 80079a2:	89a0      	ldrh	r0, [r4, #12]
 80079a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079a8:	f010 0301 	ands.w	r3, r0, #1
 80079ac:	d00a      	beq.n	80079c4 <__swsetup_r+0xbc>
 80079ae:	2300      	movs	r3, #0
 80079b0:	60a3      	str	r3, [r4, #8]
 80079b2:	6963      	ldr	r3, [r4, #20]
 80079b4:	425b      	negs	r3, r3
 80079b6:	61a3      	str	r3, [r4, #24]
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	b943      	cbnz	r3, 80079ce <__swsetup_r+0xc6>
 80079bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079c0:	d1ba      	bne.n	8007938 <__swsetup_r+0x30>
 80079c2:	bd70      	pop	{r4, r5, r6, pc}
 80079c4:	0781      	lsls	r1, r0, #30
 80079c6:	bf58      	it	pl
 80079c8:	6963      	ldrpl	r3, [r4, #20]
 80079ca:	60a3      	str	r3, [r4, #8]
 80079cc:	e7f4      	b.n	80079b8 <__swsetup_r+0xb0>
 80079ce:	2000      	movs	r0, #0
 80079d0:	e7f7      	b.n	80079c2 <__swsetup_r+0xba>
 80079d2:	bf00      	nop
 80079d4:	20000420 	.word	0x20000420
 80079d8:	0800ab60 	.word	0x0800ab60
 80079dc:	0800ab80 	.word	0x0800ab80
 80079e0:	0800ab40 	.word	0x0800ab40

080079e4 <__sflush_r>:
 80079e4:	898a      	ldrh	r2, [r1, #12]
 80079e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e8:	4605      	mov	r5, r0
 80079ea:	0710      	lsls	r0, r2, #28
 80079ec:	460c      	mov	r4, r1
 80079ee:	d457      	bmi.n	8007aa0 <__sflush_r+0xbc>
 80079f0:	684b      	ldr	r3, [r1, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dc04      	bgt.n	8007a00 <__sflush_r+0x1c>
 80079f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	dc01      	bgt.n	8007a00 <__sflush_r+0x1c>
 80079fc:	2000      	movs	r0, #0
 80079fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a02:	2e00      	cmp	r6, #0
 8007a04:	d0fa      	beq.n	80079fc <__sflush_r+0x18>
 8007a06:	2300      	movs	r3, #0
 8007a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a0c:	682f      	ldr	r7, [r5, #0]
 8007a0e:	602b      	str	r3, [r5, #0]
 8007a10:	d032      	beq.n	8007a78 <__sflush_r+0x94>
 8007a12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	075a      	lsls	r2, r3, #29
 8007a18:	d505      	bpl.n	8007a26 <__sflush_r+0x42>
 8007a1a:	6863      	ldr	r3, [r4, #4]
 8007a1c:	1ac0      	subs	r0, r0, r3
 8007a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a20:	b10b      	cbz	r3, 8007a26 <__sflush_r+0x42>
 8007a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a24:	1ac0      	subs	r0, r0, r3
 8007a26:	2300      	movs	r3, #0
 8007a28:	4602      	mov	r2, r0
 8007a2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	6a21      	ldr	r1, [r4, #32]
 8007a30:	47b0      	blx	r6
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	d106      	bne.n	8007a46 <__sflush_r+0x62>
 8007a38:	6829      	ldr	r1, [r5, #0]
 8007a3a:	291d      	cmp	r1, #29
 8007a3c:	d82c      	bhi.n	8007a98 <__sflush_r+0xb4>
 8007a3e:	4a29      	ldr	r2, [pc, #164]	; (8007ae4 <__sflush_r+0x100>)
 8007a40:	40ca      	lsrs	r2, r1
 8007a42:	07d6      	lsls	r6, r2, #31
 8007a44:	d528      	bpl.n	8007a98 <__sflush_r+0xb4>
 8007a46:	2200      	movs	r2, #0
 8007a48:	6062      	str	r2, [r4, #4]
 8007a4a:	6922      	ldr	r2, [r4, #16]
 8007a4c:	04d9      	lsls	r1, r3, #19
 8007a4e:	6022      	str	r2, [r4, #0]
 8007a50:	d504      	bpl.n	8007a5c <__sflush_r+0x78>
 8007a52:	1c42      	adds	r2, r0, #1
 8007a54:	d101      	bne.n	8007a5a <__sflush_r+0x76>
 8007a56:	682b      	ldr	r3, [r5, #0]
 8007a58:	b903      	cbnz	r3, 8007a5c <__sflush_r+0x78>
 8007a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8007a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a5e:	602f      	str	r7, [r5, #0]
 8007a60:	2900      	cmp	r1, #0
 8007a62:	d0cb      	beq.n	80079fc <__sflush_r+0x18>
 8007a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	d002      	beq.n	8007a72 <__sflush_r+0x8e>
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f000 f9d5 	bl	8007e1c <_free_r>
 8007a72:	2000      	movs	r0, #0
 8007a74:	6360      	str	r0, [r4, #52]	; 0x34
 8007a76:	e7c2      	b.n	80079fe <__sflush_r+0x1a>
 8007a78:	6a21      	ldr	r1, [r4, #32]
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	47b0      	blx	r6
 8007a80:	1c41      	adds	r1, r0, #1
 8007a82:	d1c7      	bne.n	8007a14 <__sflush_r+0x30>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0c4      	beq.n	8007a14 <__sflush_r+0x30>
 8007a8a:	2b1d      	cmp	r3, #29
 8007a8c:	d001      	beq.n	8007a92 <__sflush_r+0xae>
 8007a8e:	2b16      	cmp	r3, #22
 8007a90:	d101      	bne.n	8007a96 <__sflush_r+0xb2>
 8007a92:	602f      	str	r7, [r5, #0]
 8007a94:	e7b2      	b.n	80079fc <__sflush_r+0x18>
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a9c:	81a3      	strh	r3, [r4, #12]
 8007a9e:	e7ae      	b.n	80079fe <__sflush_r+0x1a>
 8007aa0:	690f      	ldr	r7, [r1, #16]
 8007aa2:	2f00      	cmp	r7, #0
 8007aa4:	d0aa      	beq.n	80079fc <__sflush_r+0x18>
 8007aa6:	0793      	lsls	r3, r2, #30
 8007aa8:	bf18      	it	ne
 8007aaa:	2300      	movne	r3, #0
 8007aac:	680e      	ldr	r6, [r1, #0]
 8007aae:	bf08      	it	eq
 8007ab0:	694b      	ldreq	r3, [r1, #20]
 8007ab2:	1bf6      	subs	r6, r6, r7
 8007ab4:	600f      	str	r7, [r1, #0]
 8007ab6:	608b      	str	r3, [r1, #8]
 8007ab8:	2e00      	cmp	r6, #0
 8007aba:	dd9f      	ble.n	80079fc <__sflush_r+0x18>
 8007abc:	4633      	mov	r3, r6
 8007abe:	463a      	mov	r2, r7
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	6a21      	ldr	r1, [r4, #32]
 8007ac4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007ac8:	47e0      	blx	ip
 8007aca:	2800      	cmp	r0, #0
 8007acc:	dc06      	bgt.n	8007adc <__sflush_r+0xf8>
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad8:	81a3      	strh	r3, [r4, #12]
 8007ada:	e790      	b.n	80079fe <__sflush_r+0x1a>
 8007adc:	4407      	add	r7, r0
 8007ade:	1a36      	subs	r6, r6, r0
 8007ae0:	e7ea      	b.n	8007ab8 <__sflush_r+0xd4>
 8007ae2:	bf00      	nop
 8007ae4:	20400001 	.word	0x20400001

08007ae8 <_fflush_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	690b      	ldr	r3, [r1, #16]
 8007aec:	4605      	mov	r5, r0
 8007aee:	460c      	mov	r4, r1
 8007af0:	b913      	cbnz	r3, 8007af8 <_fflush_r+0x10>
 8007af2:	2500      	movs	r5, #0
 8007af4:	4628      	mov	r0, r5
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	b118      	cbz	r0, 8007b02 <_fflush_r+0x1a>
 8007afa:	6983      	ldr	r3, [r0, #24]
 8007afc:	b90b      	cbnz	r3, 8007b02 <_fflush_r+0x1a>
 8007afe:	f000 f887 	bl	8007c10 <__sinit>
 8007b02:	4b14      	ldr	r3, [pc, #80]	; (8007b54 <_fflush_r+0x6c>)
 8007b04:	429c      	cmp	r4, r3
 8007b06:	d11b      	bne.n	8007b40 <_fflush_r+0x58>
 8007b08:	686c      	ldr	r4, [r5, #4]
 8007b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0ef      	beq.n	8007af2 <_fflush_r+0xa>
 8007b12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b14:	07d0      	lsls	r0, r2, #31
 8007b16:	d404      	bmi.n	8007b22 <_fflush_r+0x3a>
 8007b18:	0599      	lsls	r1, r3, #22
 8007b1a:	d402      	bmi.n	8007b22 <_fflush_r+0x3a>
 8007b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1e:	f000 f915 	bl	8007d4c <__retarget_lock_acquire_recursive>
 8007b22:	4628      	mov	r0, r5
 8007b24:	4621      	mov	r1, r4
 8007b26:	f7ff ff5d 	bl	80079e4 <__sflush_r>
 8007b2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	07da      	lsls	r2, r3, #31
 8007b30:	d4e0      	bmi.n	8007af4 <_fflush_r+0xc>
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	059b      	lsls	r3, r3, #22
 8007b36:	d4dd      	bmi.n	8007af4 <_fflush_r+0xc>
 8007b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b3a:	f000 f908 	bl	8007d4e <__retarget_lock_release_recursive>
 8007b3e:	e7d9      	b.n	8007af4 <_fflush_r+0xc>
 8007b40:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <_fflush_r+0x70>)
 8007b42:	429c      	cmp	r4, r3
 8007b44:	d101      	bne.n	8007b4a <_fflush_r+0x62>
 8007b46:	68ac      	ldr	r4, [r5, #8]
 8007b48:	e7df      	b.n	8007b0a <_fflush_r+0x22>
 8007b4a:	4b04      	ldr	r3, [pc, #16]	; (8007b5c <_fflush_r+0x74>)
 8007b4c:	429c      	cmp	r4, r3
 8007b4e:	bf08      	it	eq
 8007b50:	68ec      	ldreq	r4, [r5, #12]
 8007b52:	e7da      	b.n	8007b0a <_fflush_r+0x22>
 8007b54:	0800ab60 	.word	0x0800ab60
 8007b58:	0800ab80 	.word	0x0800ab80
 8007b5c:	0800ab40 	.word	0x0800ab40

08007b60 <std>:
 8007b60:	2300      	movs	r3, #0
 8007b62:	b510      	push	{r4, lr}
 8007b64:	4604      	mov	r4, r0
 8007b66:	e9c0 3300 	strd	r3, r3, [r0]
 8007b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b6e:	6083      	str	r3, [r0, #8]
 8007b70:	8181      	strh	r1, [r0, #12]
 8007b72:	6643      	str	r3, [r0, #100]	; 0x64
 8007b74:	81c2      	strh	r2, [r0, #14]
 8007b76:	6183      	str	r3, [r0, #24]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	2208      	movs	r2, #8
 8007b7c:	305c      	adds	r0, #92	; 0x5c
 8007b7e:	f7ff fda7 	bl	80076d0 <memset>
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <std+0x38>)
 8007b84:	6224      	str	r4, [r4, #32]
 8007b86:	6263      	str	r3, [r4, #36]	; 0x24
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <std+0x3c>)
 8007b8a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b8c:	4b04      	ldr	r3, [pc, #16]	; (8007ba0 <std+0x40>)
 8007b8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b90:	4b04      	ldr	r3, [pc, #16]	; (8007ba4 <std+0x44>)
 8007b92:	6323      	str	r3, [r4, #48]	; 0x30
 8007b94:	bd10      	pop	{r4, pc}
 8007b96:	bf00      	nop
 8007b98:	08008889 	.word	0x08008889
 8007b9c:	080088ab 	.word	0x080088ab
 8007ba0:	080088e3 	.word	0x080088e3
 8007ba4:	08008907 	.word	0x08008907

08007ba8 <_cleanup_r>:
 8007ba8:	4901      	ldr	r1, [pc, #4]	; (8007bb0 <_cleanup_r+0x8>)
 8007baa:	f000 b8af 	b.w	8007d0c <_fwalk_reent>
 8007bae:	bf00      	nop
 8007bb0:	08007ae9 	.word	0x08007ae9

08007bb4 <__sfmoreglue>:
 8007bb4:	2268      	movs	r2, #104	; 0x68
 8007bb6:	b570      	push	{r4, r5, r6, lr}
 8007bb8:	1e4d      	subs	r5, r1, #1
 8007bba:	4355      	muls	r5, r2
 8007bbc:	460e      	mov	r6, r1
 8007bbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bc2:	f000 f993 	bl	8007eec <_malloc_r>
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	b140      	cbz	r0, 8007bdc <__sfmoreglue+0x28>
 8007bca:	2100      	movs	r1, #0
 8007bcc:	e9c0 1600 	strd	r1, r6, [r0]
 8007bd0:	300c      	adds	r0, #12
 8007bd2:	60a0      	str	r0, [r4, #8]
 8007bd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bd8:	f7ff fd7a 	bl	80076d0 <memset>
 8007bdc:	4620      	mov	r0, r4
 8007bde:	bd70      	pop	{r4, r5, r6, pc}

08007be0 <__sfp_lock_acquire>:
 8007be0:	4801      	ldr	r0, [pc, #4]	; (8007be8 <__sfp_lock_acquire+0x8>)
 8007be2:	f000 b8b3 	b.w	8007d4c <__retarget_lock_acquire_recursive>
 8007be6:	bf00      	nop
 8007be8:	20000dc1 	.word	0x20000dc1

08007bec <__sfp_lock_release>:
 8007bec:	4801      	ldr	r0, [pc, #4]	; (8007bf4 <__sfp_lock_release+0x8>)
 8007bee:	f000 b8ae 	b.w	8007d4e <__retarget_lock_release_recursive>
 8007bf2:	bf00      	nop
 8007bf4:	20000dc1 	.word	0x20000dc1

08007bf8 <__sinit_lock_acquire>:
 8007bf8:	4801      	ldr	r0, [pc, #4]	; (8007c00 <__sinit_lock_acquire+0x8>)
 8007bfa:	f000 b8a7 	b.w	8007d4c <__retarget_lock_acquire_recursive>
 8007bfe:	bf00      	nop
 8007c00:	20000dc2 	.word	0x20000dc2

08007c04 <__sinit_lock_release>:
 8007c04:	4801      	ldr	r0, [pc, #4]	; (8007c0c <__sinit_lock_release+0x8>)
 8007c06:	f000 b8a2 	b.w	8007d4e <__retarget_lock_release_recursive>
 8007c0a:	bf00      	nop
 8007c0c:	20000dc2 	.word	0x20000dc2

08007c10 <__sinit>:
 8007c10:	b510      	push	{r4, lr}
 8007c12:	4604      	mov	r4, r0
 8007c14:	f7ff fff0 	bl	8007bf8 <__sinit_lock_acquire>
 8007c18:	69a3      	ldr	r3, [r4, #24]
 8007c1a:	b11b      	cbz	r3, 8007c24 <__sinit+0x14>
 8007c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c20:	f7ff bff0 	b.w	8007c04 <__sinit_lock_release>
 8007c24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c28:	6523      	str	r3, [r4, #80]	; 0x50
 8007c2a:	4b13      	ldr	r3, [pc, #76]	; (8007c78 <__sinit+0x68>)
 8007c2c:	4a13      	ldr	r2, [pc, #76]	; (8007c7c <__sinit+0x6c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c32:	42a3      	cmp	r3, r4
 8007c34:	bf08      	it	eq
 8007c36:	2301      	moveq	r3, #1
 8007c38:	4620      	mov	r0, r4
 8007c3a:	bf08      	it	eq
 8007c3c:	61a3      	streq	r3, [r4, #24]
 8007c3e:	f000 f81f 	bl	8007c80 <__sfp>
 8007c42:	6060      	str	r0, [r4, #4]
 8007c44:	4620      	mov	r0, r4
 8007c46:	f000 f81b 	bl	8007c80 <__sfp>
 8007c4a:	60a0      	str	r0, [r4, #8]
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 f817 	bl	8007c80 <__sfp>
 8007c52:	2200      	movs	r2, #0
 8007c54:	2104      	movs	r1, #4
 8007c56:	60e0      	str	r0, [r4, #12]
 8007c58:	6860      	ldr	r0, [r4, #4]
 8007c5a:	f7ff ff81 	bl	8007b60 <std>
 8007c5e:	2201      	movs	r2, #1
 8007c60:	2109      	movs	r1, #9
 8007c62:	68a0      	ldr	r0, [r4, #8]
 8007c64:	f7ff ff7c 	bl	8007b60 <std>
 8007c68:	2202      	movs	r2, #2
 8007c6a:	2112      	movs	r1, #18
 8007c6c:	68e0      	ldr	r0, [r4, #12]
 8007c6e:	f7ff ff77 	bl	8007b60 <std>
 8007c72:	2301      	movs	r3, #1
 8007c74:	61a3      	str	r3, [r4, #24]
 8007c76:	e7d1      	b.n	8007c1c <__sinit+0xc>
 8007c78:	0800ab3c 	.word	0x0800ab3c
 8007c7c:	08007ba9 	.word	0x08007ba9

08007c80 <__sfp>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	4607      	mov	r7, r0
 8007c84:	f7ff ffac 	bl	8007be0 <__sfp_lock_acquire>
 8007c88:	4b1e      	ldr	r3, [pc, #120]	; (8007d04 <__sfp+0x84>)
 8007c8a:	681e      	ldr	r6, [r3, #0]
 8007c8c:	69b3      	ldr	r3, [r6, #24]
 8007c8e:	b913      	cbnz	r3, 8007c96 <__sfp+0x16>
 8007c90:	4630      	mov	r0, r6
 8007c92:	f7ff ffbd 	bl	8007c10 <__sinit>
 8007c96:	3648      	adds	r6, #72	; 0x48
 8007c98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	d503      	bpl.n	8007ca8 <__sfp+0x28>
 8007ca0:	6833      	ldr	r3, [r6, #0]
 8007ca2:	b30b      	cbz	r3, 8007ce8 <__sfp+0x68>
 8007ca4:	6836      	ldr	r6, [r6, #0]
 8007ca6:	e7f7      	b.n	8007c98 <__sfp+0x18>
 8007ca8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cac:	b9d5      	cbnz	r5, 8007ce4 <__sfp+0x64>
 8007cae:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <__sfp+0x88>)
 8007cb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cb4:	60e3      	str	r3, [r4, #12]
 8007cb6:	6665      	str	r5, [r4, #100]	; 0x64
 8007cb8:	f000 f847 	bl	8007d4a <__retarget_lock_init_recursive>
 8007cbc:	f7ff ff96 	bl	8007bec <__sfp_lock_release>
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ccc:	6025      	str	r5, [r4, #0]
 8007cce:	61a5      	str	r5, [r4, #24]
 8007cd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cd4:	f7ff fcfc 	bl	80076d0 <memset>
 8007cd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce4:	3468      	adds	r4, #104	; 0x68
 8007ce6:	e7d9      	b.n	8007c9c <__sfp+0x1c>
 8007ce8:	2104      	movs	r1, #4
 8007cea:	4638      	mov	r0, r7
 8007cec:	f7ff ff62 	bl	8007bb4 <__sfmoreglue>
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	6030      	str	r0, [r6, #0]
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	d1d5      	bne.n	8007ca4 <__sfp+0x24>
 8007cf8:	f7ff ff78 	bl	8007bec <__sfp_lock_release>
 8007cfc:	230c      	movs	r3, #12
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	e7ee      	b.n	8007ce0 <__sfp+0x60>
 8007d02:	bf00      	nop
 8007d04:	0800ab3c 	.word	0x0800ab3c
 8007d08:	ffff0001 	.word	0xffff0001

08007d0c <_fwalk_reent>:
 8007d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d10:	4606      	mov	r6, r0
 8007d12:	4688      	mov	r8, r1
 8007d14:	2700      	movs	r7, #0
 8007d16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d1e:	f1b9 0901 	subs.w	r9, r9, #1
 8007d22:	d505      	bpl.n	8007d30 <_fwalk_reent+0x24>
 8007d24:	6824      	ldr	r4, [r4, #0]
 8007d26:	2c00      	cmp	r4, #0
 8007d28:	d1f7      	bne.n	8007d1a <_fwalk_reent+0xe>
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d30:	89ab      	ldrh	r3, [r5, #12]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d907      	bls.n	8007d46 <_fwalk_reent+0x3a>
 8007d36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	d003      	beq.n	8007d46 <_fwalk_reent+0x3a>
 8007d3e:	4629      	mov	r1, r5
 8007d40:	4630      	mov	r0, r6
 8007d42:	47c0      	blx	r8
 8007d44:	4307      	orrs	r7, r0
 8007d46:	3568      	adds	r5, #104	; 0x68
 8007d48:	e7e9      	b.n	8007d1e <_fwalk_reent+0x12>

08007d4a <__retarget_lock_init_recursive>:
 8007d4a:	4770      	bx	lr

08007d4c <__retarget_lock_acquire_recursive>:
 8007d4c:	4770      	bx	lr

08007d4e <__retarget_lock_release_recursive>:
 8007d4e:	4770      	bx	lr

08007d50 <__swhatbuf_r>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	460e      	mov	r6, r1
 8007d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d58:	4614      	mov	r4, r2
 8007d5a:	2900      	cmp	r1, #0
 8007d5c:	461d      	mov	r5, r3
 8007d5e:	b096      	sub	sp, #88	; 0x58
 8007d60:	da08      	bge.n	8007d74 <__swhatbuf_r+0x24>
 8007d62:	2200      	movs	r2, #0
 8007d64:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d68:	602a      	str	r2, [r5, #0]
 8007d6a:	061a      	lsls	r2, r3, #24
 8007d6c:	d410      	bmi.n	8007d90 <__swhatbuf_r+0x40>
 8007d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d72:	e00e      	b.n	8007d92 <__swhatbuf_r+0x42>
 8007d74:	466a      	mov	r2, sp
 8007d76:	f000 fded 	bl	8008954 <_fstat_r>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	dbf1      	blt.n	8007d62 <__swhatbuf_r+0x12>
 8007d7e:	9a01      	ldr	r2, [sp, #4]
 8007d80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d88:	425a      	negs	r2, r3
 8007d8a:	415a      	adcs	r2, r3
 8007d8c:	602a      	str	r2, [r5, #0]
 8007d8e:	e7ee      	b.n	8007d6e <__swhatbuf_r+0x1e>
 8007d90:	2340      	movs	r3, #64	; 0x40
 8007d92:	2000      	movs	r0, #0
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	b016      	add	sp, #88	; 0x58
 8007d98:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d9c <__smakebuf_r>:
 8007d9c:	898b      	ldrh	r3, [r1, #12]
 8007d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007da0:	079d      	lsls	r5, r3, #30
 8007da2:	4606      	mov	r6, r0
 8007da4:	460c      	mov	r4, r1
 8007da6:	d507      	bpl.n	8007db8 <__smakebuf_r+0x1c>
 8007da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	6123      	str	r3, [r4, #16]
 8007db0:	2301      	movs	r3, #1
 8007db2:	6163      	str	r3, [r4, #20]
 8007db4:	b002      	add	sp, #8
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	466a      	mov	r2, sp
 8007dba:	ab01      	add	r3, sp, #4
 8007dbc:	f7ff ffc8 	bl	8007d50 <__swhatbuf_r>
 8007dc0:	9900      	ldr	r1, [sp, #0]
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f000 f891 	bl	8007eec <_malloc_r>
 8007dca:	b948      	cbnz	r0, 8007de0 <__smakebuf_r+0x44>
 8007dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd0:	059a      	lsls	r2, r3, #22
 8007dd2:	d4ef      	bmi.n	8007db4 <__smakebuf_r+0x18>
 8007dd4:	f023 0303 	bic.w	r3, r3, #3
 8007dd8:	f043 0302 	orr.w	r3, r3, #2
 8007ddc:	81a3      	strh	r3, [r4, #12]
 8007dde:	e7e3      	b.n	8007da8 <__smakebuf_r+0xc>
 8007de0:	4b0d      	ldr	r3, [pc, #52]	; (8007e18 <__smakebuf_r+0x7c>)
 8007de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	6020      	str	r0, [r4, #0]
 8007de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	9b00      	ldr	r3, [sp, #0]
 8007df0:	6120      	str	r0, [r4, #16]
 8007df2:	6163      	str	r3, [r4, #20]
 8007df4:	9b01      	ldr	r3, [sp, #4]
 8007df6:	b15b      	cbz	r3, 8007e10 <__smakebuf_r+0x74>
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dfe:	f000 fdbb 	bl	8008978 <_isatty_r>
 8007e02:	b128      	cbz	r0, 8007e10 <__smakebuf_r+0x74>
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	f043 0301 	orr.w	r3, r3, #1
 8007e0e:	81a3      	strh	r3, [r4, #12]
 8007e10:	89a0      	ldrh	r0, [r4, #12]
 8007e12:	4305      	orrs	r5, r0
 8007e14:	81a5      	strh	r5, [r4, #12]
 8007e16:	e7cd      	b.n	8007db4 <__smakebuf_r+0x18>
 8007e18:	08007ba9 	.word	0x08007ba9

08007e1c <_free_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4605      	mov	r5, r0
 8007e20:	2900      	cmp	r1, #0
 8007e22:	d040      	beq.n	8007ea6 <_free_r+0x8a>
 8007e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e28:	1f0c      	subs	r4, r1, #4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	bfb8      	it	lt
 8007e2e:	18e4      	addlt	r4, r4, r3
 8007e30:	f000 fde0 	bl	80089f4 <__malloc_lock>
 8007e34:	4a1c      	ldr	r2, [pc, #112]	; (8007ea8 <_free_r+0x8c>)
 8007e36:	6813      	ldr	r3, [r2, #0]
 8007e38:	b933      	cbnz	r3, 8007e48 <_free_r+0x2c>
 8007e3a:	6063      	str	r3, [r4, #4]
 8007e3c:	6014      	str	r4, [r2, #0]
 8007e3e:	4628      	mov	r0, r5
 8007e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e44:	f000 bddc 	b.w	8008a00 <__malloc_unlock>
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	d908      	bls.n	8007e5e <_free_r+0x42>
 8007e4c:	6820      	ldr	r0, [r4, #0]
 8007e4e:	1821      	adds	r1, r4, r0
 8007e50:	428b      	cmp	r3, r1
 8007e52:	bf01      	itttt	eq
 8007e54:	6819      	ldreq	r1, [r3, #0]
 8007e56:	685b      	ldreq	r3, [r3, #4]
 8007e58:	1809      	addeq	r1, r1, r0
 8007e5a:	6021      	streq	r1, [r4, #0]
 8007e5c:	e7ed      	b.n	8007e3a <_free_r+0x1e>
 8007e5e:	461a      	mov	r2, r3
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	b10b      	cbz	r3, 8007e68 <_free_r+0x4c>
 8007e64:	42a3      	cmp	r3, r4
 8007e66:	d9fa      	bls.n	8007e5e <_free_r+0x42>
 8007e68:	6811      	ldr	r1, [r2, #0]
 8007e6a:	1850      	adds	r0, r2, r1
 8007e6c:	42a0      	cmp	r0, r4
 8007e6e:	d10b      	bne.n	8007e88 <_free_r+0x6c>
 8007e70:	6820      	ldr	r0, [r4, #0]
 8007e72:	4401      	add	r1, r0
 8007e74:	1850      	adds	r0, r2, r1
 8007e76:	4283      	cmp	r3, r0
 8007e78:	6011      	str	r1, [r2, #0]
 8007e7a:	d1e0      	bne.n	8007e3e <_free_r+0x22>
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	4401      	add	r1, r0
 8007e82:	6011      	str	r1, [r2, #0]
 8007e84:	6053      	str	r3, [r2, #4]
 8007e86:	e7da      	b.n	8007e3e <_free_r+0x22>
 8007e88:	d902      	bls.n	8007e90 <_free_r+0x74>
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	e7d6      	b.n	8007e3e <_free_r+0x22>
 8007e90:	6820      	ldr	r0, [r4, #0]
 8007e92:	1821      	adds	r1, r4, r0
 8007e94:	428b      	cmp	r3, r1
 8007e96:	bf01      	itttt	eq
 8007e98:	6819      	ldreq	r1, [r3, #0]
 8007e9a:	685b      	ldreq	r3, [r3, #4]
 8007e9c:	1809      	addeq	r1, r1, r0
 8007e9e:	6021      	streq	r1, [r4, #0]
 8007ea0:	6063      	str	r3, [r4, #4]
 8007ea2:	6054      	str	r4, [r2, #4]
 8007ea4:	e7cb      	b.n	8007e3e <_free_r+0x22>
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	20000dc4 	.word	0x20000dc4

08007eac <sbrk_aligned>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	4e0e      	ldr	r6, [pc, #56]	; (8007ee8 <sbrk_aligned+0x3c>)
 8007eb0:	460c      	mov	r4, r1
 8007eb2:	6831      	ldr	r1, [r6, #0]
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	b911      	cbnz	r1, 8007ebe <sbrk_aligned+0x12>
 8007eb8:	f000 fcd6 	bl	8008868 <_sbrk_r>
 8007ebc:	6030      	str	r0, [r6, #0]
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f000 fcd1 	bl	8008868 <_sbrk_r>
 8007ec6:	1c43      	adds	r3, r0, #1
 8007ec8:	d00a      	beq.n	8007ee0 <sbrk_aligned+0x34>
 8007eca:	1cc4      	adds	r4, r0, #3
 8007ecc:	f024 0403 	bic.w	r4, r4, #3
 8007ed0:	42a0      	cmp	r0, r4
 8007ed2:	d007      	beq.n	8007ee4 <sbrk_aligned+0x38>
 8007ed4:	1a21      	subs	r1, r4, r0
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 fcc6 	bl	8008868 <_sbrk_r>
 8007edc:	3001      	adds	r0, #1
 8007ede:	d101      	bne.n	8007ee4 <sbrk_aligned+0x38>
 8007ee0:	f04f 34ff 	mov.w	r4, #4294967295
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}
 8007ee8:	20000dc8 	.word	0x20000dc8

08007eec <_malloc_r>:
 8007eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef0:	1ccd      	adds	r5, r1, #3
 8007ef2:	f025 0503 	bic.w	r5, r5, #3
 8007ef6:	3508      	adds	r5, #8
 8007ef8:	2d0c      	cmp	r5, #12
 8007efa:	bf38      	it	cc
 8007efc:	250c      	movcc	r5, #12
 8007efe:	2d00      	cmp	r5, #0
 8007f00:	4607      	mov	r7, r0
 8007f02:	db01      	blt.n	8007f08 <_malloc_r+0x1c>
 8007f04:	42a9      	cmp	r1, r5
 8007f06:	d905      	bls.n	8007f14 <_malloc_r+0x28>
 8007f08:	230c      	movs	r3, #12
 8007f0a:	2600      	movs	r6, #0
 8007f0c:	603b      	str	r3, [r7, #0]
 8007f0e:	4630      	mov	r0, r6
 8007f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f14:	4e2e      	ldr	r6, [pc, #184]	; (8007fd0 <_malloc_r+0xe4>)
 8007f16:	f000 fd6d 	bl	80089f4 <__malloc_lock>
 8007f1a:	6833      	ldr	r3, [r6, #0]
 8007f1c:	461c      	mov	r4, r3
 8007f1e:	bb34      	cbnz	r4, 8007f6e <_malloc_r+0x82>
 8007f20:	4629      	mov	r1, r5
 8007f22:	4638      	mov	r0, r7
 8007f24:	f7ff ffc2 	bl	8007eac <sbrk_aligned>
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	d14d      	bne.n	8007fca <_malloc_r+0xde>
 8007f2e:	6834      	ldr	r4, [r6, #0]
 8007f30:	4626      	mov	r6, r4
 8007f32:	2e00      	cmp	r6, #0
 8007f34:	d140      	bne.n	8007fb8 <_malloc_r+0xcc>
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	4631      	mov	r1, r6
 8007f3a:	4638      	mov	r0, r7
 8007f3c:	eb04 0803 	add.w	r8, r4, r3
 8007f40:	f000 fc92 	bl	8008868 <_sbrk_r>
 8007f44:	4580      	cmp	r8, r0
 8007f46:	d13a      	bne.n	8007fbe <_malloc_r+0xd2>
 8007f48:	6821      	ldr	r1, [r4, #0]
 8007f4a:	3503      	adds	r5, #3
 8007f4c:	1a6d      	subs	r5, r5, r1
 8007f4e:	f025 0503 	bic.w	r5, r5, #3
 8007f52:	3508      	adds	r5, #8
 8007f54:	2d0c      	cmp	r5, #12
 8007f56:	bf38      	it	cc
 8007f58:	250c      	movcc	r5, #12
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	f7ff ffa5 	bl	8007eac <sbrk_aligned>
 8007f62:	3001      	adds	r0, #1
 8007f64:	d02b      	beq.n	8007fbe <_malloc_r+0xd2>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	442b      	add	r3, r5
 8007f6a:	6023      	str	r3, [r4, #0]
 8007f6c:	e00e      	b.n	8007f8c <_malloc_r+0xa0>
 8007f6e:	6822      	ldr	r2, [r4, #0]
 8007f70:	1b52      	subs	r2, r2, r5
 8007f72:	d41e      	bmi.n	8007fb2 <_malloc_r+0xc6>
 8007f74:	2a0b      	cmp	r2, #11
 8007f76:	d916      	bls.n	8007fa6 <_malloc_r+0xba>
 8007f78:	1961      	adds	r1, r4, r5
 8007f7a:	42a3      	cmp	r3, r4
 8007f7c:	6025      	str	r5, [r4, #0]
 8007f7e:	bf18      	it	ne
 8007f80:	6059      	strne	r1, [r3, #4]
 8007f82:	6863      	ldr	r3, [r4, #4]
 8007f84:	bf08      	it	eq
 8007f86:	6031      	streq	r1, [r6, #0]
 8007f88:	5162      	str	r2, [r4, r5]
 8007f8a:	604b      	str	r3, [r1, #4]
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	f104 060b 	add.w	r6, r4, #11
 8007f92:	f000 fd35 	bl	8008a00 <__malloc_unlock>
 8007f96:	f026 0607 	bic.w	r6, r6, #7
 8007f9a:	1d23      	adds	r3, r4, #4
 8007f9c:	1af2      	subs	r2, r6, r3
 8007f9e:	d0b6      	beq.n	8007f0e <_malloc_r+0x22>
 8007fa0:	1b9b      	subs	r3, r3, r6
 8007fa2:	50a3      	str	r3, [r4, r2]
 8007fa4:	e7b3      	b.n	8007f0e <_malloc_r+0x22>
 8007fa6:	6862      	ldr	r2, [r4, #4]
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	bf0c      	ite	eq
 8007fac:	6032      	streq	r2, [r6, #0]
 8007fae:	605a      	strne	r2, [r3, #4]
 8007fb0:	e7ec      	b.n	8007f8c <_malloc_r+0xa0>
 8007fb2:	4623      	mov	r3, r4
 8007fb4:	6864      	ldr	r4, [r4, #4]
 8007fb6:	e7b2      	b.n	8007f1e <_malloc_r+0x32>
 8007fb8:	4634      	mov	r4, r6
 8007fba:	6876      	ldr	r6, [r6, #4]
 8007fbc:	e7b9      	b.n	8007f32 <_malloc_r+0x46>
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	4638      	mov	r0, r7
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	f000 fd1c 	bl	8008a00 <__malloc_unlock>
 8007fc8:	e7a1      	b.n	8007f0e <_malloc_r+0x22>
 8007fca:	6025      	str	r5, [r4, #0]
 8007fcc:	e7de      	b.n	8007f8c <_malloc_r+0xa0>
 8007fce:	bf00      	nop
 8007fd0:	20000dc4 	.word	0x20000dc4

08007fd4 <__ssputs_r>:
 8007fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	688e      	ldr	r6, [r1, #8]
 8007fda:	4682      	mov	sl, r0
 8007fdc:	429e      	cmp	r6, r3
 8007fde:	460c      	mov	r4, r1
 8007fe0:	4690      	mov	r8, r2
 8007fe2:	461f      	mov	r7, r3
 8007fe4:	d838      	bhi.n	8008058 <__ssputs_r+0x84>
 8007fe6:	898a      	ldrh	r2, [r1, #12]
 8007fe8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fec:	d032      	beq.n	8008054 <__ssputs_r+0x80>
 8007fee:	6825      	ldr	r5, [r4, #0]
 8007ff0:	6909      	ldr	r1, [r1, #16]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	eba5 0901 	sub.w	r9, r5, r1
 8007ff8:	6965      	ldr	r5, [r4, #20]
 8007ffa:	444b      	add	r3, r9
 8007ffc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008000:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008004:	106d      	asrs	r5, r5, #1
 8008006:	429d      	cmp	r5, r3
 8008008:	bf38      	it	cc
 800800a:	461d      	movcc	r5, r3
 800800c:	0553      	lsls	r3, r2, #21
 800800e:	d531      	bpl.n	8008074 <__ssputs_r+0xa0>
 8008010:	4629      	mov	r1, r5
 8008012:	f7ff ff6b 	bl	8007eec <_malloc_r>
 8008016:	4606      	mov	r6, r0
 8008018:	b950      	cbnz	r0, 8008030 <__ssputs_r+0x5c>
 800801a:	230c      	movs	r3, #12
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	f8ca 3000 	str.w	r3, [sl]
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008030:	464a      	mov	r2, r9
 8008032:	6921      	ldr	r1, [r4, #16]
 8008034:	f000 fcd0 	bl	80089d8 <memcpy>
 8008038:	89a3      	ldrh	r3, [r4, #12]
 800803a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800803e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008042:	81a3      	strh	r3, [r4, #12]
 8008044:	6126      	str	r6, [r4, #16]
 8008046:	444e      	add	r6, r9
 8008048:	6026      	str	r6, [r4, #0]
 800804a:	463e      	mov	r6, r7
 800804c:	6165      	str	r5, [r4, #20]
 800804e:	eba5 0509 	sub.w	r5, r5, r9
 8008052:	60a5      	str	r5, [r4, #8]
 8008054:	42be      	cmp	r6, r7
 8008056:	d900      	bls.n	800805a <__ssputs_r+0x86>
 8008058:	463e      	mov	r6, r7
 800805a:	4632      	mov	r2, r6
 800805c:	4641      	mov	r1, r8
 800805e:	6820      	ldr	r0, [r4, #0]
 8008060:	f7ff fb1c 	bl	800769c <memmove>
 8008064:	68a3      	ldr	r3, [r4, #8]
 8008066:	2000      	movs	r0, #0
 8008068:	1b9b      	subs	r3, r3, r6
 800806a:	60a3      	str	r3, [r4, #8]
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	4433      	add	r3, r6
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	e7db      	b.n	800802c <__ssputs_r+0x58>
 8008074:	462a      	mov	r2, r5
 8008076:	f000 fcc9 	bl	8008a0c <_realloc_r>
 800807a:	4606      	mov	r6, r0
 800807c:	2800      	cmp	r0, #0
 800807e:	d1e1      	bne.n	8008044 <__ssputs_r+0x70>
 8008080:	4650      	mov	r0, sl
 8008082:	6921      	ldr	r1, [r4, #16]
 8008084:	f7ff feca 	bl	8007e1c <_free_r>
 8008088:	e7c7      	b.n	800801a <__ssputs_r+0x46>
	...

0800808c <_svfiprintf_r>:
 800808c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008090:	4698      	mov	r8, r3
 8008092:	898b      	ldrh	r3, [r1, #12]
 8008094:	4607      	mov	r7, r0
 8008096:	061b      	lsls	r3, r3, #24
 8008098:	460d      	mov	r5, r1
 800809a:	4614      	mov	r4, r2
 800809c:	b09d      	sub	sp, #116	; 0x74
 800809e:	d50e      	bpl.n	80080be <_svfiprintf_r+0x32>
 80080a0:	690b      	ldr	r3, [r1, #16]
 80080a2:	b963      	cbnz	r3, 80080be <_svfiprintf_r+0x32>
 80080a4:	2140      	movs	r1, #64	; 0x40
 80080a6:	f7ff ff21 	bl	8007eec <_malloc_r>
 80080aa:	6028      	str	r0, [r5, #0]
 80080ac:	6128      	str	r0, [r5, #16]
 80080ae:	b920      	cbnz	r0, 80080ba <_svfiprintf_r+0x2e>
 80080b0:	230c      	movs	r3, #12
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295
 80080b8:	e0d1      	b.n	800825e <_svfiprintf_r+0x1d2>
 80080ba:	2340      	movs	r3, #64	; 0x40
 80080bc:	616b      	str	r3, [r5, #20]
 80080be:	2300      	movs	r3, #0
 80080c0:	9309      	str	r3, [sp, #36]	; 0x24
 80080c2:	2320      	movs	r3, #32
 80080c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080c8:	2330      	movs	r3, #48	; 0x30
 80080ca:	f04f 0901 	mov.w	r9, #1
 80080ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80080d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008278 <_svfiprintf_r+0x1ec>
 80080d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080da:	4623      	mov	r3, r4
 80080dc:	469a      	mov	sl, r3
 80080de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080e2:	b10a      	cbz	r2, 80080e8 <_svfiprintf_r+0x5c>
 80080e4:	2a25      	cmp	r2, #37	; 0x25
 80080e6:	d1f9      	bne.n	80080dc <_svfiprintf_r+0x50>
 80080e8:	ebba 0b04 	subs.w	fp, sl, r4
 80080ec:	d00b      	beq.n	8008106 <_svfiprintf_r+0x7a>
 80080ee:	465b      	mov	r3, fp
 80080f0:	4622      	mov	r2, r4
 80080f2:	4629      	mov	r1, r5
 80080f4:	4638      	mov	r0, r7
 80080f6:	f7ff ff6d 	bl	8007fd4 <__ssputs_r>
 80080fa:	3001      	adds	r0, #1
 80080fc:	f000 80aa 	beq.w	8008254 <_svfiprintf_r+0x1c8>
 8008100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008102:	445a      	add	r2, fp
 8008104:	9209      	str	r2, [sp, #36]	; 0x24
 8008106:	f89a 3000 	ldrb.w	r3, [sl]
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 80a2 	beq.w	8008254 <_svfiprintf_r+0x1c8>
 8008110:	2300      	movs	r3, #0
 8008112:	f04f 32ff 	mov.w	r2, #4294967295
 8008116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800811a:	f10a 0a01 	add.w	sl, sl, #1
 800811e:	9304      	str	r3, [sp, #16]
 8008120:	9307      	str	r3, [sp, #28]
 8008122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008126:	931a      	str	r3, [sp, #104]	; 0x68
 8008128:	4654      	mov	r4, sl
 800812a:	2205      	movs	r2, #5
 800812c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008130:	4851      	ldr	r0, [pc, #324]	; (8008278 <_svfiprintf_r+0x1ec>)
 8008132:	f000 fc43 	bl	80089bc <memchr>
 8008136:	9a04      	ldr	r2, [sp, #16]
 8008138:	b9d8      	cbnz	r0, 8008172 <_svfiprintf_r+0xe6>
 800813a:	06d0      	lsls	r0, r2, #27
 800813c:	bf44      	itt	mi
 800813e:	2320      	movmi	r3, #32
 8008140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008144:	0711      	lsls	r1, r2, #28
 8008146:	bf44      	itt	mi
 8008148:	232b      	movmi	r3, #43	; 0x2b
 800814a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800814e:	f89a 3000 	ldrb.w	r3, [sl]
 8008152:	2b2a      	cmp	r3, #42	; 0x2a
 8008154:	d015      	beq.n	8008182 <_svfiprintf_r+0xf6>
 8008156:	4654      	mov	r4, sl
 8008158:	2000      	movs	r0, #0
 800815a:	f04f 0c0a 	mov.w	ip, #10
 800815e:	9a07      	ldr	r2, [sp, #28]
 8008160:	4621      	mov	r1, r4
 8008162:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008166:	3b30      	subs	r3, #48	; 0x30
 8008168:	2b09      	cmp	r3, #9
 800816a:	d94e      	bls.n	800820a <_svfiprintf_r+0x17e>
 800816c:	b1b0      	cbz	r0, 800819c <_svfiprintf_r+0x110>
 800816e:	9207      	str	r2, [sp, #28]
 8008170:	e014      	b.n	800819c <_svfiprintf_r+0x110>
 8008172:	eba0 0308 	sub.w	r3, r0, r8
 8008176:	fa09 f303 	lsl.w	r3, r9, r3
 800817a:	4313      	orrs	r3, r2
 800817c:	46a2      	mov	sl, r4
 800817e:	9304      	str	r3, [sp, #16]
 8008180:	e7d2      	b.n	8008128 <_svfiprintf_r+0x9c>
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	1d19      	adds	r1, r3, #4
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	9103      	str	r1, [sp, #12]
 800818a:	2b00      	cmp	r3, #0
 800818c:	bfbb      	ittet	lt
 800818e:	425b      	neglt	r3, r3
 8008190:	f042 0202 	orrlt.w	r2, r2, #2
 8008194:	9307      	strge	r3, [sp, #28]
 8008196:	9307      	strlt	r3, [sp, #28]
 8008198:	bfb8      	it	lt
 800819a:	9204      	strlt	r2, [sp, #16]
 800819c:	7823      	ldrb	r3, [r4, #0]
 800819e:	2b2e      	cmp	r3, #46	; 0x2e
 80081a0:	d10c      	bne.n	80081bc <_svfiprintf_r+0x130>
 80081a2:	7863      	ldrb	r3, [r4, #1]
 80081a4:	2b2a      	cmp	r3, #42	; 0x2a
 80081a6:	d135      	bne.n	8008214 <_svfiprintf_r+0x188>
 80081a8:	9b03      	ldr	r3, [sp, #12]
 80081aa:	3402      	adds	r4, #2
 80081ac:	1d1a      	adds	r2, r3, #4
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	9203      	str	r2, [sp, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bfb8      	it	lt
 80081b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80081ba:	9305      	str	r3, [sp, #20]
 80081bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800827c <_svfiprintf_r+0x1f0>
 80081c0:	2203      	movs	r2, #3
 80081c2:	4650      	mov	r0, sl
 80081c4:	7821      	ldrb	r1, [r4, #0]
 80081c6:	f000 fbf9 	bl	80089bc <memchr>
 80081ca:	b140      	cbz	r0, 80081de <_svfiprintf_r+0x152>
 80081cc:	2340      	movs	r3, #64	; 0x40
 80081ce:	eba0 000a 	sub.w	r0, r0, sl
 80081d2:	fa03 f000 	lsl.w	r0, r3, r0
 80081d6:	9b04      	ldr	r3, [sp, #16]
 80081d8:	3401      	adds	r4, #1
 80081da:	4303      	orrs	r3, r0
 80081dc:	9304      	str	r3, [sp, #16]
 80081de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e2:	2206      	movs	r2, #6
 80081e4:	4826      	ldr	r0, [pc, #152]	; (8008280 <_svfiprintf_r+0x1f4>)
 80081e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081ea:	f000 fbe7 	bl	80089bc <memchr>
 80081ee:	2800      	cmp	r0, #0
 80081f0:	d038      	beq.n	8008264 <_svfiprintf_r+0x1d8>
 80081f2:	4b24      	ldr	r3, [pc, #144]	; (8008284 <_svfiprintf_r+0x1f8>)
 80081f4:	bb1b      	cbnz	r3, 800823e <_svfiprintf_r+0x1b2>
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	3307      	adds	r3, #7
 80081fa:	f023 0307 	bic.w	r3, r3, #7
 80081fe:	3308      	adds	r3, #8
 8008200:	9303      	str	r3, [sp, #12]
 8008202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008204:	4433      	add	r3, r6
 8008206:	9309      	str	r3, [sp, #36]	; 0x24
 8008208:	e767      	b.n	80080da <_svfiprintf_r+0x4e>
 800820a:	460c      	mov	r4, r1
 800820c:	2001      	movs	r0, #1
 800820e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008212:	e7a5      	b.n	8008160 <_svfiprintf_r+0xd4>
 8008214:	2300      	movs	r3, #0
 8008216:	f04f 0c0a 	mov.w	ip, #10
 800821a:	4619      	mov	r1, r3
 800821c:	3401      	adds	r4, #1
 800821e:	9305      	str	r3, [sp, #20]
 8008220:	4620      	mov	r0, r4
 8008222:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008226:	3a30      	subs	r2, #48	; 0x30
 8008228:	2a09      	cmp	r2, #9
 800822a:	d903      	bls.n	8008234 <_svfiprintf_r+0x1a8>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d0c5      	beq.n	80081bc <_svfiprintf_r+0x130>
 8008230:	9105      	str	r1, [sp, #20]
 8008232:	e7c3      	b.n	80081bc <_svfiprintf_r+0x130>
 8008234:	4604      	mov	r4, r0
 8008236:	2301      	movs	r3, #1
 8008238:	fb0c 2101 	mla	r1, ip, r1, r2
 800823c:	e7f0      	b.n	8008220 <_svfiprintf_r+0x194>
 800823e:	ab03      	add	r3, sp, #12
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	462a      	mov	r2, r5
 8008244:	4638      	mov	r0, r7
 8008246:	4b10      	ldr	r3, [pc, #64]	; (8008288 <_svfiprintf_r+0x1fc>)
 8008248:	a904      	add	r1, sp, #16
 800824a:	f3af 8000 	nop.w
 800824e:	1c42      	adds	r2, r0, #1
 8008250:	4606      	mov	r6, r0
 8008252:	d1d6      	bne.n	8008202 <_svfiprintf_r+0x176>
 8008254:	89ab      	ldrh	r3, [r5, #12]
 8008256:	065b      	lsls	r3, r3, #25
 8008258:	f53f af2c 	bmi.w	80080b4 <_svfiprintf_r+0x28>
 800825c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800825e:	b01d      	add	sp, #116	; 0x74
 8008260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008264:	ab03      	add	r3, sp, #12
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	462a      	mov	r2, r5
 800826a:	4638      	mov	r0, r7
 800826c:	4b06      	ldr	r3, [pc, #24]	; (8008288 <_svfiprintf_r+0x1fc>)
 800826e:	a904      	add	r1, sp, #16
 8008270:	f000 f9d4 	bl	800861c <_printf_i>
 8008274:	e7eb      	b.n	800824e <_svfiprintf_r+0x1c2>
 8008276:	bf00      	nop
 8008278:	0800aba0 	.word	0x0800aba0
 800827c:	0800aba6 	.word	0x0800aba6
 8008280:	0800abaa 	.word	0x0800abaa
 8008284:	00000000 	.word	0x00000000
 8008288:	08007fd5 	.word	0x08007fd5

0800828c <__sfputc_r>:
 800828c:	6893      	ldr	r3, [r2, #8]
 800828e:	b410      	push	{r4}
 8008290:	3b01      	subs	r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	6093      	str	r3, [r2, #8]
 8008296:	da07      	bge.n	80082a8 <__sfputc_r+0x1c>
 8008298:	6994      	ldr	r4, [r2, #24]
 800829a:	42a3      	cmp	r3, r4
 800829c:	db01      	blt.n	80082a2 <__sfputc_r+0x16>
 800829e:	290a      	cmp	r1, #10
 80082a0:	d102      	bne.n	80082a8 <__sfputc_r+0x1c>
 80082a2:	bc10      	pop	{r4}
 80082a4:	f7ff bade 	b.w	8007864 <__swbuf_r>
 80082a8:	6813      	ldr	r3, [r2, #0]
 80082aa:	1c58      	adds	r0, r3, #1
 80082ac:	6010      	str	r0, [r2, #0]
 80082ae:	7019      	strb	r1, [r3, #0]
 80082b0:	4608      	mov	r0, r1
 80082b2:	bc10      	pop	{r4}
 80082b4:	4770      	bx	lr

080082b6 <__sfputs_r>:
 80082b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b8:	4606      	mov	r6, r0
 80082ba:	460f      	mov	r7, r1
 80082bc:	4614      	mov	r4, r2
 80082be:	18d5      	adds	r5, r2, r3
 80082c0:	42ac      	cmp	r4, r5
 80082c2:	d101      	bne.n	80082c8 <__sfputs_r+0x12>
 80082c4:	2000      	movs	r0, #0
 80082c6:	e007      	b.n	80082d8 <__sfputs_r+0x22>
 80082c8:	463a      	mov	r2, r7
 80082ca:	4630      	mov	r0, r6
 80082cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d0:	f7ff ffdc 	bl	800828c <__sfputc_r>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d1f3      	bne.n	80082c0 <__sfputs_r+0xa>
 80082d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082dc <_vfiprintf_r>:
 80082dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e0:	460d      	mov	r5, r1
 80082e2:	4614      	mov	r4, r2
 80082e4:	4698      	mov	r8, r3
 80082e6:	4606      	mov	r6, r0
 80082e8:	b09d      	sub	sp, #116	; 0x74
 80082ea:	b118      	cbz	r0, 80082f4 <_vfiprintf_r+0x18>
 80082ec:	6983      	ldr	r3, [r0, #24]
 80082ee:	b90b      	cbnz	r3, 80082f4 <_vfiprintf_r+0x18>
 80082f0:	f7ff fc8e 	bl	8007c10 <__sinit>
 80082f4:	4b89      	ldr	r3, [pc, #548]	; (800851c <_vfiprintf_r+0x240>)
 80082f6:	429d      	cmp	r5, r3
 80082f8:	d11b      	bne.n	8008332 <_vfiprintf_r+0x56>
 80082fa:	6875      	ldr	r5, [r6, #4]
 80082fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082fe:	07d9      	lsls	r1, r3, #31
 8008300:	d405      	bmi.n	800830e <_vfiprintf_r+0x32>
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	059a      	lsls	r2, r3, #22
 8008306:	d402      	bmi.n	800830e <_vfiprintf_r+0x32>
 8008308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800830a:	f7ff fd1f 	bl	8007d4c <__retarget_lock_acquire_recursive>
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	071b      	lsls	r3, r3, #28
 8008312:	d501      	bpl.n	8008318 <_vfiprintf_r+0x3c>
 8008314:	692b      	ldr	r3, [r5, #16]
 8008316:	b9eb      	cbnz	r3, 8008354 <_vfiprintf_r+0x78>
 8008318:	4629      	mov	r1, r5
 800831a:	4630      	mov	r0, r6
 800831c:	f7ff faf4 	bl	8007908 <__swsetup_r>
 8008320:	b1c0      	cbz	r0, 8008354 <_vfiprintf_r+0x78>
 8008322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008324:	07dc      	lsls	r4, r3, #31
 8008326:	d50e      	bpl.n	8008346 <_vfiprintf_r+0x6a>
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	b01d      	add	sp, #116	; 0x74
 800832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008332:	4b7b      	ldr	r3, [pc, #492]	; (8008520 <_vfiprintf_r+0x244>)
 8008334:	429d      	cmp	r5, r3
 8008336:	d101      	bne.n	800833c <_vfiprintf_r+0x60>
 8008338:	68b5      	ldr	r5, [r6, #8]
 800833a:	e7df      	b.n	80082fc <_vfiprintf_r+0x20>
 800833c:	4b79      	ldr	r3, [pc, #484]	; (8008524 <_vfiprintf_r+0x248>)
 800833e:	429d      	cmp	r5, r3
 8008340:	bf08      	it	eq
 8008342:	68f5      	ldreq	r5, [r6, #12]
 8008344:	e7da      	b.n	80082fc <_vfiprintf_r+0x20>
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	0598      	lsls	r0, r3, #22
 800834a:	d4ed      	bmi.n	8008328 <_vfiprintf_r+0x4c>
 800834c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800834e:	f7ff fcfe 	bl	8007d4e <__retarget_lock_release_recursive>
 8008352:	e7e9      	b.n	8008328 <_vfiprintf_r+0x4c>
 8008354:	2300      	movs	r3, #0
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	2320      	movs	r3, #32
 800835a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800835e:	2330      	movs	r3, #48	; 0x30
 8008360:	f04f 0901 	mov.w	r9, #1
 8008364:	f8cd 800c 	str.w	r8, [sp, #12]
 8008368:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008528 <_vfiprintf_r+0x24c>
 800836c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008370:	4623      	mov	r3, r4
 8008372:	469a      	mov	sl, r3
 8008374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008378:	b10a      	cbz	r2, 800837e <_vfiprintf_r+0xa2>
 800837a:	2a25      	cmp	r2, #37	; 0x25
 800837c:	d1f9      	bne.n	8008372 <_vfiprintf_r+0x96>
 800837e:	ebba 0b04 	subs.w	fp, sl, r4
 8008382:	d00b      	beq.n	800839c <_vfiprintf_r+0xc0>
 8008384:	465b      	mov	r3, fp
 8008386:	4622      	mov	r2, r4
 8008388:	4629      	mov	r1, r5
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ff93 	bl	80082b6 <__sfputs_r>
 8008390:	3001      	adds	r0, #1
 8008392:	f000 80aa 	beq.w	80084ea <_vfiprintf_r+0x20e>
 8008396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008398:	445a      	add	r2, fp
 800839a:	9209      	str	r2, [sp, #36]	; 0x24
 800839c:	f89a 3000 	ldrb.w	r3, [sl]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 80a2 	beq.w	80084ea <_vfiprintf_r+0x20e>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b0:	f10a 0a01 	add.w	sl, sl, #1
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	9307      	str	r3, [sp, #28]
 80083b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083bc:	931a      	str	r3, [sp, #104]	; 0x68
 80083be:	4654      	mov	r4, sl
 80083c0:	2205      	movs	r2, #5
 80083c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c6:	4858      	ldr	r0, [pc, #352]	; (8008528 <_vfiprintf_r+0x24c>)
 80083c8:	f000 faf8 	bl	80089bc <memchr>
 80083cc:	9a04      	ldr	r2, [sp, #16]
 80083ce:	b9d8      	cbnz	r0, 8008408 <_vfiprintf_r+0x12c>
 80083d0:	06d1      	lsls	r1, r2, #27
 80083d2:	bf44      	itt	mi
 80083d4:	2320      	movmi	r3, #32
 80083d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083da:	0713      	lsls	r3, r2, #28
 80083dc:	bf44      	itt	mi
 80083de:	232b      	movmi	r3, #43	; 0x2b
 80083e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e4:	f89a 3000 	ldrb.w	r3, [sl]
 80083e8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ea:	d015      	beq.n	8008418 <_vfiprintf_r+0x13c>
 80083ec:	4654      	mov	r4, sl
 80083ee:	2000      	movs	r0, #0
 80083f0:	f04f 0c0a 	mov.w	ip, #10
 80083f4:	9a07      	ldr	r2, [sp, #28]
 80083f6:	4621      	mov	r1, r4
 80083f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083fc:	3b30      	subs	r3, #48	; 0x30
 80083fe:	2b09      	cmp	r3, #9
 8008400:	d94e      	bls.n	80084a0 <_vfiprintf_r+0x1c4>
 8008402:	b1b0      	cbz	r0, 8008432 <_vfiprintf_r+0x156>
 8008404:	9207      	str	r2, [sp, #28]
 8008406:	e014      	b.n	8008432 <_vfiprintf_r+0x156>
 8008408:	eba0 0308 	sub.w	r3, r0, r8
 800840c:	fa09 f303 	lsl.w	r3, r9, r3
 8008410:	4313      	orrs	r3, r2
 8008412:	46a2      	mov	sl, r4
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	e7d2      	b.n	80083be <_vfiprintf_r+0xe2>
 8008418:	9b03      	ldr	r3, [sp, #12]
 800841a:	1d19      	adds	r1, r3, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	9103      	str	r1, [sp, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	bfbb      	ittet	lt
 8008424:	425b      	neglt	r3, r3
 8008426:	f042 0202 	orrlt.w	r2, r2, #2
 800842a:	9307      	strge	r3, [sp, #28]
 800842c:	9307      	strlt	r3, [sp, #28]
 800842e:	bfb8      	it	lt
 8008430:	9204      	strlt	r2, [sp, #16]
 8008432:	7823      	ldrb	r3, [r4, #0]
 8008434:	2b2e      	cmp	r3, #46	; 0x2e
 8008436:	d10c      	bne.n	8008452 <_vfiprintf_r+0x176>
 8008438:	7863      	ldrb	r3, [r4, #1]
 800843a:	2b2a      	cmp	r3, #42	; 0x2a
 800843c:	d135      	bne.n	80084aa <_vfiprintf_r+0x1ce>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	3402      	adds	r4, #2
 8008442:	1d1a      	adds	r2, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	9203      	str	r2, [sp, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	bfb8      	it	lt
 800844c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800852c <_vfiprintf_r+0x250>
 8008456:	2203      	movs	r2, #3
 8008458:	4650      	mov	r0, sl
 800845a:	7821      	ldrb	r1, [r4, #0]
 800845c:	f000 faae 	bl	80089bc <memchr>
 8008460:	b140      	cbz	r0, 8008474 <_vfiprintf_r+0x198>
 8008462:	2340      	movs	r3, #64	; 0x40
 8008464:	eba0 000a 	sub.w	r0, r0, sl
 8008468:	fa03 f000 	lsl.w	r0, r3, r0
 800846c:	9b04      	ldr	r3, [sp, #16]
 800846e:	3401      	adds	r4, #1
 8008470:	4303      	orrs	r3, r0
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008478:	2206      	movs	r2, #6
 800847a:	482d      	ldr	r0, [pc, #180]	; (8008530 <_vfiprintf_r+0x254>)
 800847c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008480:	f000 fa9c 	bl	80089bc <memchr>
 8008484:	2800      	cmp	r0, #0
 8008486:	d03f      	beq.n	8008508 <_vfiprintf_r+0x22c>
 8008488:	4b2a      	ldr	r3, [pc, #168]	; (8008534 <_vfiprintf_r+0x258>)
 800848a:	bb1b      	cbnz	r3, 80084d4 <_vfiprintf_r+0x1f8>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	3307      	adds	r3, #7
 8008490:	f023 0307 	bic.w	r3, r3, #7
 8008494:	3308      	adds	r3, #8
 8008496:	9303      	str	r3, [sp, #12]
 8008498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849a:	443b      	add	r3, r7
 800849c:	9309      	str	r3, [sp, #36]	; 0x24
 800849e:	e767      	b.n	8008370 <_vfiprintf_r+0x94>
 80084a0:	460c      	mov	r4, r1
 80084a2:	2001      	movs	r0, #1
 80084a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a8:	e7a5      	b.n	80083f6 <_vfiprintf_r+0x11a>
 80084aa:	2300      	movs	r3, #0
 80084ac:	f04f 0c0a 	mov.w	ip, #10
 80084b0:	4619      	mov	r1, r3
 80084b2:	3401      	adds	r4, #1
 80084b4:	9305      	str	r3, [sp, #20]
 80084b6:	4620      	mov	r0, r4
 80084b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084bc:	3a30      	subs	r2, #48	; 0x30
 80084be:	2a09      	cmp	r2, #9
 80084c0:	d903      	bls.n	80084ca <_vfiprintf_r+0x1ee>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0c5      	beq.n	8008452 <_vfiprintf_r+0x176>
 80084c6:	9105      	str	r1, [sp, #20]
 80084c8:	e7c3      	b.n	8008452 <_vfiprintf_r+0x176>
 80084ca:	4604      	mov	r4, r0
 80084cc:	2301      	movs	r3, #1
 80084ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80084d2:	e7f0      	b.n	80084b6 <_vfiprintf_r+0x1da>
 80084d4:	ab03      	add	r3, sp, #12
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	462a      	mov	r2, r5
 80084da:	4630      	mov	r0, r6
 80084dc:	4b16      	ldr	r3, [pc, #88]	; (8008538 <_vfiprintf_r+0x25c>)
 80084de:	a904      	add	r1, sp, #16
 80084e0:	f3af 8000 	nop.w
 80084e4:	4607      	mov	r7, r0
 80084e6:	1c78      	adds	r0, r7, #1
 80084e8:	d1d6      	bne.n	8008498 <_vfiprintf_r+0x1bc>
 80084ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084ec:	07d9      	lsls	r1, r3, #31
 80084ee:	d405      	bmi.n	80084fc <_vfiprintf_r+0x220>
 80084f0:	89ab      	ldrh	r3, [r5, #12]
 80084f2:	059a      	lsls	r2, r3, #22
 80084f4:	d402      	bmi.n	80084fc <_vfiprintf_r+0x220>
 80084f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084f8:	f7ff fc29 	bl	8007d4e <__retarget_lock_release_recursive>
 80084fc:	89ab      	ldrh	r3, [r5, #12]
 80084fe:	065b      	lsls	r3, r3, #25
 8008500:	f53f af12 	bmi.w	8008328 <_vfiprintf_r+0x4c>
 8008504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008506:	e711      	b.n	800832c <_vfiprintf_r+0x50>
 8008508:	ab03      	add	r3, sp, #12
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	462a      	mov	r2, r5
 800850e:	4630      	mov	r0, r6
 8008510:	4b09      	ldr	r3, [pc, #36]	; (8008538 <_vfiprintf_r+0x25c>)
 8008512:	a904      	add	r1, sp, #16
 8008514:	f000 f882 	bl	800861c <_printf_i>
 8008518:	e7e4      	b.n	80084e4 <_vfiprintf_r+0x208>
 800851a:	bf00      	nop
 800851c:	0800ab60 	.word	0x0800ab60
 8008520:	0800ab80 	.word	0x0800ab80
 8008524:	0800ab40 	.word	0x0800ab40
 8008528:	0800aba0 	.word	0x0800aba0
 800852c:	0800aba6 	.word	0x0800aba6
 8008530:	0800abaa 	.word	0x0800abaa
 8008534:	00000000 	.word	0x00000000
 8008538:	080082b7 	.word	0x080082b7

0800853c <_printf_common>:
 800853c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008540:	4616      	mov	r6, r2
 8008542:	4699      	mov	r9, r3
 8008544:	688a      	ldr	r2, [r1, #8]
 8008546:	690b      	ldr	r3, [r1, #16]
 8008548:	4607      	mov	r7, r0
 800854a:	4293      	cmp	r3, r2
 800854c:	bfb8      	it	lt
 800854e:	4613      	movlt	r3, r2
 8008550:	6033      	str	r3, [r6, #0]
 8008552:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008556:	460c      	mov	r4, r1
 8008558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800855c:	b10a      	cbz	r2, 8008562 <_printf_common+0x26>
 800855e:	3301      	adds	r3, #1
 8008560:	6033      	str	r3, [r6, #0]
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	0699      	lsls	r1, r3, #26
 8008566:	bf42      	ittt	mi
 8008568:	6833      	ldrmi	r3, [r6, #0]
 800856a:	3302      	addmi	r3, #2
 800856c:	6033      	strmi	r3, [r6, #0]
 800856e:	6825      	ldr	r5, [r4, #0]
 8008570:	f015 0506 	ands.w	r5, r5, #6
 8008574:	d106      	bne.n	8008584 <_printf_common+0x48>
 8008576:	f104 0a19 	add.w	sl, r4, #25
 800857a:	68e3      	ldr	r3, [r4, #12]
 800857c:	6832      	ldr	r2, [r6, #0]
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	42ab      	cmp	r3, r5
 8008582:	dc28      	bgt.n	80085d6 <_printf_common+0x9a>
 8008584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008588:	1e13      	subs	r3, r2, #0
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	bf18      	it	ne
 800858e:	2301      	movne	r3, #1
 8008590:	0692      	lsls	r2, r2, #26
 8008592:	d42d      	bmi.n	80085f0 <_printf_common+0xb4>
 8008594:	4649      	mov	r1, r9
 8008596:	4638      	mov	r0, r7
 8008598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800859c:	47c0      	blx	r8
 800859e:	3001      	adds	r0, #1
 80085a0:	d020      	beq.n	80085e4 <_printf_common+0xa8>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	68e5      	ldr	r5, [r4, #12]
 80085a6:	f003 0306 	and.w	r3, r3, #6
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	bf18      	it	ne
 80085ae:	2500      	movne	r5, #0
 80085b0:	6832      	ldr	r2, [r6, #0]
 80085b2:	f04f 0600 	mov.w	r6, #0
 80085b6:	68a3      	ldr	r3, [r4, #8]
 80085b8:	bf08      	it	eq
 80085ba:	1aad      	subeq	r5, r5, r2
 80085bc:	6922      	ldr	r2, [r4, #16]
 80085be:	bf08      	it	eq
 80085c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085c4:	4293      	cmp	r3, r2
 80085c6:	bfc4      	itt	gt
 80085c8:	1a9b      	subgt	r3, r3, r2
 80085ca:	18ed      	addgt	r5, r5, r3
 80085cc:	341a      	adds	r4, #26
 80085ce:	42b5      	cmp	r5, r6
 80085d0:	d11a      	bne.n	8008608 <_printf_common+0xcc>
 80085d2:	2000      	movs	r0, #0
 80085d4:	e008      	b.n	80085e8 <_printf_common+0xac>
 80085d6:	2301      	movs	r3, #1
 80085d8:	4652      	mov	r2, sl
 80085da:	4649      	mov	r1, r9
 80085dc:	4638      	mov	r0, r7
 80085de:	47c0      	blx	r8
 80085e0:	3001      	adds	r0, #1
 80085e2:	d103      	bne.n	80085ec <_printf_common+0xb0>
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295
 80085e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ec:	3501      	adds	r5, #1
 80085ee:	e7c4      	b.n	800857a <_printf_common+0x3e>
 80085f0:	2030      	movs	r0, #48	; 0x30
 80085f2:	18e1      	adds	r1, r4, r3
 80085f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085fe:	4422      	add	r2, r4
 8008600:	3302      	adds	r3, #2
 8008602:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008606:	e7c5      	b.n	8008594 <_printf_common+0x58>
 8008608:	2301      	movs	r3, #1
 800860a:	4622      	mov	r2, r4
 800860c:	4649      	mov	r1, r9
 800860e:	4638      	mov	r0, r7
 8008610:	47c0      	blx	r8
 8008612:	3001      	adds	r0, #1
 8008614:	d0e6      	beq.n	80085e4 <_printf_common+0xa8>
 8008616:	3601      	adds	r6, #1
 8008618:	e7d9      	b.n	80085ce <_printf_common+0x92>
	...

0800861c <_printf_i>:
 800861c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008620:	7e0f      	ldrb	r7, [r1, #24]
 8008622:	4691      	mov	r9, r2
 8008624:	2f78      	cmp	r7, #120	; 0x78
 8008626:	4680      	mov	r8, r0
 8008628:	460c      	mov	r4, r1
 800862a:	469a      	mov	sl, r3
 800862c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800862e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008632:	d807      	bhi.n	8008644 <_printf_i+0x28>
 8008634:	2f62      	cmp	r7, #98	; 0x62
 8008636:	d80a      	bhi.n	800864e <_printf_i+0x32>
 8008638:	2f00      	cmp	r7, #0
 800863a:	f000 80d9 	beq.w	80087f0 <_printf_i+0x1d4>
 800863e:	2f58      	cmp	r7, #88	; 0x58
 8008640:	f000 80a4 	beq.w	800878c <_printf_i+0x170>
 8008644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800864c:	e03a      	b.n	80086c4 <_printf_i+0xa8>
 800864e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008652:	2b15      	cmp	r3, #21
 8008654:	d8f6      	bhi.n	8008644 <_printf_i+0x28>
 8008656:	a101      	add	r1, pc, #4	; (adr r1, 800865c <_printf_i+0x40>)
 8008658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800865c:	080086b5 	.word	0x080086b5
 8008660:	080086c9 	.word	0x080086c9
 8008664:	08008645 	.word	0x08008645
 8008668:	08008645 	.word	0x08008645
 800866c:	08008645 	.word	0x08008645
 8008670:	08008645 	.word	0x08008645
 8008674:	080086c9 	.word	0x080086c9
 8008678:	08008645 	.word	0x08008645
 800867c:	08008645 	.word	0x08008645
 8008680:	08008645 	.word	0x08008645
 8008684:	08008645 	.word	0x08008645
 8008688:	080087d7 	.word	0x080087d7
 800868c:	080086f9 	.word	0x080086f9
 8008690:	080087b9 	.word	0x080087b9
 8008694:	08008645 	.word	0x08008645
 8008698:	08008645 	.word	0x08008645
 800869c:	080087f9 	.word	0x080087f9
 80086a0:	08008645 	.word	0x08008645
 80086a4:	080086f9 	.word	0x080086f9
 80086a8:	08008645 	.word	0x08008645
 80086ac:	08008645 	.word	0x08008645
 80086b0:	080087c1 	.word	0x080087c1
 80086b4:	682b      	ldr	r3, [r5, #0]
 80086b6:	1d1a      	adds	r2, r3, #4
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	602a      	str	r2, [r5, #0]
 80086bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086c4:	2301      	movs	r3, #1
 80086c6:	e0a4      	b.n	8008812 <_printf_i+0x1f6>
 80086c8:	6820      	ldr	r0, [r4, #0]
 80086ca:	6829      	ldr	r1, [r5, #0]
 80086cc:	0606      	lsls	r6, r0, #24
 80086ce:	f101 0304 	add.w	r3, r1, #4
 80086d2:	d50a      	bpl.n	80086ea <_printf_i+0xce>
 80086d4:	680e      	ldr	r6, [r1, #0]
 80086d6:	602b      	str	r3, [r5, #0]
 80086d8:	2e00      	cmp	r6, #0
 80086da:	da03      	bge.n	80086e4 <_printf_i+0xc8>
 80086dc:	232d      	movs	r3, #45	; 0x2d
 80086de:	4276      	negs	r6, r6
 80086e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e4:	230a      	movs	r3, #10
 80086e6:	485e      	ldr	r0, [pc, #376]	; (8008860 <_printf_i+0x244>)
 80086e8:	e019      	b.n	800871e <_printf_i+0x102>
 80086ea:	680e      	ldr	r6, [r1, #0]
 80086ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086f0:	602b      	str	r3, [r5, #0]
 80086f2:	bf18      	it	ne
 80086f4:	b236      	sxthne	r6, r6
 80086f6:	e7ef      	b.n	80086d8 <_printf_i+0xbc>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	6820      	ldr	r0, [r4, #0]
 80086fc:	1d19      	adds	r1, r3, #4
 80086fe:	6029      	str	r1, [r5, #0]
 8008700:	0601      	lsls	r1, r0, #24
 8008702:	d501      	bpl.n	8008708 <_printf_i+0xec>
 8008704:	681e      	ldr	r6, [r3, #0]
 8008706:	e002      	b.n	800870e <_printf_i+0xf2>
 8008708:	0646      	lsls	r6, r0, #25
 800870a:	d5fb      	bpl.n	8008704 <_printf_i+0xe8>
 800870c:	881e      	ldrh	r6, [r3, #0]
 800870e:	2f6f      	cmp	r7, #111	; 0x6f
 8008710:	bf0c      	ite	eq
 8008712:	2308      	moveq	r3, #8
 8008714:	230a      	movne	r3, #10
 8008716:	4852      	ldr	r0, [pc, #328]	; (8008860 <_printf_i+0x244>)
 8008718:	2100      	movs	r1, #0
 800871a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800871e:	6865      	ldr	r5, [r4, #4]
 8008720:	2d00      	cmp	r5, #0
 8008722:	bfa8      	it	ge
 8008724:	6821      	ldrge	r1, [r4, #0]
 8008726:	60a5      	str	r5, [r4, #8]
 8008728:	bfa4      	itt	ge
 800872a:	f021 0104 	bicge.w	r1, r1, #4
 800872e:	6021      	strge	r1, [r4, #0]
 8008730:	b90e      	cbnz	r6, 8008736 <_printf_i+0x11a>
 8008732:	2d00      	cmp	r5, #0
 8008734:	d04d      	beq.n	80087d2 <_printf_i+0x1b6>
 8008736:	4615      	mov	r5, r2
 8008738:	fbb6 f1f3 	udiv	r1, r6, r3
 800873c:	fb03 6711 	mls	r7, r3, r1, r6
 8008740:	5dc7      	ldrb	r7, [r0, r7]
 8008742:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008746:	4637      	mov	r7, r6
 8008748:	42bb      	cmp	r3, r7
 800874a:	460e      	mov	r6, r1
 800874c:	d9f4      	bls.n	8008738 <_printf_i+0x11c>
 800874e:	2b08      	cmp	r3, #8
 8008750:	d10b      	bne.n	800876a <_printf_i+0x14e>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	07de      	lsls	r6, r3, #31
 8008756:	d508      	bpl.n	800876a <_printf_i+0x14e>
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	6861      	ldr	r1, [r4, #4]
 800875c:	4299      	cmp	r1, r3
 800875e:	bfde      	ittt	le
 8008760:	2330      	movle	r3, #48	; 0x30
 8008762:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008766:	f105 35ff 	addle.w	r5, r5, #4294967295
 800876a:	1b52      	subs	r2, r2, r5
 800876c:	6122      	str	r2, [r4, #16]
 800876e:	464b      	mov	r3, r9
 8008770:	4621      	mov	r1, r4
 8008772:	4640      	mov	r0, r8
 8008774:	f8cd a000 	str.w	sl, [sp]
 8008778:	aa03      	add	r2, sp, #12
 800877a:	f7ff fedf 	bl	800853c <_printf_common>
 800877e:	3001      	adds	r0, #1
 8008780:	d14c      	bne.n	800881c <_printf_i+0x200>
 8008782:	f04f 30ff 	mov.w	r0, #4294967295
 8008786:	b004      	add	sp, #16
 8008788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878c:	4834      	ldr	r0, [pc, #208]	; (8008860 <_printf_i+0x244>)
 800878e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008792:	6829      	ldr	r1, [r5, #0]
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	f851 6b04 	ldr.w	r6, [r1], #4
 800879a:	6029      	str	r1, [r5, #0]
 800879c:	061d      	lsls	r5, r3, #24
 800879e:	d514      	bpl.n	80087ca <_printf_i+0x1ae>
 80087a0:	07df      	lsls	r7, r3, #31
 80087a2:	bf44      	itt	mi
 80087a4:	f043 0320 	orrmi.w	r3, r3, #32
 80087a8:	6023      	strmi	r3, [r4, #0]
 80087aa:	b91e      	cbnz	r6, 80087b4 <_printf_i+0x198>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	f023 0320 	bic.w	r3, r3, #32
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	2310      	movs	r3, #16
 80087b6:	e7af      	b.n	8008718 <_printf_i+0xfc>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	f043 0320 	orr.w	r3, r3, #32
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	2378      	movs	r3, #120	; 0x78
 80087c2:	4828      	ldr	r0, [pc, #160]	; (8008864 <_printf_i+0x248>)
 80087c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087c8:	e7e3      	b.n	8008792 <_printf_i+0x176>
 80087ca:	0659      	lsls	r1, r3, #25
 80087cc:	bf48      	it	mi
 80087ce:	b2b6      	uxthmi	r6, r6
 80087d0:	e7e6      	b.n	80087a0 <_printf_i+0x184>
 80087d2:	4615      	mov	r5, r2
 80087d4:	e7bb      	b.n	800874e <_printf_i+0x132>
 80087d6:	682b      	ldr	r3, [r5, #0]
 80087d8:	6826      	ldr	r6, [r4, #0]
 80087da:	1d18      	adds	r0, r3, #4
 80087dc:	6961      	ldr	r1, [r4, #20]
 80087de:	6028      	str	r0, [r5, #0]
 80087e0:	0635      	lsls	r5, r6, #24
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	d501      	bpl.n	80087ea <_printf_i+0x1ce>
 80087e6:	6019      	str	r1, [r3, #0]
 80087e8:	e002      	b.n	80087f0 <_printf_i+0x1d4>
 80087ea:	0670      	lsls	r0, r6, #25
 80087ec:	d5fb      	bpl.n	80087e6 <_printf_i+0x1ca>
 80087ee:	8019      	strh	r1, [r3, #0]
 80087f0:	2300      	movs	r3, #0
 80087f2:	4615      	mov	r5, r2
 80087f4:	6123      	str	r3, [r4, #16]
 80087f6:	e7ba      	b.n	800876e <_printf_i+0x152>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	2100      	movs	r1, #0
 80087fc:	1d1a      	adds	r2, r3, #4
 80087fe:	602a      	str	r2, [r5, #0]
 8008800:	681d      	ldr	r5, [r3, #0]
 8008802:	6862      	ldr	r2, [r4, #4]
 8008804:	4628      	mov	r0, r5
 8008806:	f000 f8d9 	bl	80089bc <memchr>
 800880a:	b108      	cbz	r0, 8008810 <_printf_i+0x1f4>
 800880c:	1b40      	subs	r0, r0, r5
 800880e:	6060      	str	r0, [r4, #4]
 8008810:	6863      	ldr	r3, [r4, #4]
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	2300      	movs	r3, #0
 8008816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800881a:	e7a8      	b.n	800876e <_printf_i+0x152>
 800881c:	462a      	mov	r2, r5
 800881e:	4649      	mov	r1, r9
 8008820:	4640      	mov	r0, r8
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	47d0      	blx	sl
 8008826:	3001      	adds	r0, #1
 8008828:	d0ab      	beq.n	8008782 <_printf_i+0x166>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	079b      	lsls	r3, r3, #30
 800882e:	d413      	bmi.n	8008858 <_printf_i+0x23c>
 8008830:	68e0      	ldr	r0, [r4, #12]
 8008832:	9b03      	ldr	r3, [sp, #12]
 8008834:	4298      	cmp	r0, r3
 8008836:	bfb8      	it	lt
 8008838:	4618      	movlt	r0, r3
 800883a:	e7a4      	b.n	8008786 <_printf_i+0x16a>
 800883c:	2301      	movs	r3, #1
 800883e:	4632      	mov	r2, r6
 8008840:	4649      	mov	r1, r9
 8008842:	4640      	mov	r0, r8
 8008844:	47d0      	blx	sl
 8008846:	3001      	adds	r0, #1
 8008848:	d09b      	beq.n	8008782 <_printf_i+0x166>
 800884a:	3501      	adds	r5, #1
 800884c:	68e3      	ldr	r3, [r4, #12]
 800884e:	9903      	ldr	r1, [sp, #12]
 8008850:	1a5b      	subs	r3, r3, r1
 8008852:	42ab      	cmp	r3, r5
 8008854:	dcf2      	bgt.n	800883c <_printf_i+0x220>
 8008856:	e7eb      	b.n	8008830 <_printf_i+0x214>
 8008858:	2500      	movs	r5, #0
 800885a:	f104 0619 	add.w	r6, r4, #25
 800885e:	e7f5      	b.n	800884c <_printf_i+0x230>
 8008860:	0800abb1 	.word	0x0800abb1
 8008864:	0800abc2 	.word	0x0800abc2

08008868 <_sbrk_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	2300      	movs	r3, #0
 800886c:	4d05      	ldr	r5, [pc, #20]	; (8008884 <_sbrk_r+0x1c>)
 800886e:	4604      	mov	r4, r0
 8008870:	4608      	mov	r0, r1
 8008872:	602b      	str	r3, [r5, #0]
 8008874:	f7f8 fe8c 	bl	8001590 <_sbrk>
 8008878:	1c43      	adds	r3, r0, #1
 800887a:	d102      	bne.n	8008882 <_sbrk_r+0x1a>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	b103      	cbz	r3, 8008882 <_sbrk_r+0x1a>
 8008880:	6023      	str	r3, [r4, #0]
 8008882:	bd38      	pop	{r3, r4, r5, pc}
 8008884:	20000dcc 	.word	0x20000dcc

08008888 <__sread>:
 8008888:	b510      	push	{r4, lr}
 800888a:	460c      	mov	r4, r1
 800888c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008890:	f000 f8ec 	bl	8008a6c <_read_r>
 8008894:	2800      	cmp	r0, #0
 8008896:	bfab      	itete	ge
 8008898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800889a:	89a3      	ldrhlt	r3, [r4, #12]
 800889c:	181b      	addge	r3, r3, r0
 800889e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088a2:	bfac      	ite	ge
 80088a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80088a6:	81a3      	strhlt	r3, [r4, #12]
 80088a8:	bd10      	pop	{r4, pc}

080088aa <__swrite>:
 80088aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ae:	461f      	mov	r7, r3
 80088b0:	898b      	ldrh	r3, [r1, #12]
 80088b2:	4605      	mov	r5, r0
 80088b4:	05db      	lsls	r3, r3, #23
 80088b6:	460c      	mov	r4, r1
 80088b8:	4616      	mov	r6, r2
 80088ba:	d505      	bpl.n	80088c8 <__swrite+0x1e>
 80088bc:	2302      	movs	r3, #2
 80088be:	2200      	movs	r2, #0
 80088c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088c4:	f000 f868 	bl	8008998 <_lseek_r>
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	4632      	mov	r2, r6
 80088cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088d0:	81a3      	strh	r3, [r4, #12]
 80088d2:	4628      	mov	r0, r5
 80088d4:	463b      	mov	r3, r7
 80088d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088de:	f000 b817 	b.w	8008910 <_write_r>

080088e2 <__sseek>:
 80088e2:	b510      	push	{r4, lr}
 80088e4:	460c      	mov	r4, r1
 80088e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ea:	f000 f855 	bl	8008998 <_lseek_r>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	bf15      	itete	ne
 80088f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80088f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088fe:	81a3      	strheq	r3, [r4, #12]
 8008900:	bf18      	it	ne
 8008902:	81a3      	strhne	r3, [r4, #12]
 8008904:	bd10      	pop	{r4, pc}

08008906 <__sclose>:
 8008906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800890a:	f000 b813 	b.w	8008934 <_close_r>
	...

08008910 <_write_r>:
 8008910:	b538      	push	{r3, r4, r5, lr}
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	4611      	mov	r1, r2
 8008918:	2200      	movs	r2, #0
 800891a:	4d05      	ldr	r5, [pc, #20]	; (8008930 <_write_r+0x20>)
 800891c:	602a      	str	r2, [r5, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	f7f8 fe1a 	bl	8001558 <_write>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d102      	bne.n	800892e <_write_r+0x1e>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	b103      	cbz	r3, 800892e <_write_r+0x1e>
 800892c:	6023      	str	r3, [r4, #0]
 800892e:	bd38      	pop	{r3, r4, r5, pc}
 8008930:	20000dcc 	.word	0x20000dcc

08008934 <_close_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	2300      	movs	r3, #0
 8008938:	4d05      	ldr	r5, [pc, #20]	; (8008950 <_close_r+0x1c>)
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	f7f8 fe18 	bl	8001574 <_close>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_close_r+0x1a>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_close_r+0x1a>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	20000dcc 	.word	0x20000dcc

08008954 <_fstat_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	2300      	movs	r3, #0
 8008958:	4d06      	ldr	r5, [pc, #24]	; (8008974 <_fstat_r+0x20>)
 800895a:	4604      	mov	r4, r0
 800895c:	4608      	mov	r0, r1
 800895e:	4611      	mov	r1, r2
 8008960:	602b      	str	r3, [r5, #0]
 8008962:	f7f8 fe0b 	bl	800157c <_fstat>
 8008966:	1c43      	adds	r3, r0, #1
 8008968:	d102      	bne.n	8008970 <_fstat_r+0x1c>
 800896a:	682b      	ldr	r3, [r5, #0]
 800896c:	b103      	cbz	r3, 8008970 <_fstat_r+0x1c>
 800896e:	6023      	str	r3, [r4, #0]
 8008970:	bd38      	pop	{r3, r4, r5, pc}
 8008972:	bf00      	nop
 8008974:	20000dcc 	.word	0x20000dcc

08008978 <_isatty_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	2300      	movs	r3, #0
 800897c:	4d05      	ldr	r5, [pc, #20]	; (8008994 <_isatty_r+0x1c>)
 800897e:	4604      	mov	r4, r0
 8008980:	4608      	mov	r0, r1
 8008982:	602b      	str	r3, [r5, #0]
 8008984:	f7f8 fe00 	bl	8001588 <_isatty>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_isatty_r+0x1a>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_isatty_r+0x1a>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	20000dcc 	.word	0x20000dcc

08008998 <_lseek_r>:
 8008998:	b538      	push	{r3, r4, r5, lr}
 800899a:	4604      	mov	r4, r0
 800899c:	4608      	mov	r0, r1
 800899e:	4611      	mov	r1, r2
 80089a0:	2200      	movs	r2, #0
 80089a2:	4d05      	ldr	r5, [pc, #20]	; (80089b8 <_lseek_r+0x20>)
 80089a4:	602a      	str	r2, [r5, #0]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f7f8 fdf0 	bl	800158c <_lseek>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_lseek_r+0x1e>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_lseek_r+0x1e>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	20000dcc 	.word	0x20000dcc

080089bc <memchr>:
 80089bc:	4603      	mov	r3, r0
 80089be:	b510      	push	{r4, lr}
 80089c0:	b2c9      	uxtb	r1, r1
 80089c2:	4402      	add	r2, r0
 80089c4:	4293      	cmp	r3, r2
 80089c6:	4618      	mov	r0, r3
 80089c8:	d101      	bne.n	80089ce <memchr+0x12>
 80089ca:	2000      	movs	r0, #0
 80089cc:	e003      	b.n	80089d6 <memchr+0x1a>
 80089ce:	7804      	ldrb	r4, [r0, #0]
 80089d0:	3301      	adds	r3, #1
 80089d2:	428c      	cmp	r4, r1
 80089d4:	d1f6      	bne.n	80089c4 <memchr+0x8>
 80089d6:	bd10      	pop	{r4, pc}

080089d8 <memcpy>:
 80089d8:	440a      	add	r2, r1
 80089da:	4291      	cmp	r1, r2
 80089dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80089e0:	d100      	bne.n	80089e4 <memcpy+0xc>
 80089e2:	4770      	bx	lr
 80089e4:	b510      	push	{r4, lr}
 80089e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ea:	4291      	cmp	r1, r2
 80089ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089f0:	d1f9      	bne.n	80089e6 <memcpy+0xe>
 80089f2:	bd10      	pop	{r4, pc}

080089f4 <__malloc_lock>:
 80089f4:	4801      	ldr	r0, [pc, #4]	; (80089fc <__malloc_lock+0x8>)
 80089f6:	f7ff b9a9 	b.w	8007d4c <__retarget_lock_acquire_recursive>
 80089fa:	bf00      	nop
 80089fc:	20000dc0 	.word	0x20000dc0

08008a00 <__malloc_unlock>:
 8008a00:	4801      	ldr	r0, [pc, #4]	; (8008a08 <__malloc_unlock+0x8>)
 8008a02:	f7ff b9a4 	b.w	8007d4e <__retarget_lock_release_recursive>
 8008a06:	bf00      	nop
 8008a08:	20000dc0 	.word	0x20000dc0

08008a0c <_realloc_r>:
 8008a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a10:	4680      	mov	r8, r0
 8008a12:	4614      	mov	r4, r2
 8008a14:	460e      	mov	r6, r1
 8008a16:	b921      	cbnz	r1, 8008a22 <_realloc_r+0x16>
 8008a18:	4611      	mov	r1, r2
 8008a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1e:	f7ff ba65 	b.w	8007eec <_malloc_r>
 8008a22:	b92a      	cbnz	r2, 8008a30 <_realloc_r+0x24>
 8008a24:	f7ff f9fa 	bl	8007e1c <_free_r>
 8008a28:	4625      	mov	r5, r4
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	f000 f82e 	bl	8008a90 <_malloc_usable_size_r>
 8008a34:	4284      	cmp	r4, r0
 8008a36:	4607      	mov	r7, r0
 8008a38:	d802      	bhi.n	8008a40 <_realloc_r+0x34>
 8008a3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a3e:	d812      	bhi.n	8008a66 <_realloc_r+0x5a>
 8008a40:	4621      	mov	r1, r4
 8008a42:	4640      	mov	r0, r8
 8008a44:	f7ff fa52 	bl	8007eec <_malloc_r>
 8008a48:	4605      	mov	r5, r0
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d0ed      	beq.n	8008a2a <_realloc_r+0x1e>
 8008a4e:	42bc      	cmp	r4, r7
 8008a50:	4622      	mov	r2, r4
 8008a52:	4631      	mov	r1, r6
 8008a54:	bf28      	it	cs
 8008a56:	463a      	movcs	r2, r7
 8008a58:	f7ff ffbe 	bl	80089d8 <memcpy>
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4640      	mov	r0, r8
 8008a60:	f7ff f9dc 	bl	8007e1c <_free_r>
 8008a64:	e7e1      	b.n	8008a2a <_realloc_r+0x1e>
 8008a66:	4635      	mov	r5, r6
 8008a68:	e7df      	b.n	8008a2a <_realloc_r+0x1e>
	...

08008a6c <_read_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4604      	mov	r4, r0
 8008a70:	4608      	mov	r0, r1
 8008a72:	4611      	mov	r1, r2
 8008a74:	2200      	movs	r2, #0
 8008a76:	4d05      	ldr	r5, [pc, #20]	; (8008a8c <_read_r+0x20>)
 8008a78:	602a      	str	r2, [r5, #0]
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f7f8 fd5e 	bl	800153c <_read>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d102      	bne.n	8008a8a <_read_r+0x1e>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b103      	cbz	r3, 8008a8a <_read_r+0x1e>
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	20000dcc 	.word	0x20000dcc

08008a90 <_malloc_usable_size_r>:
 8008a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a94:	1f18      	subs	r0, r3, #4
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	bfbc      	itt	lt
 8008a9a:	580b      	ldrlt	r3, [r1, r0]
 8008a9c:	18c0      	addlt	r0, r0, r3
 8008a9e:	4770      	bx	lr

08008aa0 <cos>:
 8008aa0:	b530      	push	{r4, r5, lr}
 8008aa2:	4a20      	ldr	r2, [pc, #128]	; (8008b24 <cos+0x84>)
 8008aa4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	b087      	sub	sp, #28
 8008aac:	dc06      	bgt.n	8008abc <cos+0x1c>
 8008aae:	2200      	movs	r2, #0
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	b007      	add	sp, #28
 8008ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ab8:	f000 ba76 	b.w	8008fa8 <__kernel_cos>
 8008abc:	4a1a      	ldr	r2, [pc, #104]	; (8008b28 <cos+0x88>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	dd05      	ble.n	8008ace <cos+0x2e>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	f7f7 fc03 	bl	80002d0 <__aeabi_dsub>
 8008aca:	b007      	add	sp, #28
 8008acc:	bd30      	pop	{r4, r5, pc}
 8008ace:	aa02      	add	r2, sp, #8
 8008ad0:	f000 f872 	bl	8008bb8 <__ieee754_rem_pio2>
 8008ad4:	f000 0003 	and.w	r0, r0, #3
 8008ad8:	2801      	cmp	r0, #1
 8008ada:	d009      	beq.n	8008af0 <cos+0x50>
 8008adc:	2802      	cmp	r0, #2
 8008ade:	d011      	beq.n	8008b04 <cos+0x64>
 8008ae0:	b9b8      	cbnz	r0, 8008b12 <cos+0x72>
 8008ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aea:	f000 fa5d 	bl	8008fa8 <__kernel_cos>
 8008aee:	e7ec      	b.n	8008aca <cos+0x2a>
 8008af0:	9000      	str	r0, [sp, #0]
 8008af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008afa:	f000 fe55 	bl	80097a8 <__kernel_sin>
 8008afe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008b02:	e7e2      	b.n	8008aca <cos+0x2a>
 8008b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b0c:	f000 fa4c 	bl	8008fa8 <__kernel_cos>
 8008b10:	e7f5      	b.n	8008afe <cos+0x5e>
 8008b12:	2301      	movs	r3, #1
 8008b14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b1e:	f000 fe43 	bl	80097a8 <__kernel_sin>
 8008b22:	e7d2      	b.n	8008aca <cos+0x2a>
 8008b24:	3fe921fb 	.word	0x3fe921fb
 8008b28:	7fefffff 	.word	0x7fefffff

08008b2c <sin>:
 8008b2c:	b530      	push	{r4, r5, lr}
 8008b2e:	4a20      	ldr	r2, [pc, #128]	; (8008bb0 <sin+0x84>)
 8008b30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b34:	4293      	cmp	r3, r2
 8008b36:	b087      	sub	sp, #28
 8008b38:	dc06      	bgt.n	8008b48 <sin+0x1c>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	2300      	movs	r3, #0
 8008b42:	f000 fe31 	bl	80097a8 <__kernel_sin>
 8008b46:	e006      	b.n	8008b56 <sin+0x2a>
 8008b48:	4a1a      	ldr	r2, [pc, #104]	; (8008bb4 <sin+0x88>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	dd05      	ble.n	8008b5a <sin+0x2e>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	f7f7 fbbd 	bl	80002d0 <__aeabi_dsub>
 8008b56:	b007      	add	sp, #28
 8008b58:	bd30      	pop	{r4, r5, pc}
 8008b5a:	aa02      	add	r2, sp, #8
 8008b5c:	f000 f82c 	bl	8008bb8 <__ieee754_rem_pio2>
 8008b60:	f000 0003 	and.w	r0, r0, #3
 8008b64:	2801      	cmp	r0, #1
 8008b66:	d009      	beq.n	8008b7c <sin+0x50>
 8008b68:	2802      	cmp	r0, #2
 8008b6a:	d00e      	beq.n	8008b8a <sin+0x5e>
 8008b6c:	b9c0      	cbnz	r0, 8008ba0 <sin+0x74>
 8008b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b72:	2301      	movs	r3, #1
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b7a:	e7e2      	b.n	8008b42 <sin+0x16>
 8008b7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b84:	f000 fa10 	bl	8008fa8 <__kernel_cos>
 8008b88:	e7e5      	b.n	8008b56 <sin+0x2a>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b96:	f000 fe07 	bl	80097a8 <__kernel_sin>
 8008b9a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008b9e:	e7da      	b.n	8008b56 <sin+0x2a>
 8008ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ba8:	f000 f9fe 	bl	8008fa8 <__kernel_cos>
 8008bac:	e7f5      	b.n	8008b9a <sin+0x6e>
 8008bae:	bf00      	nop
 8008bb0:	3fe921fb 	.word	0x3fe921fb
 8008bb4:	7fefffff 	.word	0x7fefffff

08008bb8 <__ieee754_rem_pio2>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	4614      	mov	r4, r2
 8008bbe:	4ac4      	ldr	r2, [pc, #784]	; (8008ed0 <__ieee754_rem_pio2+0x318>)
 8008bc0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008bc4:	b08d      	sub	sp, #52	; 0x34
 8008bc6:	4592      	cmp	sl, r2
 8008bc8:	9104      	str	r1, [sp, #16]
 8008bca:	dc07      	bgt.n	8008bdc <__ieee754_rem_pio2+0x24>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e9c4 0100 	strd	r0, r1, [r4]
 8008bd4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008bd8:	2500      	movs	r5, #0
 8008bda:	e024      	b.n	8008c26 <__ieee754_rem_pio2+0x6e>
 8008bdc:	4abd      	ldr	r2, [pc, #756]	; (8008ed4 <__ieee754_rem_pio2+0x31c>)
 8008bde:	4592      	cmp	sl, r2
 8008be0:	dc72      	bgt.n	8008cc8 <__ieee754_rem_pio2+0x110>
 8008be2:	9b04      	ldr	r3, [sp, #16]
 8008be4:	4dbc      	ldr	r5, [pc, #752]	; (8008ed8 <__ieee754_rem_pio2+0x320>)
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	a3ab      	add	r3, pc, #684	; (adr r3, 8008e98 <__ieee754_rem_pio2+0x2e0>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	dd36      	ble.n	8008c5e <__ieee754_rem_pio2+0xa6>
 8008bf0:	f7f7 fb6e 	bl	80002d0 <__aeabi_dsub>
 8008bf4:	45aa      	cmp	sl, r5
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	460f      	mov	r7, r1
 8008bfa:	d018      	beq.n	8008c2e <__ieee754_rem_pio2+0x76>
 8008bfc:	a3a8      	add	r3, pc, #672	; (adr r3, 8008ea0 <__ieee754_rem_pio2+0x2e8>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f7f7 fb65 	bl	80002d0 <__aeabi_dsub>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	e9c4 2300 	strd	r2, r3, [r4]
 8008c10:	4639      	mov	r1, r7
 8008c12:	f7f7 fb5d 	bl	80002d0 <__aeabi_dsub>
 8008c16:	a3a2      	add	r3, pc, #648	; (adr r3, 8008ea0 <__ieee754_rem_pio2+0x2e8>)
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	f7f7 fb58 	bl	80002d0 <__aeabi_dsub>
 8008c20:	2501      	movs	r5, #1
 8008c22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c26:	4628      	mov	r0, r5
 8008c28:	b00d      	add	sp, #52	; 0x34
 8008c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	a39e      	add	r3, pc, #632	; (adr r3, 8008ea8 <__ieee754_rem_pio2+0x2f0>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	f7f7 fb4c 	bl	80002d0 <__aeabi_dsub>
 8008c38:	a39d      	add	r3, pc, #628	; (adr r3, 8008eb0 <__ieee754_rem_pio2+0x2f8>)
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	4606      	mov	r6, r0
 8008c40:	460f      	mov	r7, r1
 8008c42:	f7f7 fb45 	bl	80002d0 <__aeabi_dsub>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	e9c4 2300 	strd	r2, r3, [r4]
 8008c50:	4639      	mov	r1, r7
 8008c52:	f7f7 fb3d 	bl	80002d0 <__aeabi_dsub>
 8008c56:	a396      	add	r3, pc, #600	; (adr r3, 8008eb0 <__ieee754_rem_pio2+0x2f8>)
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	e7de      	b.n	8008c1c <__ieee754_rem_pio2+0x64>
 8008c5e:	f7f7 fb39 	bl	80002d4 <__adddf3>
 8008c62:	45aa      	cmp	sl, r5
 8008c64:	4606      	mov	r6, r0
 8008c66:	460f      	mov	r7, r1
 8008c68:	d016      	beq.n	8008c98 <__ieee754_rem_pio2+0xe0>
 8008c6a:	a38d      	add	r3, pc, #564	; (adr r3, 8008ea0 <__ieee754_rem_pio2+0x2e8>)
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	f7f7 fb30 	bl	80002d4 <__adddf3>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4630      	mov	r0, r6
 8008c7a:	e9c4 2300 	strd	r2, r3, [r4]
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f7f7 fb26 	bl	80002d0 <__aeabi_dsub>
 8008c84:	a386      	add	r3, pc, #536	; (adr r3, 8008ea0 <__ieee754_rem_pio2+0x2e8>)
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	f7f7 fb23 	bl	80002d4 <__adddf3>
 8008c8e:	f04f 35ff 	mov.w	r5, #4294967295
 8008c92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c96:	e7c6      	b.n	8008c26 <__ieee754_rem_pio2+0x6e>
 8008c98:	a383      	add	r3, pc, #524	; (adr r3, 8008ea8 <__ieee754_rem_pio2+0x2f0>)
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	f7f7 fb19 	bl	80002d4 <__adddf3>
 8008ca2:	a383      	add	r3, pc, #524	; (adr r3, 8008eb0 <__ieee754_rem_pio2+0x2f8>)
 8008ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca8:	4606      	mov	r6, r0
 8008caa:	460f      	mov	r7, r1
 8008cac:	f7f7 fb12 	bl	80002d4 <__adddf3>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	e9c4 2300 	strd	r2, r3, [r4]
 8008cba:	4639      	mov	r1, r7
 8008cbc:	f7f7 fb08 	bl	80002d0 <__aeabi_dsub>
 8008cc0:	a37b      	add	r3, pc, #492	; (adr r3, 8008eb0 <__ieee754_rem_pio2+0x2f8>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	e7e0      	b.n	8008c8a <__ieee754_rem_pio2+0xd2>
 8008cc8:	4a84      	ldr	r2, [pc, #528]	; (8008edc <__ieee754_rem_pio2+0x324>)
 8008cca:	4592      	cmp	sl, r2
 8008ccc:	f300 80d5 	bgt.w	8008e7a <__ieee754_rem_pio2+0x2c2>
 8008cd0:	f000 fe20 	bl	8009914 <fabs>
 8008cd4:	a378      	add	r3, pc, #480	; (adr r3, 8008eb8 <__ieee754_rem_pio2+0x300>)
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	4606      	mov	r6, r0
 8008cdc:	460f      	mov	r7, r1
 8008cde:	f7f7 fcaf 	bl	8000640 <__aeabi_dmul>
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	4b7e      	ldr	r3, [pc, #504]	; (8008ee0 <__ieee754_rem_pio2+0x328>)
 8008ce6:	f7f7 faf5 	bl	80002d4 <__adddf3>
 8008cea:	f7f7 ff43 	bl	8000b74 <__aeabi_d2iz>
 8008cee:	4605      	mov	r5, r0
 8008cf0:	f7f7 fc3c 	bl	800056c <__aeabi_i2d>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008cfc:	a366      	add	r3, pc, #408	; (adr r3, 8008e98 <__ieee754_rem_pio2+0x2e0>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	f7f7 fc9d 	bl	8000640 <__aeabi_dmul>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	f7f7 fadf 	bl	80002d0 <__aeabi_dsub>
 8008d12:	a363      	add	r3, pc, #396	; (adr r3, 8008ea0 <__ieee754_rem_pio2+0x2e8>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	4680      	mov	r8, r0
 8008d1a:	4689      	mov	r9, r1
 8008d1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d20:	f7f7 fc8e 	bl	8000640 <__aeabi_dmul>
 8008d24:	2d1f      	cmp	r5, #31
 8008d26:	4606      	mov	r6, r0
 8008d28:	460f      	mov	r7, r1
 8008d2a:	dc0e      	bgt.n	8008d4a <__ieee754_rem_pio2+0x192>
 8008d2c:	4b6d      	ldr	r3, [pc, #436]	; (8008ee4 <__ieee754_rem_pio2+0x32c>)
 8008d2e:	1e6a      	subs	r2, r5, #1
 8008d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d34:	4553      	cmp	r3, sl
 8008d36:	d008      	beq.n	8008d4a <__ieee754_rem_pio2+0x192>
 8008d38:	4632      	mov	r2, r6
 8008d3a:	463b      	mov	r3, r7
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	4649      	mov	r1, r9
 8008d40:	f7f7 fac6 	bl	80002d0 <__aeabi_dsub>
 8008d44:	e9c4 0100 	strd	r0, r1, [r4]
 8008d48:	e013      	b.n	8008d72 <__ieee754_rem_pio2+0x1ba>
 8008d4a:	463b      	mov	r3, r7
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	4640      	mov	r0, r8
 8008d50:	4649      	mov	r1, r9
 8008d52:	f7f7 fabd 	bl	80002d0 <__aeabi_dsub>
 8008d56:	ea4f 532a 	mov.w	r3, sl, asr #20
 8008d5a:	9305      	str	r3, [sp, #20]
 8008d5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008d60:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008d64:	f1ba 0f10 	cmp.w	sl, #16
 8008d68:	dc1f      	bgt.n	8008daa <__ieee754_rem_pio2+0x1f2>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	e9c4 2300 	strd	r2, r3, [r4]
 8008d72:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008d76:	4640      	mov	r0, r8
 8008d78:	4653      	mov	r3, sl
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	f7f7 faa8 	bl	80002d0 <__aeabi_dsub>
 8008d80:	4632      	mov	r2, r6
 8008d82:	463b      	mov	r3, r7
 8008d84:	f7f7 faa4 	bl	80002d0 <__aeabi_dsub>
 8008d88:	460b      	mov	r3, r1
 8008d8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d8e:	9904      	ldr	r1, [sp, #16]
 8008d90:	4602      	mov	r2, r0
 8008d92:	2900      	cmp	r1, #0
 8008d94:	f6bf af47 	bge.w	8008c26 <__ieee754_rem_pio2+0x6e>
 8008d98:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008d9c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008da0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008da4:	60e3      	str	r3, [r4, #12]
 8008da6:	426d      	negs	r5, r5
 8008da8:	e73d      	b.n	8008c26 <__ieee754_rem_pio2+0x6e>
 8008daa:	a33f      	add	r3, pc, #252	; (adr r3, 8008ea8 <__ieee754_rem_pio2+0x2f0>)
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008db4:	f7f7 fc44 	bl	8000640 <__aeabi_dmul>
 8008db8:	4606      	mov	r6, r0
 8008dba:	460f      	mov	r7, r1
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	4640      	mov	r0, r8
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	f7f7 fa84 	bl	80002d0 <__aeabi_dsub>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4682      	mov	sl, r0
 8008dce:	468b      	mov	fp, r1
 8008dd0:	4640      	mov	r0, r8
 8008dd2:	4649      	mov	r1, r9
 8008dd4:	f7f7 fa7c 	bl	80002d0 <__aeabi_dsub>
 8008dd8:	4632      	mov	r2, r6
 8008dda:	463b      	mov	r3, r7
 8008ddc:	f7f7 fa78 	bl	80002d0 <__aeabi_dsub>
 8008de0:	a333      	add	r3, pc, #204	; (adr r3, 8008eb0 <__ieee754_rem_pio2+0x2f8>)
 8008de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de6:	4606      	mov	r6, r0
 8008de8:	460f      	mov	r7, r1
 8008dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dee:	f7f7 fc27 	bl	8000640 <__aeabi_dmul>
 8008df2:	4632      	mov	r2, r6
 8008df4:	463b      	mov	r3, r7
 8008df6:	f7f7 fa6b 	bl	80002d0 <__aeabi_dsub>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4606      	mov	r6, r0
 8008e00:	460f      	mov	r7, r1
 8008e02:	4650      	mov	r0, sl
 8008e04:	4659      	mov	r1, fp
 8008e06:	f7f7 fa63 	bl	80002d0 <__aeabi_dsub>
 8008e0a:	9a05      	ldr	r2, [sp, #20]
 8008e0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	2b31      	cmp	r3, #49	; 0x31
 8008e14:	dc06      	bgt.n	8008e24 <__ieee754_rem_pio2+0x26c>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	46d0      	mov	r8, sl
 8008e1c:	46d9      	mov	r9, fp
 8008e1e:	e9c4 2300 	strd	r2, r3, [r4]
 8008e22:	e7a6      	b.n	8008d72 <__ieee754_rem_pio2+0x1ba>
 8008e24:	a326      	add	r3, pc, #152	; (adr r3, 8008ec0 <__ieee754_rem_pio2+0x308>)
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e2e:	f7f7 fc07 	bl	8000640 <__aeabi_dmul>
 8008e32:	4606      	mov	r6, r0
 8008e34:	460f      	mov	r7, r1
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4650      	mov	r0, sl
 8008e3c:	4659      	mov	r1, fp
 8008e3e:	f7f7 fa47 	bl	80002d0 <__aeabi_dsub>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4680      	mov	r8, r0
 8008e48:	4689      	mov	r9, r1
 8008e4a:	4650      	mov	r0, sl
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	f7f7 fa3f 	bl	80002d0 <__aeabi_dsub>
 8008e52:	4632      	mov	r2, r6
 8008e54:	463b      	mov	r3, r7
 8008e56:	f7f7 fa3b 	bl	80002d0 <__aeabi_dsub>
 8008e5a:	a31b      	add	r3, pc, #108	; (adr r3, 8008ec8 <__ieee754_rem_pio2+0x310>)
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	4606      	mov	r6, r0
 8008e62:	460f      	mov	r7, r1
 8008e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e68:	f7f7 fbea 	bl	8000640 <__aeabi_dmul>
 8008e6c:	4632      	mov	r2, r6
 8008e6e:	463b      	mov	r3, r7
 8008e70:	f7f7 fa2e 	bl	80002d0 <__aeabi_dsub>
 8008e74:	4606      	mov	r6, r0
 8008e76:	460f      	mov	r7, r1
 8008e78:	e75e      	b.n	8008d38 <__ieee754_rem_pio2+0x180>
 8008e7a:	4a1b      	ldr	r2, [pc, #108]	; (8008ee8 <__ieee754_rem_pio2+0x330>)
 8008e7c:	4592      	cmp	sl, r2
 8008e7e:	dd35      	ble.n	8008eec <__ieee754_rem_pio2+0x334>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	f7f7 fa24 	bl	80002d0 <__aeabi_dsub>
 8008e88:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008e8c:	e9c4 0100 	strd	r0, r1, [r4]
 8008e90:	e6a2      	b.n	8008bd8 <__ieee754_rem_pio2+0x20>
 8008e92:	bf00      	nop
 8008e94:	f3af 8000 	nop.w
 8008e98:	54400000 	.word	0x54400000
 8008e9c:	3ff921fb 	.word	0x3ff921fb
 8008ea0:	1a626331 	.word	0x1a626331
 8008ea4:	3dd0b461 	.word	0x3dd0b461
 8008ea8:	1a600000 	.word	0x1a600000
 8008eac:	3dd0b461 	.word	0x3dd0b461
 8008eb0:	2e037073 	.word	0x2e037073
 8008eb4:	3ba3198a 	.word	0x3ba3198a
 8008eb8:	6dc9c883 	.word	0x6dc9c883
 8008ebc:	3fe45f30 	.word	0x3fe45f30
 8008ec0:	2e000000 	.word	0x2e000000
 8008ec4:	3ba3198a 	.word	0x3ba3198a
 8008ec8:	252049c1 	.word	0x252049c1
 8008ecc:	397b839a 	.word	0x397b839a
 8008ed0:	3fe921fb 	.word	0x3fe921fb
 8008ed4:	4002d97b 	.word	0x4002d97b
 8008ed8:	3ff921fb 	.word	0x3ff921fb
 8008edc:	413921fb 	.word	0x413921fb
 8008ee0:	3fe00000 	.word	0x3fe00000
 8008ee4:	0800abd4 	.word	0x0800abd4
 8008ee8:	7fefffff 	.word	0x7fefffff
 8008eec:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008ef0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008ef4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008ef8:	460f      	mov	r7, r1
 8008efa:	4606      	mov	r6, r0
 8008efc:	f7f7 fe3a 	bl	8000b74 <__aeabi_d2iz>
 8008f00:	f7f7 fb34 	bl	800056c <__aeabi_i2d>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	4630      	mov	r0, r6
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008f10:	f7f7 f9de 	bl	80002d0 <__aeabi_dsub>
 8008f14:	2200      	movs	r2, #0
 8008f16:	4b22      	ldr	r3, [pc, #136]	; (8008fa0 <__ieee754_rem_pio2+0x3e8>)
 8008f18:	f7f7 fb92 	bl	8000640 <__aeabi_dmul>
 8008f1c:	460f      	mov	r7, r1
 8008f1e:	4606      	mov	r6, r0
 8008f20:	f7f7 fe28 	bl	8000b74 <__aeabi_d2iz>
 8008f24:	f7f7 fb22 	bl	800056c <__aeabi_i2d>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	4639      	mov	r1, r7
 8008f30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f34:	f7f7 f9cc 	bl	80002d0 <__aeabi_dsub>
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4b19      	ldr	r3, [pc, #100]	; (8008fa0 <__ieee754_rem_pio2+0x3e8>)
 8008f3c:	f7f7 fb80 	bl	8000640 <__aeabi_dmul>
 8008f40:	f04f 0803 	mov.w	r8, #3
 8008f44:	2600      	movs	r6, #0
 8008f46:	2700      	movs	r7, #0
 8008f48:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008f4c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008f50:	4632      	mov	r2, r6
 8008f52:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008f56:	463b      	mov	r3, r7
 8008f58:	46c2      	mov	sl, r8
 8008f5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f5e:	f7f7 fdd7 	bl	8000b10 <__aeabi_dcmpeq>
 8008f62:	2800      	cmp	r0, #0
 8008f64:	d1f4      	bne.n	8008f50 <__ieee754_rem_pio2+0x398>
 8008f66:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <__ieee754_rem_pio2+0x3ec>)
 8008f68:	462a      	mov	r2, r5
 8008f6a:	9301      	str	r3, [sp, #4]
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	4621      	mov	r1, r4
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	a806      	add	r0, sp, #24
 8008f74:	4653      	mov	r3, sl
 8008f76:	f000 f8d5 	bl	8009124 <__kernel_rem_pio2>
 8008f7a:	9b04      	ldr	r3, [sp, #16]
 8008f7c:	4605      	mov	r5, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f6bf ae51 	bge.w	8008c26 <__ieee754_rem_pio2+0x6e>
 8008f84:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008f88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f8c:	e9c4 2300 	strd	r2, r3, [r4]
 8008f90:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008f94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f98:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008f9c:	e703      	b.n	8008da6 <__ieee754_rem_pio2+0x1ee>
 8008f9e:	bf00      	nop
 8008fa0:	41700000 	.word	0x41700000
 8008fa4:	0800ac54 	.word	0x0800ac54

08008fa8 <__kernel_cos>:
 8008fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008fb0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	460f      	mov	r7, r1
 8008fb8:	e9cd 2300 	strd	r2, r3, [sp]
 8008fbc:	da04      	bge.n	8008fc8 <__kernel_cos+0x20>
 8008fbe:	f7f7 fdd9 	bl	8000b74 <__aeabi_d2iz>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	f000 8086 	beq.w	80090d4 <__kernel_cos+0x12c>
 8008fc8:	4642      	mov	r2, r8
 8008fca:	463b      	mov	r3, r7
 8008fcc:	4640      	mov	r0, r8
 8008fce:	4639      	mov	r1, r7
 8008fd0:	f7f7 fb36 	bl	8000640 <__aeabi_dmul>
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	4b4e      	ldr	r3, [pc, #312]	; (8009110 <__kernel_cos+0x168>)
 8008fd8:	4604      	mov	r4, r0
 8008fda:	460d      	mov	r5, r1
 8008fdc:	f7f7 fb30 	bl	8000640 <__aeabi_dmul>
 8008fe0:	a33f      	add	r3, pc, #252	; (adr r3, 80090e0 <__kernel_cos+0x138>)
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	4682      	mov	sl, r0
 8008fe8:	468b      	mov	fp, r1
 8008fea:	4620      	mov	r0, r4
 8008fec:	4629      	mov	r1, r5
 8008fee:	f7f7 fb27 	bl	8000640 <__aeabi_dmul>
 8008ff2:	a33d      	add	r3, pc, #244	; (adr r3, 80090e8 <__kernel_cos+0x140>)
 8008ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff8:	f7f7 f96c 	bl	80002d4 <__adddf3>
 8008ffc:	4622      	mov	r2, r4
 8008ffe:	462b      	mov	r3, r5
 8009000:	f7f7 fb1e 	bl	8000640 <__aeabi_dmul>
 8009004:	a33a      	add	r3, pc, #232	; (adr r3, 80090f0 <__kernel_cos+0x148>)
 8009006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900a:	f7f7 f961 	bl	80002d0 <__aeabi_dsub>
 800900e:	4622      	mov	r2, r4
 8009010:	462b      	mov	r3, r5
 8009012:	f7f7 fb15 	bl	8000640 <__aeabi_dmul>
 8009016:	a338      	add	r3, pc, #224	; (adr r3, 80090f8 <__kernel_cos+0x150>)
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	f7f7 f95a 	bl	80002d4 <__adddf3>
 8009020:	4622      	mov	r2, r4
 8009022:	462b      	mov	r3, r5
 8009024:	f7f7 fb0c 	bl	8000640 <__aeabi_dmul>
 8009028:	a335      	add	r3, pc, #212	; (adr r3, 8009100 <__kernel_cos+0x158>)
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	f7f7 f94f 	bl	80002d0 <__aeabi_dsub>
 8009032:	4622      	mov	r2, r4
 8009034:	462b      	mov	r3, r5
 8009036:	f7f7 fb03 	bl	8000640 <__aeabi_dmul>
 800903a:	a333      	add	r3, pc, #204	; (adr r3, 8009108 <__kernel_cos+0x160>)
 800903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009040:	f7f7 f948 	bl	80002d4 <__adddf3>
 8009044:	4622      	mov	r2, r4
 8009046:	462b      	mov	r3, r5
 8009048:	f7f7 fafa 	bl	8000640 <__aeabi_dmul>
 800904c:	4622      	mov	r2, r4
 800904e:	462b      	mov	r3, r5
 8009050:	f7f7 faf6 	bl	8000640 <__aeabi_dmul>
 8009054:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009058:	4604      	mov	r4, r0
 800905a:	460d      	mov	r5, r1
 800905c:	4640      	mov	r0, r8
 800905e:	4639      	mov	r1, r7
 8009060:	f7f7 faee 	bl	8000640 <__aeabi_dmul>
 8009064:	460b      	mov	r3, r1
 8009066:	4602      	mov	r2, r0
 8009068:	4629      	mov	r1, r5
 800906a:	4620      	mov	r0, r4
 800906c:	f7f7 f930 	bl	80002d0 <__aeabi_dsub>
 8009070:	4b28      	ldr	r3, [pc, #160]	; (8009114 <__kernel_cos+0x16c>)
 8009072:	4680      	mov	r8, r0
 8009074:	429e      	cmp	r6, r3
 8009076:	4689      	mov	r9, r1
 8009078:	dc0e      	bgt.n	8009098 <__kernel_cos+0xf0>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	4650      	mov	r0, sl
 8009080:	4659      	mov	r1, fp
 8009082:	f7f7 f925 	bl	80002d0 <__aeabi_dsub>
 8009086:	4602      	mov	r2, r0
 8009088:	2000      	movs	r0, #0
 800908a:	460b      	mov	r3, r1
 800908c:	4922      	ldr	r1, [pc, #136]	; (8009118 <__kernel_cos+0x170>)
 800908e:	f7f7 f91f 	bl	80002d0 <__aeabi_dsub>
 8009092:	b003      	add	sp, #12
 8009094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009098:	2400      	movs	r4, #0
 800909a:	4b20      	ldr	r3, [pc, #128]	; (800911c <__kernel_cos+0x174>)
 800909c:	4622      	mov	r2, r4
 800909e:	429e      	cmp	r6, r3
 80090a0:	bfcc      	ite	gt
 80090a2:	4d1f      	ldrgt	r5, [pc, #124]	; (8009120 <__kernel_cos+0x178>)
 80090a4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80090a8:	462b      	mov	r3, r5
 80090aa:	2000      	movs	r0, #0
 80090ac:	491a      	ldr	r1, [pc, #104]	; (8009118 <__kernel_cos+0x170>)
 80090ae:	f7f7 f90f 	bl	80002d0 <__aeabi_dsub>
 80090b2:	4622      	mov	r2, r4
 80090b4:	4606      	mov	r6, r0
 80090b6:	460f      	mov	r7, r1
 80090b8:	462b      	mov	r3, r5
 80090ba:	4650      	mov	r0, sl
 80090bc:	4659      	mov	r1, fp
 80090be:	f7f7 f907 	bl	80002d0 <__aeabi_dsub>
 80090c2:	4642      	mov	r2, r8
 80090c4:	464b      	mov	r3, r9
 80090c6:	f7f7 f903 	bl	80002d0 <__aeabi_dsub>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4630      	mov	r0, r6
 80090d0:	4639      	mov	r1, r7
 80090d2:	e7dc      	b.n	800908e <__kernel_cos+0xe6>
 80090d4:	2000      	movs	r0, #0
 80090d6:	4910      	ldr	r1, [pc, #64]	; (8009118 <__kernel_cos+0x170>)
 80090d8:	e7db      	b.n	8009092 <__kernel_cos+0xea>
 80090da:	bf00      	nop
 80090dc:	f3af 8000 	nop.w
 80090e0:	be8838d4 	.word	0xbe8838d4
 80090e4:	bda8fae9 	.word	0xbda8fae9
 80090e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80090ec:	3e21ee9e 	.word	0x3e21ee9e
 80090f0:	809c52ad 	.word	0x809c52ad
 80090f4:	3e927e4f 	.word	0x3e927e4f
 80090f8:	19cb1590 	.word	0x19cb1590
 80090fc:	3efa01a0 	.word	0x3efa01a0
 8009100:	16c15177 	.word	0x16c15177
 8009104:	3f56c16c 	.word	0x3f56c16c
 8009108:	5555554c 	.word	0x5555554c
 800910c:	3fa55555 	.word	0x3fa55555
 8009110:	3fe00000 	.word	0x3fe00000
 8009114:	3fd33332 	.word	0x3fd33332
 8009118:	3ff00000 	.word	0x3ff00000
 800911c:	3fe90000 	.word	0x3fe90000
 8009120:	3fd20000 	.word	0x3fd20000

08009124 <__kernel_rem_pio2>:
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800912c:	9308      	str	r3, [sp, #32]
 800912e:	9106      	str	r1, [sp, #24]
 8009130:	4bb6      	ldr	r3, [pc, #728]	; (800940c <__kernel_rem_pio2+0x2e8>)
 8009132:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009134:	f112 0f14 	cmn.w	r2, #20
 8009138:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800913c:	bfa8      	it	ge
 800913e:	1ed4      	subge	r4, r2, #3
 8009140:	9302      	str	r3, [sp, #8]
 8009142:	9b08      	ldr	r3, [sp, #32]
 8009144:	bfb8      	it	lt
 8009146:	2400      	movlt	r4, #0
 8009148:	f103 33ff 	add.w	r3, r3, #4294967295
 800914c:	9307      	str	r3, [sp, #28]
 800914e:	bfa4      	itt	ge
 8009150:	2318      	movge	r3, #24
 8009152:	fb94 f4f3 	sdivge	r4, r4, r3
 8009156:	f06f 0317 	mvn.w	r3, #23
 800915a:	fb04 3303 	mla	r3, r4, r3, r3
 800915e:	eb03 0b02 	add.w	fp, r3, r2
 8009162:	9a07      	ldr	r2, [sp, #28]
 8009164:	9b02      	ldr	r3, [sp, #8]
 8009166:	1aa7      	subs	r7, r4, r2
 8009168:	eb03 0802 	add.w	r8, r3, r2
 800916c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800916e:	2500      	movs	r5, #0
 8009170:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009174:	2200      	movs	r2, #0
 8009176:	2300      	movs	r3, #0
 8009178:	9009      	str	r0, [sp, #36]	; 0x24
 800917a:	ae20      	add	r6, sp, #128	; 0x80
 800917c:	4545      	cmp	r5, r8
 800917e:	dd14      	ble.n	80091aa <__kernel_rem_pio2+0x86>
 8009180:	f04f 0800 	mov.w	r8, #0
 8009184:	9a08      	ldr	r2, [sp, #32]
 8009186:	ab20      	add	r3, sp, #128	; 0x80
 8009188:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800918c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8009190:	9b02      	ldr	r3, [sp, #8]
 8009192:	4598      	cmp	r8, r3
 8009194:	dc35      	bgt.n	8009202 <__kernel_rem_pio2+0xde>
 8009196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009198:	2200      	movs	r2, #0
 800919a:	f1a3 0908 	sub.w	r9, r3, #8
 800919e:	2300      	movs	r3, #0
 80091a0:	462f      	mov	r7, r5
 80091a2:	2600      	movs	r6, #0
 80091a4:	e9cd 2300 	strd	r2, r3, [sp]
 80091a8:	e01f      	b.n	80091ea <__kernel_rem_pio2+0xc6>
 80091aa:	42ef      	cmn	r7, r5
 80091ac:	d40b      	bmi.n	80091c6 <__kernel_rem_pio2+0xa2>
 80091ae:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80091b2:	e9cd 2300 	strd	r2, r3, [sp]
 80091b6:	f7f7 f9d9 	bl	800056c <__aeabi_i2d>
 80091ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091be:	e8e6 0102 	strd	r0, r1, [r6], #8
 80091c2:	3501      	adds	r5, #1
 80091c4:	e7da      	b.n	800917c <__kernel_rem_pio2+0x58>
 80091c6:	4610      	mov	r0, r2
 80091c8:	4619      	mov	r1, r3
 80091ca:	e7f8      	b.n	80091be <__kernel_rem_pio2+0x9a>
 80091cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80091d4:	f7f7 fa34 	bl	8000640 <__aeabi_dmul>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091e0:	f7f7 f878 	bl	80002d4 <__adddf3>
 80091e4:	e9cd 0100 	strd	r0, r1, [sp]
 80091e8:	3601      	adds	r6, #1
 80091ea:	9b07      	ldr	r3, [sp, #28]
 80091ec:	3f08      	subs	r7, #8
 80091ee:	429e      	cmp	r6, r3
 80091f0:	ddec      	ble.n	80091cc <__kernel_rem_pio2+0xa8>
 80091f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091f6:	f108 0801 	add.w	r8, r8, #1
 80091fa:	e8ea 2302 	strd	r2, r3, [sl], #8
 80091fe:	3508      	adds	r5, #8
 8009200:	e7c6      	b.n	8009190 <__kernel_rem_pio2+0x6c>
 8009202:	9b02      	ldr	r3, [sp, #8]
 8009204:	aa0c      	add	r2, sp, #48	; 0x30
 8009206:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800920a:	930b      	str	r3, [sp, #44]	; 0x2c
 800920c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800920e:	9e02      	ldr	r6, [sp, #8]
 8009210:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009214:	930a      	str	r3, [sp, #40]	; 0x28
 8009216:	ab98      	add	r3, sp, #608	; 0x260
 8009218:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800921c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8009220:	ab70      	add	r3, sp, #448	; 0x1c0
 8009222:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8009226:	46d0      	mov	r8, sl
 8009228:	46b1      	mov	r9, r6
 800922a:	af0c      	add	r7, sp, #48	; 0x30
 800922c:	9700      	str	r7, [sp, #0]
 800922e:	f1b9 0f00 	cmp.w	r9, #0
 8009232:	f1a8 0808 	sub.w	r8, r8, #8
 8009236:	dc71      	bgt.n	800931c <__kernel_rem_pio2+0x1f8>
 8009238:	465a      	mov	r2, fp
 800923a:	4620      	mov	r0, r4
 800923c:	4629      	mov	r1, r5
 800923e:	f000 fbef 	bl	8009a20 <scalbn>
 8009242:	2200      	movs	r2, #0
 8009244:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009248:	4604      	mov	r4, r0
 800924a:	460d      	mov	r5, r1
 800924c:	f7f7 f9f8 	bl	8000640 <__aeabi_dmul>
 8009250:	f000 fb66 	bl	8009920 <floor>
 8009254:	2200      	movs	r2, #0
 8009256:	4b6e      	ldr	r3, [pc, #440]	; (8009410 <__kernel_rem_pio2+0x2ec>)
 8009258:	f7f7 f9f2 	bl	8000640 <__aeabi_dmul>
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	4620      	mov	r0, r4
 8009262:	4629      	mov	r1, r5
 8009264:	f7f7 f834 	bl	80002d0 <__aeabi_dsub>
 8009268:	460d      	mov	r5, r1
 800926a:	4604      	mov	r4, r0
 800926c:	f7f7 fc82 	bl	8000b74 <__aeabi_d2iz>
 8009270:	9004      	str	r0, [sp, #16]
 8009272:	f7f7 f97b 	bl	800056c <__aeabi_i2d>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4620      	mov	r0, r4
 800927c:	4629      	mov	r1, r5
 800927e:	f7f7 f827 	bl	80002d0 <__aeabi_dsub>
 8009282:	f1bb 0f00 	cmp.w	fp, #0
 8009286:	4680      	mov	r8, r0
 8009288:	4689      	mov	r9, r1
 800928a:	dd70      	ble.n	800936e <__kernel_rem_pio2+0x24a>
 800928c:	1e72      	subs	r2, r6, #1
 800928e:	ab0c      	add	r3, sp, #48	; 0x30
 8009290:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009294:	9c04      	ldr	r4, [sp, #16]
 8009296:	f1cb 0118 	rsb	r1, fp, #24
 800929a:	fa40 f301 	asr.w	r3, r0, r1
 800929e:	441c      	add	r4, r3
 80092a0:	408b      	lsls	r3, r1
 80092a2:	1ac0      	subs	r0, r0, r3
 80092a4:	ab0c      	add	r3, sp, #48	; 0x30
 80092a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80092aa:	f1cb 0317 	rsb	r3, fp, #23
 80092ae:	9404      	str	r4, [sp, #16]
 80092b0:	fa40 f303 	asr.w	r3, r0, r3
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	9b00      	ldr	r3, [sp, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	dd66      	ble.n	800938a <__kernel_rem_pio2+0x266>
 80092bc:	2200      	movs	r2, #0
 80092be:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80092c2:	4614      	mov	r4, r2
 80092c4:	9b04      	ldr	r3, [sp, #16]
 80092c6:	3301      	adds	r3, #1
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	4296      	cmp	r6, r2
 80092cc:	f300 80ac 	bgt.w	8009428 <__kernel_rem_pio2+0x304>
 80092d0:	f1bb 0f00 	cmp.w	fp, #0
 80092d4:	dd07      	ble.n	80092e6 <__kernel_rem_pio2+0x1c2>
 80092d6:	f1bb 0f01 	cmp.w	fp, #1
 80092da:	f000 80b4 	beq.w	8009446 <__kernel_rem_pio2+0x322>
 80092de:	f1bb 0f02 	cmp.w	fp, #2
 80092e2:	f000 80ba 	beq.w	800945a <__kernel_rem_pio2+0x336>
 80092e6:	9b00      	ldr	r3, [sp, #0]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d14e      	bne.n	800938a <__kernel_rem_pio2+0x266>
 80092ec:	4642      	mov	r2, r8
 80092ee:	464b      	mov	r3, r9
 80092f0:	2000      	movs	r0, #0
 80092f2:	4948      	ldr	r1, [pc, #288]	; (8009414 <__kernel_rem_pio2+0x2f0>)
 80092f4:	f7f6 ffec 	bl	80002d0 <__aeabi_dsub>
 80092f8:	4680      	mov	r8, r0
 80092fa:	4689      	mov	r9, r1
 80092fc:	2c00      	cmp	r4, #0
 80092fe:	d044      	beq.n	800938a <__kernel_rem_pio2+0x266>
 8009300:	465a      	mov	r2, fp
 8009302:	2000      	movs	r0, #0
 8009304:	4943      	ldr	r1, [pc, #268]	; (8009414 <__kernel_rem_pio2+0x2f0>)
 8009306:	f000 fb8b 	bl	8009a20 <scalbn>
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	4640      	mov	r0, r8
 8009310:	4649      	mov	r1, r9
 8009312:	f7f6 ffdd 	bl	80002d0 <__aeabi_dsub>
 8009316:	4680      	mov	r8, r0
 8009318:	4689      	mov	r9, r1
 800931a:	e036      	b.n	800938a <__kernel_rem_pio2+0x266>
 800931c:	2200      	movs	r2, #0
 800931e:	4b3e      	ldr	r3, [pc, #248]	; (8009418 <__kernel_rem_pio2+0x2f4>)
 8009320:	4620      	mov	r0, r4
 8009322:	4629      	mov	r1, r5
 8009324:	f7f7 f98c 	bl	8000640 <__aeabi_dmul>
 8009328:	f7f7 fc24 	bl	8000b74 <__aeabi_d2iz>
 800932c:	f7f7 f91e 	bl	800056c <__aeabi_i2d>
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009338:	2200      	movs	r2, #0
 800933a:	4b38      	ldr	r3, [pc, #224]	; (800941c <__kernel_rem_pio2+0x2f8>)
 800933c:	f7f7 f980 	bl	8000640 <__aeabi_dmul>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	4620      	mov	r0, r4
 8009346:	4629      	mov	r1, r5
 8009348:	f7f6 ffc2 	bl	80002d0 <__aeabi_dsub>
 800934c:	f7f7 fc12 	bl	8000b74 <__aeabi_d2iz>
 8009350:	9b00      	ldr	r3, [sp, #0]
 8009352:	f109 39ff 	add.w	r9, r9, #4294967295
 8009356:	f843 0b04 	str.w	r0, [r3], #4
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009360:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009364:	f7f6 ffb6 	bl	80002d4 <__adddf3>
 8009368:	4604      	mov	r4, r0
 800936a:	460d      	mov	r5, r1
 800936c:	e75f      	b.n	800922e <__kernel_rem_pio2+0x10a>
 800936e:	d105      	bne.n	800937c <__kernel_rem_pio2+0x258>
 8009370:	1e73      	subs	r3, r6, #1
 8009372:	aa0c      	add	r2, sp, #48	; 0x30
 8009374:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009378:	15c3      	asrs	r3, r0, #23
 800937a:	e79b      	b.n	80092b4 <__kernel_rem_pio2+0x190>
 800937c:	2200      	movs	r2, #0
 800937e:	4b28      	ldr	r3, [pc, #160]	; (8009420 <__kernel_rem_pio2+0x2fc>)
 8009380:	f7f7 fbe4 	bl	8000b4c <__aeabi_dcmpge>
 8009384:	2800      	cmp	r0, #0
 8009386:	d13e      	bne.n	8009406 <__kernel_rem_pio2+0x2e2>
 8009388:	9000      	str	r0, [sp, #0]
 800938a:	2200      	movs	r2, #0
 800938c:	2300      	movs	r3, #0
 800938e:	4640      	mov	r0, r8
 8009390:	4649      	mov	r1, r9
 8009392:	f7f7 fbbd 	bl	8000b10 <__aeabi_dcmpeq>
 8009396:	2800      	cmp	r0, #0
 8009398:	f000 80b1 	beq.w	80094fe <__kernel_rem_pio2+0x3da>
 800939c:	1e74      	subs	r4, r6, #1
 800939e:	4623      	mov	r3, r4
 80093a0:	2200      	movs	r2, #0
 80093a2:	9902      	ldr	r1, [sp, #8]
 80093a4:	428b      	cmp	r3, r1
 80093a6:	da5f      	bge.n	8009468 <__kernel_rem_pio2+0x344>
 80093a8:	2a00      	cmp	r2, #0
 80093aa:	d074      	beq.n	8009496 <__kernel_rem_pio2+0x372>
 80093ac:	ab0c      	add	r3, sp, #48	; 0x30
 80093ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80093b2:	f1ab 0b18 	sub.w	fp, fp, #24
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	f000 809f 	beq.w	80094fa <__kernel_rem_pio2+0x3d6>
 80093bc:	465a      	mov	r2, fp
 80093be:	2000      	movs	r0, #0
 80093c0:	4914      	ldr	r1, [pc, #80]	; (8009414 <__kernel_rem_pio2+0x2f0>)
 80093c2:	f000 fb2d 	bl	8009a20 <scalbn>
 80093c6:	46a2      	mov	sl, r4
 80093c8:	4606      	mov	r6, r0
 80093ca:	460f      	mov	r7, r1
 80093cc:	f04f 0800 	mov.w	r8, #0
 80093d0:	ab70      	add	r3, sp, #448	; 0x1c0
 80093d2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8009418 <__kernel_rem_pio2+0x2f4>
 80093d6:	00e5      	lsls	r5, r4, #3
 80093d8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80093dc:	f1ba 0f00 	cmp.w	sl, #0
 80093e0:	f280 80c3 	bge.w	800956a <__kernel_rem_pio2+0x446>
 80093e4:	4626      	mov	r6, r4
 80093e6:	2e00      	cmp	r6, #0
 80093e8:	f2c0 80f5 	blt.w	80095d6 <__kernel_rem_pio2+0x4b2>
 80093ec:	4b0d      	ldr	r3, [pc, #52]	; (8009424 <__kernel_rem_pio2+0x300>)
 80093ee:	f04f 0a00 	mov.w	sl, #0
 80093f2:	9307      	str	r3, [sp, #28]
 80093f4:	ab70      	add	r3, sp, #448	; 0x1c0
 80093f6:	f04f 0b00 	mov.w	fp, #0
 80093fa:	f04f 0800 	mov.w	r8, #0
 80093fe:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009402:	1ba7      	subs	r7, r4, r6
 8009404:	e0db      	b.n	80095be <__kernel_rem_pio2+0x49a>
 8009406:	2302      	movs	r3, #2
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	e757      	b.n	80092bc <__kernel_rem_pio2+0x198>
 800940c:	0800ada0 	.word	0x0800ada0
 8009410:	40200000 	.word	0x40200000
 8009414:	3ff00000 	.word	0x3ff00000
 8009418:	3e700000 	.word	0x3e700000
 800941c:	41700000 	.word	0x41700000
 8009420:	3fe00000 	.word	0x3fe00000
 8009424:	0800ad60 	.word	0x0800ad60
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	b944      	cbnz	r4, 800943e <__kernel_rem_pio2+0x31a>
 800942c:	b11b      	cbz	r3, 8009436 <__kernel_rem_pio2+0x312>
 800942e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009432:	603b      	str	r3, [r7, #0]
 8009434:	2301      	movs	r3, #1
 8009436:	461c      	mov	r4, r3
 8009438:	3201      	adds	r2, #1
 800943a:	3704      	adds	r7, #4
 800943c:	e745      	b.n	80092ca <__kernel_rem_pio2+0x1a6>
 800943e:	1acb      	subs	r3, r1, r3
 8009440:	603b      	str	r3, [r7, #0]
 8009442:	4623      	mov	r3, r4
 8009444:	e7f7      	b.n	8009436 <__kernel_rem_pio2+0x312>
 8009446:	1e72      	subs	r2, r6, #1
 8009448:	ab0c      	add	r3, sp, #48	; 0x30
 800944a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800944e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009452:	a90c      	add	r1, sp, #48	; 0x30
 8009454:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009458:	e745      	b.n	80092e6 <__kernel_rem_pio2+0x1c2>
 800945a:	1e72      	subs	r2, r6, #1
 800945c:	ab0c      	add	r3, sp, #48	; 0x30
 800945e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009462:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009466:	e7f4      	b.n	8009452 <__kernel_rem_pio2+0x32e>
 8009468:	a90c      	add	r1, sp, #48	; 0x30
 800946a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800946e:	3b01      	subs	r3, #1
 8009470:	430a      	orrs	r2, r1
 8009472:	e796      	b.n	80093a2 <__kernel_rem_pio2+0x27e>
 8009474:	3401      	adds	r4, #1
 8009476:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800947a:	2a00      	cmp	r2, #0
 800947c:	d0fa      	beq.n	8009474 <__kernel_rem_pio2+0x350>
 800947e:	9b08      	ldr	r3, [sp, #32]
 8009480:	f106 0801 	add.w	r8, r6, #1
 8009484:	18f5      	adds	r5, r6, r3
 8009486:	ab20      	add	r3, sp, #128	; 0x80
 8009488:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800948c:	4434      	add	r4, r6
 800948e:	4544      	cmp	r4, r8
 8009490:	da04      	bge.n	800949c <__kernel_rem_pio2+0x378>
 8009492:	4626      	mov	r6, r4
 8009494:	e6bf      	b.n	8009216 <__kernel_rem_pio2+0xf2>
 8009496:	2401      	movs	r4, #1
 8009498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800949a:	e7ec      	b.n	8009476 <__kernel_rem_pio2+0x352>
 800949c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800949e:	f04f 0900 	mov.w	r9, #0
 80094a2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80094a6:	f7f7 f861 	bl	800056c <__aeabi_i2d>
 80094aa:	2600      	movs	r6, #0
 80094ac:	2700      	movs	r7, #0
 80094ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b0:	e9c5 0100 	strd	r0, r1, [r5]
 80094b4:	3b08      	subs	r3, #8
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	9504      	str	r5, [sp, #16]
 80094ba:	9b07      	ldr	r3, [sp, #28]
 80094bc:	4599      	cmp	r9, r3
 80094be:	dd05      	ble.n	80094cc <__kernel_rem_pio2+0x3a8>
 80094c0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80094c4:	f108 0801 	add.w	r8, r8, #1
 80094c8:	3508      	adds	r5, #8
 80094ca:	e7e0      	b.n	800948e <__kernel_rem_pio2+0x36a>
 80094cc:	f8dd c010 	ldr.w	ip, [sp, #16]
 80094d0:	9900      	ldr	r1, [sp, #0]
 80094d2:	f109 0901 	add.w	r9, r9, #1
 80094d6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80094da:	9100      	str	r1, [sp, #0]
 80094dc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80094e0:	f8cd c010 	str.w	ip, [sp, #16]
 80094e4:	f7f7 f8ac 	bl	8000640 <__aeabi_dmul>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4630      	mov	r0, r6
 80094ee:	4639      	mov	r1, r7
 80094f0:	f7f6 fef0 	bl	80002d4 <__adddf3>
 80094f4:	4606      	mov	r6, r0
 80094f6:	460f      	mov	r7, r1
 80094f8:	e7df      	b.n	80094ba <__kernel_rem_pio2+0x396>
 80094fa:	3c01      	subs	r4, #1
 80094fc:	e756      	b.n	80093ac <__kernel_rem_pio2+0x288>
 80094fe:	f1cb 0200 	rsb	r2, fp, #0
 8009502:	4640      	mov	r0, r8
 8009504:	4649      	mov	r1, r9
 8009506:	f000 fa8b 	bl	8009a20 <scalbn>
 800950a:	2200      	movs	r2, #0
 800950c:	4ba4      	ldr	r3, [pc, #656]	; (80097a0 <__kernel_rem_pio2+0x67c>)
 800950e:	4604      	mov	r4, r0
 8009510:	460d      	mov	r5, r1
 8009512:	f7f7 fb1b 	bl	8000b4c <__aeabi_dcmpge>
 8009516:	b1f8      	cbz	r0, 8009558 <__kernel_rem_pio2+0x434>
 8009518:	2200      	movs	r2, #0
 800951a:	4ba2      	ldr	r3, [pc, #648]	; (80097a4 <__kernel_rem_pio2+0x680>)
 800951c:	4620      	mov	r0, r4
 800951e:	4629      	mov	r1, r5
 8009520:	f7f7 f88e 	bl	8000640 <__aeabi_dmul>
 8009524:	f7f7 fb26 	bl	8000b74 <__aeabi_d2iz>
 8009528:	4607      	mov	r7, r0
 800952a:	f7f7 f81f 	bl	800056c <__aeabi_i2d>
 800952e:	2200      	movs	r2, #0
 8009530:	4b9b      	ldr	r3, [pc, #620]	; (80097a0 <__kernel_rem_pio2+0x67c>)
 8009532:	f7f7 f885 	bl	8000640 <__aeabi_dmul>
 8009536:	460b      	mov	r3, r1
 8009538:	4602      	mov	r2, r0
 800953a:	4629      	mov	r1, r5
 800953c:	4620      	mov	r0, r4
 800953e:	f7f6 fec7 	bl	80002d0 <__aeabi_dsub>
 8009542:	f7f7 fb17 	bl	8000b74 <__aeabi_d2iz>
 8009546:	1c74      	adds	r4, r6, #1
 8009548:	ab0c      	add	r3, sp, #48	; 0x30
 800954a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800954e:	f10b 0b18 	add.w	fp, fp, #24
 8009552:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8009556:	e731      	b.n	80093bc <__kernel_rem_pio2+0x298>
 8009558:	4620      	mov	r0, r4
 800955a:	4629      	mov	r1, r5
 800955c:	f7f7 fb0a 	bl	8000b74 <__aeabi_d2iz>
 8009560:	ab0c      	add	r3, sp, #48	; 0x30
 8009562:	4634      	mov	r4, r6
 8009564:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009568:	e728      	b.n	80093bc <__kernel_rem_pio2+0x298>
 800956a:	ab0c      	add	r3, sp, #48	; 0x30
 800956c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009570:	f7f6 fffc 	bl	800056c <__aeabi_i2d>
 8009574:	4632      	mov	r2, r6
 8009576:	463b      	mov	r3, r7
 8009578:	f7f7 f862 	bl	8000640 <__aeabi_dmul>
 800957c:	4642      	mov	r2, r8
 800957e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8009582:	464b      	mov	r3, r9
 8009584:	4630      	mov	r0, r6
 8009586:	4639      	mov	r1, r7
 8009588:	f7f7 f85a 	bl	8000640 <__aeabi_dmul>
 800958c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009590:	4606      	mov	r6, r0
 8009592:	460f      	mov	r7, r1
 8009594:	e722      	b.n	80093dc <__kernel_rem_pio2+0x2b8>
 8009596:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800959a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800959e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80095a2:	f8cd c01c 	str.w	ip, [sp, #28]
 80095a6:	f7f7 f84b 	bl	8000640 <__aeabi_dmul>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
 80095ae:	4650      	mov	r0, sl
 80095b0:	4659      	mov	r1, fp
 80095b2:	f7f6 fe8f 	bl	80002d4 <__adddf3>
 80095b6:	4682      	mov	sl, r0
 80095b8:	468b      	mov	fp, r1
 80095ba:	f108 0801 	add.w	r8, r8, #1
 80095be:	9b02      	ldr	r3, [sp, #8]
 80095c0:	4598      	cmp	r8, r3
 80095c2:	dc01      	bgt.n	80095c8 <__kernel_rem_pio2+0x4a4>
 80095c4:	45b8      	cmp	r8, r7
 80095c6:	dde6      	ble.n	8009596 <__kernel_rem_pio2+0x472>
 80095c8:	ab48      	add	r3, sp, #288	; 0x120
 80095ca:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80095ce:	e9c7 ab00 	strd	sl, fp, [r7]
 80095d2:	3e01      	subs	r6, #1
 80095d4:	e707      	b.n	80093e6 <__kernel_rem_pio2+0x2c2>
 80095d6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80095d8:	2b02      	cmp	r3, #2
 80095da:	dc09      	bgt.n	80095f0 <__kernel_rem_pio2+0x4cc>
 80095dc:	2b00      	cmp	r3, #0
 80095de:	dc32      	bgt.n	8009646 <__kernel_rem_pio2+0x522>
 80095e0:	d05a      	beq.n	8009698 <__kernel_rem_pio2+0x574>
 80095e2:	9b04      	ldr	r3, [sp, #16]
 80095e4:	f003 0007 	and.w	r0, r3, #7
 80095e8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80095ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80095f2:	2b03      	cmp	r3, #3
 80095f4:	d1f5      	bne.n	80095e2 <__kernel_rem_pio2+0x4be>
 80095f6:	ab48      	add	r3, sp, #288	; 0x120
 80095f8:	441d      	add	r5, r3
 80095fa:	46aa      	mov	sl, r5
 80095fc:	46a3      	mov	fp, r4
 80095fe:	f1bb 0f00 	cmp.w	fp, #0
 8009602:	dc76      	bgt.n	80096f2 <__kernel_rem_pio2+0x5ce>
 8009604:	46aa      	mov	sl, r5
 8009606:	46a3      	mov	fp, r4
 8009608:	f1bb 0f01 	cmp.w	fp, #1
 800960c:	f300 8090 	bgt.w	8009730 <__kernel_rem_pio2+0x60c>
 8009610:	2700      	movs	r7, #0
 8009612:	463e      	mov	r6, r7
 8009614:	2c01      	cmp	r4, #1
 8009616:	f300 80aa 	bgt.w	800976e <__kernel_rem_pio2+0x64a>
 800961a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800961e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8009622:	9b00      	ldr	r3, [sp, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	f040 80ac 	bne.w	8009782 <__kernel_rem_pio2+0x65e>
 800962a:	4603      	mov	r3, r0
 800962c:	462a      	mov	r2, r5
 800962e:	9806      	ldr	r0, [sp, #24]
 8009630:	e9c0 2300 	strd	r2, r3, [r0]
 8009634:	4622      	mov	r2, r4
 8009636:	460b      	mov	r3, r1
 8009638:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800963c:	463a      	mov	r2, r7
 800963e:	4633      	mov	r3, r6
 8009640:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009644:	e7cd      	b.n	80095e2 <__kernel_rem_pio2+0x4be>
 8009646:	2000      	movs	r0, #0
 8009648:	46a0      	mov	r8, r4
 800964a:	4601      	mov	r1, r0
 800964c:	ab48      	add	r3, sp, #288	; 0x120
 800964e:	441d      	add	r5, r3
 8009650:	f1b8 0f00 	cmp.w	r8, #0
 8009654:	da3a      	bge.n	80096cc <__kernel_rem_pio2+0x5a8>
 8009656:	9b00      	ldr	r3, [sp, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d03e      	beq.n	80096da <__kernel_rem_pio2+0x5b6>
 800965c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009660:	4602      	mov	r2, r0
 8009662:	462b      	mov	r3, r5
 8009664:	9d06      	ldr	r5, [sp, #24]
 8009666:	2601      	movs	r6, #1
 8009668:	e9c5 2300 	strd	r2, r3, [r5]
 800966c:	460b      	mov	r3, r1
 800966e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009672:	f7f6 fe2d 	bl	80002d0 <__aeabi_dsub>
 8009676:	4684      	mov	ip, r0
 8009678:	460f      	mov	r7, r1
 800967a:	ad48      	add	r5, sp, #288	; 0x120
 800967c:	42b4      	cmp	r4, r6
 800967e:	f105 0508 	add.w	r5, r5, #8
 8009682:	da2c      	bge.n	80096de <__kernel_rem_pio2+0x5ba>
 8009684:	9b00      	ldr	r3, [sp, #0]
 8009686:	b10b      	cbz	r3, 800968c <__kernel_rem_pio2+0x568>
 8009688:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800968c:	4662      	mov	r2, ip
 800968e:	463b      	mov	r3, r7
 8009690:	9906      	ldr	r1, [sp, #24]
 8009692:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009696:	e7a4      	b.n	80095e2 <__kernel_rem_pio2+0x4be>
 8009698:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800969a:	ab48      	add	r3, sp, #288	; 0x120
 800969c:	4637      	mov	r7, r6
 800969e:	441d      	add	r5, r3
 80096a0:	2c00      	cmp	r4, #0
 80096a2:	da09      	bge.n	80096b8 <__kernel_rem_pio2+0x594>
 80096a4:	9b00      	ldr	r3, [sp, #0]
 80096a6:	b10b      	cbz	r3, 80096ac <__kernel_rem_pio2+0x588>
 80096a8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80096ac:	4632      	mov	r2, r6
 80096ae:	463b      	mov	r3, r7
 80096b0:	9906      	ldr	r1, [sp, #24]
 80096b2:	e9c1 2300 	strd	r2, r3, [r1]
 80096b6:	e794      	b.n	80095e2 <__kernel_rem_pio2+0x4be>
 80096b8:	4630      	mov	r0, r6
 80096ba:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80096be:	4639      	mov	r1, r7
 80096c0:	f7f6 fe08 	bl	80002d4 <__adddf3>
 80096c4:	3c01      	subs	r4, #1
 80096c6:	4606      	mov	r6, r0
 80096c8:	460f      	mov	r7, r1
 80096ca:	e7e9      	b.n	80096a0 <__kernel_rem_pio2+0x57c>
 80096cc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80096d0:	f7f6 fe00 	bl	80002d4 <__adddf3>
 80096d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80096d8:	e7ba      	b.n	8009650 <__kernel_rem_pio2+0x52c>
 80096da:	460d      	mov	r5, r1
 80096dc:	e7c0      	b.n	8009660 <__kernel_rem_pio2+0x53c>
 80096de:	4660      	mov	r0, ip
 80096e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096e4:	4639      	mov	r1, r7
 80096e6:	f7f6 fdf5 	bl	80002d4 <__adddf3>
 80096ea:	3601      	adds	r6, #1
 80096ec:	4684      	mov	ip, r0
 80096ee:	460f      	mov	r7, r1
 80096f0:	e7c4      	b.n	800967c <__kernel_rem_pio2+0x558>
 80096f2:	e9da 6700 	ldrd	r6, r7, [sl]
 80096f6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80096fa:	4632      	mov	r2, r6
 80096fc:	463b      	mov	r3, r7
 80096fe:	4640      	mov	r0, r8
 8009700:	4649      	mov	r1, r9
 8009702:	f7f6 fde7 	bl	80002d4 <__adddf3>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800970e:	4640      	mov	r0, r8
 8009710:	4649      	mov	r1, r9
 8009712:	f7f6 fddd 	bl	80002d0 <__aeabi_dsub>
 8009716:	4632      	mov	r2, r6
 8009718:	463b      	mov	r3, r7
 800971a:	f7f6 fddb 	bl	80002d4 <__adddf3>
 800971e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009722:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009726:	f10b 3bff 	add.w	fp, fp, #4294967295
 800972a:	e9ca 2300 	strd	r2, r3, [sl]
 800972e:	e766      	b.n	80095fe <__kernel_rem_pio2+0x4da>
 8009730:	e9da 8900 	ldrd	r8, r9, [sl]
 8009734:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009738:	4642      	mov	r2, r8
 800973a:	464b      	mov	r3, r9
 800973c:	4630      	mov	r0, r6
 800973e:	4639      	mov	r1, r7
 8009740:	f7f6 fdc8 	bl	80002d4 <__adddf3>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800974c:	4630      	mov	r0, r6
 800974e:	4639      	mov	r1, r7
 8009750:	f7f6 fdbe 	bl	80002d0 <__aeabi_dsub>
 8009754:	4642      	mov	r2, r8
 8009756:	464b      	mov	r3, r9
 8009758:	f7f6 fdbc 	bl	80002d4 <__adddf3>
 800975c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009760:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009764:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009768:	e9ca 2300 	strd	r2, r3, [sl]
 800976c:	e74c      	b.n	8009608 <__kernel_rem_pio2+0x4e4>
 800976e:	4638      	mov	r0, r7
 8009770:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009774:	4631      	mov	r1, r6
 8009776:	f7f6 fdad 	bl	80002d4 <__adddf3>
 800977a:	3c01      	subs	r4, #1
 800977c:	4607      	mov	r7, r0
 800977e:	460e      	mov	r6, r1
 8009780:	e748      	b.n	8009614 <__kernel_rem_pio2+0x4f0>
 8009782:	9b06      	ldr	r3, [sp, #24]
 8009784:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009788:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800978c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009790:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8009794:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8009798:	601d      	str	r5, [r3, #0]
 800979a:	615e      	str	r6, [r3, #20]
 800979c:	e721      	b.n	80095e2 <__kernel_rem_pio2+0x4be>
 800979e:	bf00      	nop
 80097a0:	41700000 	.word	0x41700000
 80097a4:	3e700000 	.word	0x3e700000

080097a8 <__kernel_sin>:
 80097a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ac:	b086      	sub	sp, #24
 80097ae:	e9cd 2300 	strd	r2, r3, [sp]
 80097b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097b6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80097ba:	4682      	mov	sl, r0
 80097bc:	460c      	mov	r4, r1
 80097be:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80097c0:	da03      	bge.n	80097ca <__kernel_sin+0x22>
 80097c2:	f7f7 f9d7 	bl	8000b74 <__aeabi_d2iz>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d050      	beq.n	800986c <__kernel_sin+0xc4>
 80097ca:	4652      	mov	r2, sl
 80097cc:	4623      	mov	r3, r4
 80097ce:	4650      	mov	r0, sl
 80097d0:	4621      	mov	r1, r4
 80097d2:	f7f6 ff35 	bl	8000640 <__aeabi_dmul>
 80097d6:	4606      	mov	r6, r0
 80097d8:	460f      	mov	r7, r1
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4650      	mov	r0, sl
 80097e0:	4621      	mov	r1, r4
 80097e2:	f7f6 ff2d 	bl	8000640 <__aeabi_dmul>
 80097e6:	a33e      	add	r3, pc, #248	; (adr r3, 80098e0 <__kernel_sin+0x138>)
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	4680      	mov	r8, r0
 80097ee:	4689      	mov	r9, r1
 80097f0:	4630      	mov	r0, r6
 80097f2:	4639      	mov	r1, r7
 80097f4:	f7f6 ff24 	bl	8000640 <__aeabi_dmul>
 80097f8:	a33b      	add	r3, pc, #236	; (adr r3, 80098e8 <__kernel_sin+0x140>)
 80097fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fe:	f7f6 fd67 	bl	80002d0 <__aeabi_dsub>
 8009802:	4632      	mov	r2, r6
 8009804:	463b      	mov	r3, r7
 8009806:	f7f6 ff1b 	bl	8000640 <__aeabi_dmul>
 800980a:	a339      	add	r3, pc, #228	; (adr r3, 80098f0 <__kernel_sin+0x148>)
 800980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009810:	f7f6 fd60 	bl	80002d4 <__adddf3>
 8009814:	4632      	mov	r2, r6
 8009816:	463b      	mov	r3, r7
 8009818:	f7f6 ff12 	bl	8000640 <__aeabi_dmul>
 800981c:	a336      	add	r3, pc, #216	; (adr r3, 80098f8 <__kernel_sin+0x150>)
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	f7f6 fd55 	bl	80002d0 <__aeabi_dsub>
 8009826:	4632      	mov	r2, r6
 8009828:	463b      	mov	r3, r7
 800982a:	f7f6 ff09 	bl	8000640 <__aeabi_dmul>
 800982e:	a334      	add	r3, pc, #208	; (adr r3, 8009900 <__kernel_sin+0x158>)
 8009830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009834:	f7f6 fd4e 	bl	80002d4 <__adddf3>
 8009838:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800983c:	b9dd      	cbnz	r5, 8009876 <__kernel_sin+0xce>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	4630      	mov	r0, r6
 8009844:	4639      	mov	r1, r7
 8009846:	f7f6 fefb 	bl	8000640 <__aeabi_dmul>
 800984a:	a32f      	add	r3, pc, #188	; (adr r3, 8009908 <__kernel_sin+0x160>)
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	f7f6 fd3e 	bl	80002d0 <__aeabi_dsub>
 8009854:	4642      	mov	r2, r8
 8009856:	464b      	mov	r3, r9
 8009858:	f7f6 fef2 	bl	8000640 <__aeabi_dmul>
 800985c:	4602      	mov	r2, r0
 800985e:	460b      	mov	r3, r1
 8009860:	4650      	mov	r0, sl
 8009862:	4621      	mov	r1, r4
 8009864:	f7f6 fd36 	bl	80002d4 <__adddf3>
 8009868:	4682      	mov	sl, r0
 800986a:	460c      	mov	r4, r1
 800986c:	4650      	mov	r0, sl
 800986e:	4621      	mov	r1, r4
 8009870:	b006      	add	sp, #24
 8009872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009876:	2200      	movs	r2, #0
 8009878:	e9dd 0100 	ldrd	r0, r1, [sp]
 800987c:	4b24      	ldr	r3, [pc, #144]	; (8009910 <__kernel_sin+0x168>)
 800987e:	f7f6 fedf 	bl	8000640 <__aeabi_dmul>
 8009882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800988a:	4640      	mov	r0, r8
 800988c:	4649      	mov	r1, r9
 800988e:	f7f6 fed7 	bl	8000640 <__aeabi_dmul>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800989a:	f7f6 fd19 	bl	80002d0 <__aeabi_dsub>
 800989e:	4632      	mov	r2, r6
 80098a0:	463b      	mov	r3, r7
 80098a2:	f7f6 fecd 	bl	8000640 <__aeabi_dmul>
 80098a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098aa:	f7f6 fd11 	bl	80002d0 <__aeabi_dsub>
 80098ae:	a316      	add	r3, pc, #88	; (adr r3, 8009908 <__kernel_sin+0x160>)
 80098b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b4:	4606      	mov	r6, r0
 80098b6:	460f      	mov	r7, r1
 80098b8:	4640      	mov	r0, r8
 80098ba:	4649      	mov	r1, r9
 80098bc:	f7f6 fec0 	bl	8000640 <__aeabi_dmul>
 80098c0:	4602      	mov	r2, r0
 80098c2:	460b      	mov	r3, r1
 80098c4:	4630      	mov	r0, r6
 80098c6:	4639      	mov	r1, r7
 80098c8:	f7f6 fd04 	bl	80002d4 <__adddf3>
 80098cc:	4602      	mov	r2, r0
 80098ce:	460b      	mov	r3, r1
 80098d0:	4650      	mov	r0, sl
 80098d2:	4621      	mov	r1, r4
 80098d4:	f7f6 fcfc 	bl	80002d0 <__aeabi_dsub>
 80098d8:	e7c6      	b.n	8009868 <__kernel_sin+0xc0>
 80098da:	bf00      	nop
 80098dc:	f3af 8000 	nop.w
 80098e0:	5acfd57c 	.word	0x5acfd57c
 80098e4:	3de5d93a 	.word	0x3de5d93a
 80098e8:	8a2b9ceb 	.word	0x8a2b9ceb
 80098ec:	3e5ae5e6 	.word	0x3e5ae5e6
 80098f0:	57b1fe7d 	.word	0x57b1fe7d
 80098f4:	3ec71de3 	.word	0x3ec71de3
 80098f8:	19c161d5 	.word	0x19c161d5
 80098fc:	3f2a01a0 	.word	0x3f2a01a0
 8009900:	1110f8a6 	.word	0x1110f8a6
 8009904:	3f811111 	.word	0x3f811111
 8009908:	55555549 	.word	0x55555549
 800990c:	3fc55555 	.word	0x3fc55555
 8009910:	3fe00000 	.word	0x3fe00000

08009914 <fabs>:
 8009914:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009918:	4770      	bx	lr
 800991a:	0000      	movs	r0, r0
 800991c:	0000      	movs	r0, r0
	...

08009920 <floor>:
 8009920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009924:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009928:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800992c:	2e13      	cmp	r6, #19
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4607      	mov	r7, r0
 8009934:	460c      	mov	r4, r1
 8009936:	4605      	mov	r5, r0
 8009938:	dc33      	bgt.n	80099a2 <floor+0x82>
 800993a:	2e00      	cmp	r6, #0
 800993c:	da14      	bge.n	8009968 <floor+0x48>
 800993e:	a334      	add	r3, pc, #208	; (adr r3, 8009a10 <floor+0xf0>)
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	f7f6 fcc6 	bl	80002d4 <__adddf3>
 8009948:	2200      	movs	r2, #0
 800994a:	2300      	movs	r3, #0
 800994c:	f7f7 f908 	bl	8000b60 <__aeabi_dcmpgt>
 8009950:	b138      	cbz	r0, 8009962 <floor+0x42>
 8009952:	2c00      	cmp	r4, #0
 8009954:	da58      	bge.n	8009a08 <floor+0xe8>
 8009956:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800995a:	431d      	orrs	r5, r3
 800995c:	d001      	beq.n	8009962 <floor+0x42>
 800995e:	2500      	movs	r5, #0
 8009960:	4c2d      	ldr	r4, [pc, #180]	; (8009a18 <floor+0xf8>)
 8009962:	4623      	mov	r3, r4
 8009964:	462f      	mov	r7, r5
 8009966:	e025      	b.n	80099b4 <floor+0x94>
 8009968:	4a2c      	ldr	r2, [pc, #176]	; (8009a1c <floor+0xfc>)
 800996a:	fa42 f806 	asr.w	r8, r2, r6
 800996e:	ea01 0208 	and.w	r2, r1, r8
 8009972:	4302      	orrs	r2, r0
 8009974:	d01e      	beq.n	80099b4 <floor+0x94>
 8009976:	a326      	add	r3, pc, #152	; (adr r3, 8009a10 <floor+0xf0>)
 8009978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997c:	f7f6 fcaa 	bl	80002d4 <__adddf3>
 8009980:	2200      	movs	r2, #0
 8009982:	2300      	movs	r3, #0
 8009984:	f7f7 f8ec 	bl	8000b60 <__aeabi_dcmpgt>
 8009988:	2800      	cmp	r0, #0
 800998a:	d0ea      	beq.n	8009962 <floor+0x42>
 800998c:	2c00      	cmp	r4, #0
 800998e:	bfbe      	ittt	lt
 8009990:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009994:	fa43 f606 	asrlt.w	r6, r3, r6
 8009998:	19a4      	addlt	r4, r4, r6
 800999a:	2500      	movs	r5, #0
 800999c:	ea24 0408 	bic.w	r4, r4, r8
 80099a0:	e7df      	b.n	8009962 <floor+0x42>
 80099a2:	2e33      	cmp	r6, #51	; 0x33
 80099a4:	dd0a      	ble.n	80099bc <floor+0x9c>
 80099a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80099aa:	d103      	bne.n	80099b4 <floor+0x94>
 80099ac:	f7f6 fc92 	bl	80002d4 <__adddf3>
 80099b0:	4607      	mov	r7, r0
 80099b2:	460b      	mov	r3, r1
 80099b4:	4638      	mov	r0, r7
 80099b6:	4619      	mov	r1, r3
 80099b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099bc:	f04f 32ff 	mov.w	r2, #4294967295
 80099c0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80099c4:	fa22 f808 	lsr.w	r8, r2, r8
 80099c8:	ea18 0f00 	tst.w	r8, r0
 80099cc:	d0f2      	beq.n	80099b4 <floor+0x94>
 80099ce:	a310      	add	r3, pc, #64	; (adr r3, 8009a10 <floor+0xf0>)
 80099d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d4:	f7f6 fc7e 	bl	80002d4 <__adddf3>
 80099d8:	2200      	movs	r2, #0
 80099da:	2300      	movs	r3, #0
 80099dc:	f7f7 f8c0 	bl	8000b60 <__aeabi_dcmpgt>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d0be      	beq.n	8009962 <floor+0x42>
 80099e4:	2c00      	cmp	r4, #0
 80099e6:	da02      	bge.n	80099ee <floor+0xce>
 80099e8:	2e14      	cmp	r6, #20
 80099ea:	d103      	bne.n	80099f4 <floor+0xd4>
 80099ec:	3401      	adds	r4, #1
 80099ee:	ea25 0508 	bic.w	r5, r5, r8
 80099f2:	e7b6      	b.n	8009962 <floor+0x42>
 80099f4:	2301      	movs	r3, #1
 80099f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80099fa:	fa03 f606 	lsl.w	r6, r3, r6
 80099fe:	4435      	add	r5, r6
 8009a00:	42bd      	cmp	r5, r7
 8009a02:	bf38      	it	cc
 8009a04:	18e4      	addcc	r4, r4, r3
 8009a06:	e7f2      	b.n	80099ee <floor+0xce>
 8009a08:	2500      	movs	r5, #0
 8009a0a:	462c      	mov	r4, r5
 8009a0c:	e7a9      	b.n	8009962 <floor+0x42>
 8009a0e:	bf00      	nop
 8009a10:	8800759c 	.word	0x8800759c
 8009a14:	7e37e43c 	.word	0x7e37e43c
 8009a18:	bff00000 	.word	0xbff00000
 8009a1c:	000fffff 	.word	0x000fffff

08009a20 <scalbn>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009a26:	4604      	mov	r4, r0
 8009a28:	460d      	mov	r5, r1
 8009a2a:	4617      	mov	r7, r2
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	b996      	cbnz	r6, 8009a56 <scalbn+0x36>
 8009a30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a34:	4303      	orrs	r3, r0
 8009a36:	d039      	beq.n	8009aac <scalbn+0x8c>
 8009a38:	4b33      	ldr	r3, [pc, #204]	; (8009b08 <scalbn+0xe8>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f7f6 fe00 	bl	8000640 <__aeabi_dmul>
 8009a40:	4b32      	ldr	r3, [pc, #200]	; (8009b0c <scalbn+0xec>)
 8009a42:	4604      	mov	r4, r0
 8009a44:	429f      	cmp	r7, r3
 8009a46:	460d      	mov	r5, r1
 8009a48:	da0f      	bge.n	8009a6a <scalbn+0x4a>
 8009a4a:	a32b      	add	r3, pc, #172	; (adr r3, 8009af8 <scalbn+0xd8>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	f7f6 fdf6 	bl	8000640 <__aeabi_dmul>
 8009a54:	e006      	b.n	8009a64 <scalbn+0x44>
 8009a56:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009a5a:	4296      	cmp	r6, r2
 8009a5c:	d10a      	bne.n	8009a74 <scalbn+0x54>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	f7f6 fc38 	bl	80002d4 <__adddf3>
 8009a64:	4604      	mov	r4, r0
 8009a66:	460d      	mov	r5, r1
 8009a68:	e020      	b.n	8009aac <scalbn+0x8c>
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009a70:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009a74:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009a78:	19b9      	adds	r1, r7, r6
 8009a7a:	4291      	cmp	r1, r2
 8009a7c:	dd0e      	ble.n	8009a9c <scalbn+0x7c>
 8009a7e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009a82:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009a86:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009a8a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009a8e:	4820      	ldr	r0, [pc, #128]	; (8009b10 <scalbn+0xf0>)
 8009a90:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009a94:	a31a      	add	r3, pc, #104	; (adr r3, 8009b00 <scalbn+0xe0>)
 8009a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9a:	e7d9      	b.n	8009a50 <scalbn+0x30>
 8009a9c:	2900      	cmp	r1, #0
 8009a9e:	dd08      	ble.n	8009ab2 <scalbn+0x92>
 8009aa0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009aa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009aa8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009aac:	4620      	mov	r0, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ab2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009ab6:	da12      	bge.n	8009ade <scalbn+0xbe>
 8009ab8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009abc:	429f      	cmp	r7, r3
 8009abe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009ac2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8009ac6:	dcdc      	bgt.n	8009a82 <scalbn+0x62>
 8009ac8:	a30b      	add	r3, pc, #44	; (adr r3, 8009af8 <scalbn+0xd8>)
 8009aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ace:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009ad2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009ad6:	480f      	ldr	r0, [pc, #60]	; (8009b14 <scalbn+0xf4>)
 8009ad8:	f041 011f 	orr.w	r1, r1, #31
 8009adc:	e7b8      	b.n	8009a50 <scalbn+0x30>
 8009ade:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009ae2:	3136      	adds	r1, #54	; 0x36
 8009ae4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ae8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009aec:	4620      	mov	r0, r4
 8009aee:	4629      	mov	r1, r5
 8009af0:	2200      	movs	r2, #0
 8009af2:	4b09      	ldr	r3, [pc, #36]	; (8009b18 <scalbn+0xf8>)
 8009af4:	e7ac      	b.n	8009a50 <scalbn+0x30>
 8009af6:	bf00      	nop
 8009af8:	c2f8f359 	.word	0xc2f8f359
 8009afc:	01a56e1f 	.word	0x01a56e1f
 8009b00:	8800759c 	.word	0x8800759c
 8009b04:	7e37e43c 	.word	0x7e37e43c
 8009b08:	43500000 	.word	0x43500000
 8009b0c:	ffff3cb0 	.word	0xffff3cb0
 8009b10:	8800759c 	.word	0x8800759c
 8009b14:	c2f8f359 	.word	0xc2f8f359
 8009b18:	3c900000 	.word	0x3c900000

08009b1c <_init>:
 8009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1e:	bf00      	nop
 8009b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b22:	bc08      	pop	{r3}
 8009b24:	469e      	mov	lr, r3
 8009b26:	4770      	bx	lr

08009b28 <_fini>:
 8009b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2a:	bf00      	nop
 8009b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2e:	bc08      	pop	{r3}
 8009b30:	469e      	mov	lr, r3
 8009b32:	4770      	bx	lr
